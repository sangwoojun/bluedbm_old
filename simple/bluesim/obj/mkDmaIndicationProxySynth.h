/*
 * Generated by Bluespec Compiler, version 2013.12.beta1 (build 33034, 2013-12-02)
 * 
 * On Thu Jul  3 14:49:24 EDT 2014
 * 
 */

/* Generation options: */
#ifndef __mkDmaIndicationProxySynth_h__
#define __mkDmaIndicationProxySynth_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkDmaIndicationProxySynth module */
class MOD_mkDmaIndicationProxySynth : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_addrResponseresponseFifo_count;
  MOD_Fifo<tUInt64> INST_addrResponseresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_badAddrTransresponseFifo_count;
  MOD_Fifo<tUWide> INST_badAddrTransresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_badAddrresponseFifo_count;
  MOD_Fifo<tUWide> INST_badAddrresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_badNumberEntriesresponseFifo_count;
  MOD_Fifo<tUInt64> INST_badNumberEntriesresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_badPageSizeresponseFifo_count;
  MOD_Fifo<tUInt64> INST_badPageSizeresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_badPointerresponseFifo_count;
  MOD_Fifo<tUInt32> INST_badPointerresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_configRespresponseFifo_count;
  MOD_Fifo<tUWide> INST_configRespresponseFifo_fifo;
  MOD_Reg<tUInt8> INST_interruptEnableReg;
  MOD_Reg<tUInt32> INST_outOfRangeReadCountReg;
  MOD_Reg<tUInt32> INST_outOfRangeWriteCount;
  MOD_Reg<tUInt32> INST_p_outOfRangeWriteCount;
  MOD_Reg<tUInt8> INST_p_putEnable;
  MOD_Reg<tUInt32> INST_p_putFailedrequestFifo_count;
  MOD_Reg<tUInt32> INST_p_putFailedrequestFifo_fbnbuff;
  MOD_Fifo<tUInt32> INST_p_putFailedrequestFifo_fifo;
  MOD_Reg<tUInt32> INST_p_requestFiredCount;
  MOD_Wire<tUInt8> INST_p_requestFiredPulse;
  MOD_Reg<tUInt32> INST_reportMemoryTrafficresponseFifo_count;
  MOD_Fifo<tUInt64> INST_reportMemoryTrafficresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_reportStateDbgresponseFifo_count;
  MOD_Fifo<tUWide> INST_reportStateDbgresponseFifo_fifo;
  MOD_Fifo<tUInt32> INST_req_ar_fifo;
  MOD_Fifo<tUInt32> INST_req_aw_fifo;
  MOD_Fifo<tUInt8> INST_slaveBrespFifo;
  MOD_Reg<tUInt8> INST_slaveRS;
  MOD_Fifo<tUInt32> INST_slaveReadAddrFifos_0;
  MOD_Fifo<tUInt32> INST_slaveReadAddrFifos_1;
  MOD_Reg<tUInt32> INST_slaveReadAddrReg;
  MOD_Reg<tUInt8> INST_slaveReadBurstCountReg;
  MOD_Fifo<tUInt32> INST_slaveReadDataFifos_0;
  MOD_Fifo<tUInt32> INST_slaveReadDataFifos_1;
  MOD_Fifo<tUInt8> INST_slaveReadReqInfoFifo;
  MOD_Reg<tUInt8> INST_slaveReadTagReg;
  MOD_Reg<tUInt8> INST_slaveWS;
  MOD_Fifo<tUInt32> INST_slaveWriteAddrFifos_0;
  MOD_Fifo<tUInt32> INST_slaveWriteAddrFifos_1;
  MOD_Reg<tUInt32> INST_slaveWriteAddrReg;
  MOD_Reg<tUInt8> INST_slaveWriteBurstCountReg;
  MOD_Fifo<tUInt32> INST_slaveWriteDataFifos_0;
  MOD_Fifo<tUInt32> INST_slaveWriteDataFifos_1;
  MOD_Reg<tUInt8> INST_slaveWriteTagReg;
  MOD_Reg<tUInt32> INST_tagMismatchresponseFifo_count;
  MOD_Fifo<tUWide> INST_tagMismatchresponseFifo_fifo;
  MOD_Reg<tUInt32> INST_underflowReadCountReg;
 
 /* Constructor */
 public:
  MOD_mkDmaIndicationProxySynth(tSimStateHdl simHdl,
				char const *name,
				Module *parent,
				tUInt32 ARG_id);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt32 PORT_id;
  tUWide PORT_ifc_reportStateDbg_rec;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_configRespresponseFifo_fifo_notEmpty____d94;
  tUInt32 DEF__read__h3515;
  tUInt32 DEF_req_aw_fifo_first____d361;
  tUInt32 DEF_slaveReadAddrFifos_1_first____d100;
  tUInt32 DEF_slaveReadAddrFifos_0_first____d44;
  tUInt32 DEF_slaveWriteAddrFifos_1_first____d81;
  tUInt32 DEF_slaveWriteAddrFifos_0_first____d34;
  tUInt8 DEF_x__h13023;
  tUInt8 DEF__read__h419;
  tUInt8 DEF_slaveReadReqInfoFifo_first____d346;
  tUInt8 DEF_tagMismatchresponseFifo_fifo_notEmpty____d279;
  tUInt8 DEF_reportMemoryTrafficresponseFifo_fifo_notEmpty____d259;
  tUInt8 DEF_reportStateDbgresponseFifo_fifo_notEmpty____d239;
  tUInt8 DEF_badAddrresponseFifo_fifo_notEmpty____d219;
  tUInt8 DEF_badNumberEntriesresponseFifo_fifo_notEmpty____d199;
  tUInt8 DEF_badPageSizeresponseFifo_fifo_notEmpty____d179;
  tUInt8 DEF_badAddrTransresponseFifo_fifo_notEmpty____d159;
  tUInt8 DEF_badPointerresponseFifo_fifo_notEmpty____d140;
  tUInt8 DEF_addrResponseresponseFifo_fifo_notEmpty____d120;
  tUInt8 DEF_ws__h13010;
  tUInt8 DEF_x_select__h2377;
  tUInt8 DEF_ws__h13102;
  tUInt8 DEF_x__h12939;
  tUInt8 DEF_y_avValue_snd_snd_fst__h13170;
  tUInt8 DEF_y_avValue_snd_fst__h13165;
  tUInt8 DEF_p_putFailedrequestFifo_count_6_EQ_0___d57;
  tUInt8 DEF_slaveWriteBurstCountReg_59_EQ_0___d360;
  tUInt8 DEF_slaveReadBurstCountReg_EQ_0___d2;
  tUInt8 DEF_wbc__h13104;
  tUInt8 DEF_IF_slaveWriteBurstCountReg_59_EQ_0_60_THEN_req_ETC___d375;
  tUInt8 DEF_NOT_tagMismatchresponseFifo_fifo_notEmpty__79___d280;
  tUInt8 DEF_NOT_reportMemoryTrafficresponseFifo_fifo_notEm_ETC___d260;
  tUInt8 DEF_NOT_reportStateDbgresponseFifo_fifo_notEmpty__39___d240;
  tUInt8 DEF_NOT_badAddrresponseFifo_fifo_notEmpty__19___d220;
  tUInt8 DEF_NOT_badNumberEntriesresponseFifo_fifo_notEmpty_ETC___d200;
  tUInt8 DEF_NOT_badPageSizeresponseFifo_fifo_notEmpty__79___d180;
  tUInt8 DEF_NOT_badAddrTransresponseFifo_fifo_notEmpty__59___d160;
  tUInt8 DEF_NOT_badPointerresponseFifo_fifo_notEmpty__40___d141;
  tUInt8 DEF_NOT_addrResponseresponseFifo_fifo_notEmpty__20___d121;
  tUInt8 DEF_NOT_configRespresponseFifo_fifo_notEmpty__4___d95;
 
 /* Local definitions */
 private:
  tUInt8 DEF_tagMismatchresponseFifo_fifo_notEmpty__79_OR_r_ETC___d311;
  tUWide DEF_x_first__h7876;
  tUWide DEF_x_first__h6340;
  tUWide DEF_x_first__h8393;
  tUWide DEF_x_first__h9420;
  tUWide DEF_x_first__h4769;
  tUInt32 DEF_x__h4030;
  tUInt32 DEF_v___1__h3333;
  tUInt32 DEF_x__h3818;
  tUInt32 DEF_v___1__h12568;
  tUInt32 DEF_x__h12719;
  tUInt32 DEF_v___1__h12573;
  tUInt8 DEF_interruptEnableReg__h12580;
  tUWide DEF_x__h6630;
  tUWide DEF_x__h8166;
  tUWide DEF_x__h8683;
  tUWide DEF_x__h5077;
  tUWide DEF_x__h9710;
  tUInt32 DEF_x__h9757;
  tUWide DEF_x__h13762;
  tUWide DEF_ifc_badAddr_offset_CONCAT_ifc_badAddr_physAddr___d399;
  tUWide DEF_x__h13656;
  tUWide DEF_ifc_badAddrTrans_offset_CONCAT_ifc_badAddrTran_ETC___d395;
  tUWide DEF_x__h13872;
  tUWide DEF_x__h13575;
 
 /* Rules */
 public:
  void RL_slaveReadAddressGenerator();
  void RL_p_requestFiredIncrement();
  void RL_p_writeCtrlReg();
  void RL_p_readCtrlReg();
  void RL_p_readWriteFifo();
  void RL_p_slaveWriteputFailed();
  void RL_p_handleputFailedrequest();
  void RL_p_handleputFailedrequestFailure();
  void RL_p_outOfRangeWrite();
  void RL_writeCtrlReg();
  void RL_writeIndicatorFifo();
  void RL_configRespread();
  void RL_addrResponseread();
  void RL_badPointerread();
  void RL_badAddrTransread();
  void RL_badPageSizeread();
  void RL_badNumberEntriesread();
  void RL_badAddrread();
  void RL_reportStateDbgread();
  void RL_reportMemoryTrafficread();
  void RL_tagMismatchread();
  void RL_readCtrlReg();
  void RL_outOfRangeRead();
 
 /* Methods */
 public:
  tUInt32 METH_portalIfc_ifcType();
  tUInt8 METH_RDY_portalIfc_ifcType();
  tUInt32 METH_portalIfc_ifcId();
  tUInt8 METH_RDY_portalIfc_ifcId();
  void METH_portalIfc_slave_read_server_readReq_put(tUInt32 ARG_portalIfc_slave_read_server_readReq_put);
  tUInt8 METH_RDY_portalIfc_slave_read_server_readReq_put();
  tUInt64 METH_portalIfc_slave_read_server_readData_get();
  tUInt8 METH_RDY_portalIfc_slave_read_server_readData_get();
  void METH_portalIfc_slave_write_server_writeReq_put(tUInt32 ARG_portalIfc_slave_write_server_writeReq_put);
  tUInt8 METH_RDY_portalIfc_slave_write_server_writeReq_put();
  void METH_portalIfc_slave_write_server_writeData_put(tUInt64 ARG_portalIfc_slave_write_server_writeData_put);
  tUInt8 METH_RDY_portalIfc_slave_write_server_writeData_put();
  tUInt8 METH_portalIfc_slave_write_server_writeDone_get();
  tUInt8 METH_RDY_portalIfc_slave_write_server_writeDone_get();
  tUInt8 METH_portalIfc_interrupt__read();
  tUInt8 METH_RDY_portalIfc_interrupt__read();
  void METH_ifc_configResp(tUInt32 ARG_ifc_configResp_pointer, tUInt64 ARG_ifc_configResp_msg);
  tUInt8 METH_RDY_ifc_configResp();
  void METH_ifc_addrResponse(tUInt64 ARG_ifc_addrResponse_physAddr);
  tUInt8 METH_RDY_ifc_addrResponse();
  void METH_ifc_badPointer(tUInt32 ARG_ifc_badPointer_pointer);
  tUInt8 METH_RDY_ifc_badPointer();
  void METH_ifc_badAddrTrans(tUInt32 ARG_ifc_badAddrTrans_pointer,
			     tUInt64 ARG_ifc_badAddrTrans_offset,
			     tUInt64 ARG_ifc_badAddrTrans_barrier);
  tUInt8 METH_RDY_ifc_badAddrTrans();
  void METH_ifc_badPageSize(tUInt32 ARG_ifc_badPageSize_pointer, tUInt32 ARG_ifc_badPageSize_sz);
  tUInt8 METH_RDY_ifc_badPageSize();
  void METH_ifc_badNumberEntries(tUInt32 ARG_ifc_badNumberEntries_pointer,
				 tUInt32 ARG_ifc_badNumberEntries_sz);
  tUInt8 METH_RDY_ifc_badNumberEntries();
  void METH_ifc_badAddr(tUInt32 ARG_ifc_badAddr_pointer,
			tUInt64 ARG_ifc_badAddr_offset,
			tUInt64 ARG_ifc_badAddr_physAddr);
  tUInt8 METH_RDY_ifc_badAddr();
  void METH_ifc_reportStateDbg(tUWide ARG_ifc_reportStateDbg_rec);
  tUInt8 METH_RDY_ifc_reportStateDbg();
  void METH_ifc_reportMemoryTraffic(tUInt64 ARG_ifc_reportMemoryTraffic_words);
  tUInt8 METH_RDY_ifc_reportMemoryTraffic();
  void METH_ifc_tagMismatch(tUInt8 ARG_ifc_tagMismatch_x,
			    tUInt32 ARG_ifc_tagMismatch_a,
			    tUInt32 ARG_ifc_tagMismatch_b);
  tUInt8 METH_RDY_ifc_tagMismatch();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDmaIndicationProxySynth &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDmaIndicationProxySynth &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDmaIndicationProxySynth &backing);
};

#endif /* ifndef __mkDmaIndicationProxySynth_h__ */
