//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 16:46:37 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// leds                           O     4
// pins_aurora_TXN                O     4
// pins_aurora_TXP                O     4
// CLK_sys_clk_p                  I     1 clock
// CLK_sys_clk_n                  I     1 clock
// CLK_gtp_clk_0_p                I     1 clock
// CLK_gtp_clk_0_n                I     1 clock
// pins_aurora_rxn_i              I     4
// pins_aurora_rxp_i              I     4
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkControllerTop(CLK_sys_clk_p,
		       CLK_sys_clk_n,
		       CLK_gtp_clk_0_p,
		       CLK_gtp_clk_0_n,

		       leds,

		       pins_aurora_rxn_i,

		       pins_aurora_rxp_i,

		       pins_aurora_TXN,

		       pins_aurora_TXP);
  input  CLK_sys_clk_p;
  input  CLK_sys_clk_n;
  input  CLK_gtp_clk_0_p;
  input  CLK_gtp_clk_0_n;

  // value method leds
  output [3 : 0] leds;

  // action method pins_aurora_rxn_in
  input  [3 : 0] pins_aurora_rxn_i;

  // action method pins_aurora_rxp_in
  input  [3 : 0] pins_aurora_rxp_i;

  // value method pins_aurora_txn_out
  output [3 : 0] pins_aurora_TXN;

  // value method pins_aurora_txp_out
  output [3 : 0] pins_aurora_TXP;

  // signals for module outputs
  wire [3 : 0] leds, pins_aurora_TXN, pins_aurora_TXP;

  // register auroraResetCounter
  reg [31 : 0] auroraResetCounter;
  wire [31 : 0] auroraResetCounter_D_IN;
  wire auroraResetCounter_EN;

  // register clockdiv2_count
  reg [4 : 0] clockdiv2_count;
  wire [4 : 0] clockdiv2_count_D_IN;
  wire clockdiv2_count_EN;

  // register clockdiv2_fToggle_D1
  reg clockdiv2_fToggle_D1;
  wire clockdiv2_fToggle_D1_D_IN, clockdiv2_fToggle_D1_EN;

  // register clockdiv2_sToggle
  reg clockdiv2_sToggle;
  wire clockdiv2_sToggle_D_IN, clockdiv2_sToggle_EN;

  // register clockdiv2_slowClockEn
  reg clockdiv2_slowClockEn;
  wire clockdiv2_slowClockEn_D_IN, clockdiv2_slowClockEn_EN;

  // register ledC
  reg [31 : 0] ledC;
  wire [31 : 0] ledC_D_IN;
  wire ledC_EN;

  // register ledV
  reg [31 : 0] ledV;
  wire [31 : 0] ledV_D_IN;
  wire ledV_EN;

  // register platform_auroraDummy
  reg [31 : 0] platform_auroraDummy;
  wire [31 : 0] platform_auroraDummy_D_IN;
  wire platform_auroraDummy_EN;

  // register platform_auroraStat
  reg platform_auroraStat;
  wire platform_auroraStat_D_IN, platform_auroraStat_EN;

  // ports of submodule auroraIfc
  wire [246 : 0] auroraIfc_receive;
  wire [239 : 0] auroraIfc_send_data;
  wire [6 : 0] auroraIfc_send_ptype;
  wire [3 : 0] auroraIfc_TXN, auroraIfc_TXP, auroraIfc_rxn_i, auroraIfc_rxp_i;
  wire auroraIfc_CLK_clk,
       auroraIfc_EN_receive,
       auroraIfc_EN_send,
       auroraIfc_RDY_receive,
       auroraIfc_RDY_send,
       auroraIfc_RST_N_rst;

  // ports of submodule auroraL
  wire [31 : 0] auroraL_dD_OUT, auroraL_sD_IN;
  wire auroraL_dDEQ, auroraL_dEMPTY_N, auroraL_sENQ, auroraL_sFULL_N;

  // ports of submodule clockdiv2_clkdiv
  wire [15 : 0] clockdiv2_clkdiv_DI;
  wire [6 : 0] clockdiv2_clkdiv_DADDR;
  wire clockdiv2_clkdiv_CLK0,
       clockdiv2_clkdiv_CLKDV,
       clockdiv2_clkdiv_CLKFB,
       clockdiv2_clkdiv_DEN,
       clockdiv2_clkdiv_DWE,
       clockdiv2_clkdiv_LOCKED,
       clockdiv2_clkdiv_PSEN,
       clockdiv2_clkdiv_PSINCDEC;

  // ports of submodule clockdiv2_clkfbbuf
  wire clockdiv2_clkfbbuf_O;

  // ports of submodule clockdiv2_fastbuf
  wire clockdiv2_fastbuf_O;

  // ports of submodule clockdiv2_fastrst
  wire clockdiv2_fastrst_OUT_RST;

  // ports of submodule clockdiv2_rst
  wire clockdiv2_rst_RESET_OUT;

  // ports of submodule clockdiv2_rst_n
  wire clockdiv2_rst_n_OUT_RST;

  // ports of submodule clockdiv2_slowbuf
  wire clockdiv2_slowbuf_O;

  // ports of submodule clockdiv2_slowrst
  wire clockdiv2_slowrst_OUT_RST;

  // ports of submodule gtp_clk_0
  wire gtp_clk_0_O;

  // ports of submodule nullReset
  wire nullReset_RESET;

  // ports of submodule platform_auroraRQ
  wire [246 : 0] platform_auroraRQ_D_IN;
  wire platform_auroraRQ_CLR, platform_auroraRQ_DEQ, platform_auroraRQ_ENQ;

  // ports of submodule rst50ifc
  wire rst50ifc_ASSERT_IN;

  // ports of submodule rst50ifc2
  wire rst50ifc2_ASSERT_IN;

  // ports of submodule sys_clk
  wire sys_clk_O;

  // ports of submodule sys_clk_buf
  wire sys_clk_buf_O;

  // ports of submodule sys_clk_rst
  wire sys_clk_rst_OUT_RST;

  // ports of submodule sys_clk_rst_n
  wire sys_clk_rst_n_RESET_OUT;

  // remaining internal signals
  wire [4 : 0] x__h974;
  wire [3 : 0] IF_auroraResetCounter_BIT_27_THEN_1_ELSE_0__q1;

  // value method leds
  assign leds =
	     { auroraResetCounter[27],
	       auroraResetCounter[27],
	       auroraResetCounter[27],
	       IF_auroraResetCounter_BIT_27_THEN_1_ELSE_0__q1[0] } ;

  // value method pins_aurora_txn_out
  assign pins_aurora_TXN = auroraIfc_TXN ;

  // value method pins_aurora_txp_out
  assign pins_aurora_TXP = auroraIfc_TXP ;

  // submodule auroraIfc
  mkAuroraIntra auroraIfc(.CLK_gtp_clk(gtp_clk_0_O),
			  .CLK(sys_clk_buf_O),
			  .RST_N(sys_clk_rst_n_RESET_OUT),
			  .rxn_i(auroraIfc_rxn_i),
			  .rxp_i(auroraIfc_rxp_i),
			  .send_data(auroraIfc_send_data),
			  .send_ptype(auroraIfc_send_ptype),
			  .EN_send(auroraIfc_EN_send),
			  .EN_receive(auroraIfc_EN_receive),
			  .RDY_send(auroraIfc_RDY_send),
			  .receive(auroraIfc_receive),
			  .RDY_receive(auroraIfc_RDY_receive),
			  .channel_up(),
			  .RDY_channel_up(),
			  .lane_up(),
			  .RDY_lane_up(),
			  .hard_err(),
			  .RDY_hard_err(),
			  .soft_err(),
			  .RDY_soft_err(),
			  .data_err_count(),
			  .RDY_data_err_count(),
			  .TXN(auroraIfc_TXN),
			  .TXP(auroraIfc_TXP),
			  .CLK_clk(auroraIfc_CLK_clk),
			  .CLK_GATE_clk(),
			  .RST_N_rst(auroraIfc_RST_N_rst));

  // submodule auroraL
  SyncFIFO #(.dataWidth(32'd32),
	     .depth(32'd32),
	     .indxWidth(32'd5)) auroraL(.sCLK(auroraIfc_CLK_clk),
					.dCLK(sys_clk_buf_O),
					.sRST(auroraIfc_RST_N_rst),
					.sD_IN(auroraL_sD_IN),
					.sENQ(auroraL_sENQ),
					.dDEQ(auroraL_dDEQ),
					.sFULL_N(auroraL_sFULL_N),
					.dEMPTY_N(auroraL_dEMPTY_N),
					.dD_OUT(auroraL_dD_OUT));

  // submodule clockdiv2_clkdiv
  DCM_ADV #(.CLKDV_DIVIDE(2.0),
	    .CLKFX_DIVIDE(32'd1),
	    .CLKFX_MULTIPLY(32'd4),
	    .CLKIN_DIVIDE_BY_2("FALSE"),
	    .CLKIN_PERIOD(10.0),
	    .CLKOUT_PHASE_SHIFT("NONE"),
	    .CLK_FEEDBACK("1X"),
	    .DCM_AUTOCALIBRATION("TRUE"),
	    .DCM_PERFORMANCE_MODE("MAX_SPEED"),
	    .DESKEW_ADJUST("SYSTEM_SYNCHRONOUS"),
	    .DFS_FREQUENCY_MODE("LOW"),
	    .DLL_FREQUENCY_MODE("LOW"),
	    .DUTY_CYCLE_CORRECTION("TRUE"),
	    .FACTORY_JF(16'hF0F0),
	    .PHASE_SHIFT(32'd1),
	    .SIM_DEVICE("VIRTEX4"),
	    .STARTUP_WAIT("FALSE")) clockdiv2_clkdiv(.CLKIN(sys_clk_buf_O),
						     .RST(clockdiv2_rst_RESET_OUT),
						     .DCLK(1'd0),
						     .PSCLK(1'd0),
						     .CLKFB(clockdiv2_clkdiv_CLKFB),
						     .DADDR(clockdiv2_clkdiv_DADDR),
						     .DI(clockdiv2_clkdiv_DI),
						     .DWE(clockdiv2_clkdiv_DWE),
						     .PSINCDEC(clockdiv2_clkdiv_PSINCDEC),
						     .DEN(clockdiv2_clkdiv_DEN),
						     .PSEN(clockdiv2_clkdiv_PSEN),
						     .DO(),
						     .DRDY(),
						     .PSDONE(),
						     .LOCKED(clockdiv2_clkdiv_LOCKED),
						     .CLK0(clockdiv2_clkdiv_CLK0),
						     .CLK180(),
						     .CLK270(),
						     .CLK2X180(),
						     .CLK2X(),
						     .CLK90(),
						     .CLKDV(clockdiv2_clkdiv_CLKDV),
						     .CLKFX180(),
						     .CLKFX());

  // submodule clockdiv2_clkfbbuf
  BUFG clockdiv2_clkfbbuf(.I(clockdiv2_clkdiv_CLK0),
			  .O(clockdiv2_clkfbbuf_O));

  // submodule clockdiv2_fastbuf
  BUFG clockdiv2_fastbuf(.I(clockdiv2_clkdiv_CLK0), .O(clockdiv2_fastbuf_O));

  // submodule clockdiv2_fastrst
  SyncReset0 clockdiv2_fastrst(.IN_RST(clockdiv2_rst_n_OUT_RST),
			       .OUT_RST(clockdiv2_fastrst_OUT_RST));

  // submodule clockdiv2_rst
  ResetInverter clockdiv2_rst(.RESET_IN(clockdiv2_rst_n_OUT_RST),
			      .RESET_OUT(clockdiv2_rst_RESET_OUT));

  // submodule clockdiv2_rst_n
  SyncResetA #(.RSTDELAY(32'd2)) clockdiv2_rst_n(.CLK(sys_clk_buf_O),
						 .IN_RST(sys_clk_rst_n_RESET_OUT),
						 .OUT_RST(clockdiv2_rst_n_OUT_RST));

  // submodule clockdiv2_slowbuf
  BUFG clockdiv2_slowbuf(.I(clockdiv2_clkdiv_CLKDV), .O(clockdiv2_slowbuf_O));

  // submodule clockdiv2_slowrst
  SyncReset0 clockdiv2_slowrst(.IN_RST(clockdiv2_rst_n_OUT_RST),
			       .OUT_RST(clockdiv2_slowrst_OUT_RST));

  // submodule gtp_clk_0
  IBUFDS_GTE2 gtp_clk_0(.I(CLK_gtp_clk_0_p),
			.IB(CLK_gtp_clk_0_n),
			.CEB(1'd0),
			.O(gtp_clk_0_O),
			.ODIV2());

  // submodule nullReset
  NullReset nullReset(.RESET(nullReset_RESET), .RESET_N());

  // submodule platform_auroraRQ
  FIFO2 #(.width(32'd247),
	  .guarded(32'd1)) platform_auroraRQ(.RST(sys_clk_rst_n_RESET_OUT),
					     .CLK(sys_clk_buf_O),
					     .D_IN(platform_auroraRQ_D_IN),
					     .ENQ(platform_auroraRQ_ENQ),
					     .DEQ(platform_auroraRQ_DEQ),
					     .CLR(platform_auroraRQ_CLR),
					     .D_OUT(),
					     .FULL_N(),
					     .EMPTY_N());

  // submodule rst50ifc
  MakeResetA #(.RSTDELAY(32'd8), .init(1'd0)) rst50ifc(.CLK(sys_clk_buf_O),
						       .RST(sys_clk_rst_n_RESET_OUT),
						       .DST_CLK(clockdiv2_slowbuf_O),
						       .ASSERT_IN(rst50ifc_ASSERT_IN),
						       .ASSERT_OUT(),
						       .OUT_RST());

  // submodule rst50ifc2
  MakeResetA #(.RSTDELAY(32'd8), .init(1'd0)) rst50ifc2(.CLK(sys_clk_buf_O),
							.RST(sys_clk_rst_n_RESET_OUT),
							.DST_CLK(clockdiv2_slowbuf_O),
							.ASSERT_IN(rst50ifc2_ASSERT_IN),
							.ASSERT_OUT(),
							.OUT_RST());

  // submodule sys_clk
  IBUFDS #(.DIFF_TERM("TRUE")) sys_clk(.I(CLK_sys_clk_p),
				       .IB(CLK_sys_clk_n),
				       .O(sys_clk_O));

  // submodule sys_clk_buf
  BUFG sys_clk_buf(.I(sys_clk_O), .O(sys_clk_buf_O));

  // submodule sys_clk_rst
  SyncResetA #(.RSTDELAY(32'd3)) sys_clk_rst(.CLK(sys_clk_buf_O),
					     .IN_RST(nullReset_RESET),
					     .OUT_RST(sys_clk_rst_OUT_RST));

  // submodule sys_clk_rst_n
  ResetInverter sys_clk_rst_n(.RESET_IN(sys_clk_rst_OUT_RST),
			      .RESET_OUT(sys_clk_rst_n_RESET_OUT));

  // register auroraResetCounter
  assign auroraResetCounter_D_IN = auroraResetCounter + 32'd1 ;
  assign auroraResetCounter_EN = 1'd1 ;

  // register clockdiv2_count
  assign clockdiv2_count_D_IN =
	     (clockdiv2_sToggle && !clockdiv2_fToggle_D1 ||
	      clockdiv2_fToggle_D1 && !clockdiv2_sToggle) ?
	       5'd0 :
	       x__h974 ;
  assign clockdiv2_count_EN = clockdiv2_slowClockEn ;

  // register clockdiv2_fToggle_D1
  assign clockdiv2_fToggle_D1_D_IN = clockdiv2_sToggle ;
  assign clockdiv2_fToggle_D1_EN = 1'd1 ;

  // register clockdiv2_sToggle
  assign clockdiv2_sToggle_D_IN = !clockdiv2_sToggle ;
  assign clockdiv2_sToggle_EN = clockdiv2_clkdiv_LOCKED ;

  // register clockdiv2_slowClockEn
  assign clockdiv2_slowClockEn_D_IN = 1'd1 ;
  assign clockdiv2_slowClockEn_EN =
	     !clockdiv2_slowClockEn &&
	     (clockdiv2_sToggle && !clockdiv2_fToggle_D1 ||
	      clockdiv2_fToggle_D1 && !clockdiv2_sToggle) ;

  // register ledC
  assign ledC_D_IN = ledC + 32'd1 ;
  assign ledC_EN = auroraL_sFULL_N ;

  // register ledV
  assign ledV_D_IN = auroraL_dD_OUT ;
  assign ledV_EN = auroraL_dEMPTY_N ;

  // register platform_auroraDummy
  assign platform_auroraDummy_D_IN = 32'h0 ;
  assign platform_auroraDummy_EN = 1'b0 ;

  // register platform_auroraStat
  assign platform_auroraStat_D_IN = 1'b0 ;
  assign platform_auroraStat_EN = 1'b0 ;

  // submodule auroraIfc
  assign auroraIfc_rxn_i = pins_aurora_rxn_i ;
  assign auroraIfc_rxp_i = pins_aurora_rxp_i ;
  assign auroraIfc_send_data = auroraIfc_receive[246:7] ;
  assign auroraIfc_send_ptype = auroraIfc_receive[6:0] ;
  assign auroraIfc_EN_send = auroraIfc_RDY_send && auroraIfc_RDY_receive ;
  assign auroraIfc_EN_receive = auroraIfc_RDY_send && auroraIfc_RDY_receive ;

  // submodule auroraL
  assign auroraL_sD_IN = ledC ;
  assign auroraL_sENQ = auroraL_sFULL_N ;
  assign auroraL_dDEQ = auroraL_dEMPTY_N ;

  // submodule clockdiv2_clkdiv
  assign clockdiv2_clkdiv_CLKFB = clockdiv2_clkfbbuf_O ;
  assign clockdiv2_clkdiv_DADDR = 7'h0 ;
  assign clockdiv2_clkdiv_DI = 16'h0 ;
  assign clockdiv2_clkdiv_DWE = 1'b0 ;
  assign clockdiv2_clkdiv_PSINCDEC = 1'b0 ;
  assign clockdiv2_clkdiv_DEN = 1'b0 ;
  assign clockdiv2_clkdiv_PSEN = 1'b0 ;

  // submodule platform_auroraRQ
  assign platform_auroraRQ_D_IN = 247'h0 ;
  assign platform_auroraRQ_ENQ = 1'b0 ;
  assign platform_auroraRQ_DEQ = 1'b0 ;
  assign platform_auroraRQ_CLR = 1'b0 ;

  // submodule rst50ifc
  assign rst50ifc_ASSERT_IN = 1'b0 ;

  // submodule rst50ifc2
  assign rst50ifc2_ASSERT_IN = 1'b0 ;

  // remaining internal signals
  assign IF_auroraResetCounter_BIT_27_THEN_1_ELSE_0__q1 =
	     auroraResetCounter[27] ? 4'd1 : 4'd0 ;
  assign x__h974 = clockdiv2_count + 5'd1 ;

  // handling of inlined registers

  always@(posedge sys_clk_buf_O)
  begin
    if (sys_clk_rst_n_RESET_OUT == `BSV_RESET_VALUE)
      begin
        auroraResetCounter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ledV <= `BSV_ASSIGNMENT_DELAY 32'd0;
	platform_auroraDummy <= `BSV_ASSIGNMENT_DELAY 32'd0;
	platform_auroraStat <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (auroraResetCounter_EN)
	  auroraResetCounter <= `BSV_ASSIGNMENT_DELAY auroraResetCounter_D_IN;
	if (ledV_EN) ledV <= `BSV_ASSIGNMENT_DELAY ledV_D_IN;
	if (platform_auroraDummy_EN)
	  platform_auroraDummy <= `BSV_ASSIGNMENT_DELAY
	      platform_auroraDummy_D_IN;
	if (platform_auroraStat_EN)
	  platform_auroraStat <= `BSV_ASSIGNMENT_DELAY
	      platform_auroraStat_D_IN;
      end
  end

  always@(posedge clockdiv2_fastbuf_O)
  begin
    if (clockdiv2_count_EN)
      clockdiv2_count <= `BSV_ASSIGNMENT_DELAY clockdiv2_count_D_IN;
  end

  always@(posedge auroraIfc_CLK_clk)
  begin
    if (auroraIfc_RST_N_rst == `BSV_RESET_VALUE)
      begin
        ledC <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (ledC_EN) ledC <= `BSV_ASSIGNMENT_DELAY ledC_D_IN;
      end
  end

  always@(posedge clockdiv2_fastbuf_O or
	  `BSV_RESET_EDGE clockdiv2_fastrst_OUT_RST)
  if (clockdiv2_fastrst_OUT_RST == `BSV_RESET_VALUE)
    begin
      clockdiv2_fToggle_D1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      clockdiv2_slowClockEn <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (clockdiv2_fToggle_D1_EN)
	clockdiv2_fToggle_D1 <= `BSV_ASSIGNMENT_DELAY
	    clockdiv2_fToggle_D1_D_IN;
      if (clockdiv2_slowClockEn_EN)
	clockdiv2_slowClockEn <= `BSV_ASSIGNMENT_DELAY
	    clockdiv2_slowClockEn_D_IN;
    end

  always@(posedge clockdiv2_slowbuf_O or
	  `BSV_RESET_EDGE clockdiv2_slowrst_OUT_RST)
  if (clockdiv2_slowrst_OUT_RST == `BSV_RESET_VALUE)
    begin
      clockdiv2_sToggle <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (clockdiv2_sToggle_EN)
	clockdiv2_sToggle <= `BSV_ASSIGNMENT_DELAY clockdiv2_sToggle_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    auroraResetCounter = 32'hAAAAAAAA;
    clockdiv2_count = 5'h0A;
    clockdiv2_fToggle_D1 = 1'h0;
    clockdiv2_sToggle = 1'h0;
    clockdiv2_slowClockEn = 1'h0;
    ledC = 32'hAAAAAAAA;
    ledV = 32'hAAAAAAAA;
    platform_auroraDummy = 32'hAAAAAAAA;
    platform_auroraStat = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkControllerTop

