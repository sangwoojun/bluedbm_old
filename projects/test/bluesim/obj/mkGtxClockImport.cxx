/*
 * Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
 * 
 * On Tue Sep  9 02:31:39 EDT 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkGtxClockImport.h"


/* Constructor */
MOD_mkGtxClockImport::MOD_mkGtxClockImport(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  PORT_RDY_aurora_clk_gtx_clk_p = false;
  PORT_RDY_aurora_clk_gtx_clk_n = false;
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkGtxClockImport::init_symbols_0()
{
  init_symbol(&symbols[0u], "RDY_aurora_clk_gtx_clk_n", SYM_PORT, &PORT_RDY_aurora_clk_gtx_clk_n, 1u);
  init_symbol(&symbols[1u], "RDY_aurora_clk_gtx_clk_p", SYM_PORT, &PORT_RDY_aurora_clk_gtx_clk_p, 1u);
}


/* Rule actions */


/* Methods */

void MOD_mkGtxClockImport::METH_aurora_clk_gtx_clk_p(tUInt8 ARG_aurora_clk_gtx_clk_p_v)
{
  if (PORT_RDY_aurora_clk_gtx_clk_p)
  {
  }
}

tUInt8 MOD_mkGtxClockImport::METH_RDY_aurora_clk_gtx_clk_p()
{
  tUInt8 DEF_CAN_FIRE_aurora_clk_gtx_clk_p;
  DEF_CAN_FIRE_aurora_clk_gtx_clk_p = (tUInt8)1u;
  PORT_RDY_aurora_clk_gtx_clk_p = DEF_CAN_FIRE_aurora_clk_gtx_clk_p;
  return PORT_RDY_aurora_clk_gtx_clk_p;
}

void MOD_mkGtxClockImport::METH_aurora_clk_gtx_clk_n(tUInt8 ARG_aurora_clk_gtx_clk_n_v)
{
  if (PORT_RDY_aurora_clk_gtx_clk_n)
  {
  }
}

tUInt8 MOD_mkGtxClockImport::METH_RDY_aurora_clk_gtx_clk_n()
{
  tUInt8 DEF_CAN_FIRE_aurora_clk_gtx_clk_n;
  DEF_CAN_FIRE_aurora_clk_gtx_clk_n = (tUInt8)1u;
  PORT_RDY_aurora_clk_gtx_clk_n = DEF_CAN_FIRE_aurora_clk_gtx_clk_n;
  return PORT_RDY_aurora_clk_gtx_clk_n;
}


/* Reset routines */

void MOD_mkGtxClockImport::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkGtxClockImport::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkGtxClockImport::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkGtxClockImport::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_aurora_clk_gtx_clk_n", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_aurora_clk_gtx_clk_p", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkGtxClockImport::dump_VCD(tVCDDumpType dt,
				    unsigned int levels,
				    MOD_mkGtxClockImport &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkGtxClockImport::vcd_defs(tVCDDumpType dt, MOD_mkGtxClockImport &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_RDY_aurora_clk_gtx_clk_n) != PORT_RDY_aurora_clk_gtx_clk_n)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_aurora_clk_gtx_clk_n, 1u);
	backing.PORT_RDY_aurora_clk_gtx_clk_n = PORT_RDY_aurora_clk_gtx_clk_n;
      }
      ++num;
      if ((backing.PORT_RDY_aurora_clk_gtx_clk_p) != PORT_RDY_aurora_clk_gtx_clk_p)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_aurora_clk_gtx_clk_p, 1u);
	backing.PORT_RDY_aurora_clk_gtx_clk_p = PORT_RDY_aurora_clk_gtx_clk_p;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_RDY_aurora_clk_gtx_clk_n, 1u);
      backing.PORT_RDY_aurora_clk_gtx_clk_n = PORT_RDY_aurora_clk_gtx_clk_n;
      vcd_write_val(sim_hdl, num++, PORT_RDY_aurora_clk_gtx_clk_p, 1u);
      backing.PORT_RDY_aurora_clk_gtx_clk_p = PORT_RDY_aurora_clk_gtx_clk_p;
    }
}
