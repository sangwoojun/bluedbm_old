/*
 * Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
 * 
 * On Tue Sep  9 02:31:39 EDT 2014
 * 
 */

/* Generation options: */
#ifndef __mkAuroraIntra_h__
#define __mkAuroraIntra_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAuroraIntra module */
class MOD_mkAuroraIntra : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
  tClock __clk_handle_1;
  tClock __clk_handle_2;
  tClock __clk_handle_3;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUWide> INST_auroraIntraImport_mirrorQ;
  MOD_Reg<tUInt8> INST_curRecvOffset;
  MOD_Reg<tUWide> INST_packetRecvBuffer;
  MOD_Reg<tUWide> INST_packetSendBuffer;
  MOD_SyncFIFO<tUWide,tUInt8> INST_recvQ;
  MOD_SyncFIFO<tUWide,tUInt8> INST_sendQ;
 
 /* Constructor */
 public:
  MOD_mkAuroraIntra(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_send_data;
  tUInt8 PORT_TXP;
  tUInt8 PORT_TXN;
  tUWide PORT_receive;
  tUInt8 PORT_RDY_rxn_in;
  tUInt8 PORT_RDY_rxp_in;
  tUInt8 PORT_RDY_txn_out;
  tUInt8 PORT_RDY_txp_out;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_packetRecvBuffer_1_BIT_120___d22;
  tUInt8 DEF_header__h896;
  tUWide DEF_auroraIntraImport_mirrorQ_first____d24;
  tUWide DEF_packetRecvBuffer___d21;
  tUWide DEF_packetSendBuffer___d2;
  tUInt8 DEF_packetSendBuffer_BIT_120___d3;
  tUInt8 DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26;
  tUInt8 DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23;
  tUInt8 DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27;
 
 /* Local definitions */
 private:
  tUWide DEF_sendQ_first____d12;
  tUWide DEF_sendQ_first__2_BITS_239_TO_120___d17;
  tUWide DEF_data_BITS_119_TO_0___h665;
  tUWide DEF_cdata__h895;
  tUWide DEF_packetRecvBuffer_1_BITS_119_TO_0___d40;
  tUWide DEF_packetSendBuffer_BITS_119_TO_0___d9;
  tUWide DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15;
  tUWide DEF_data__h522;
  tUWide DEF_data__h659;
  tUWide DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36;
  tUWide DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37;
  tUWide DEF_pdata__h935;
  tUWide DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18;
  tUWide DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10;
  tUWide DEF_x1__h1025;
  tUWide DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19;
  tUWide DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38;
  tUWide DEF_receive__avValue1;
 
 /* Rules */
 public:
  void RL_sendPacketPart();
  void RL_recvPacketPart();
 
 /* Methods */
 public:
  tUInt8 METH_channel_up();
  tUInt8 METH_RDY_channel_up();
  tUInt8 METH_lane_up();
  tUInt8 METH_RDY_lane_up();
  tUInt8 METH_hard_err();
  tUInt8 METH_RDY_hard_err();
  tUInt8 METH_soft_err();
  tUInt8 METH_RDY_soft_err();
  tUInt8 METH_data_err_count();
  tUInt8 METH_RDY_data_err_count();
  tUInt8 METH_aurora_txn_out();
  tUInt8 METH_RDY_aurora_txn_out();
  tUInt8 METH_aurora_txp_out();
  tUInt8 METH_RDY_aurora_txp_out();
  void METH_send(tUWide ARG_send_data);
  tUInt8 METH_RDY_send();
  tUWide METH_receive();
  tUInt8 METH_RDY_receive();
  void METH_aurora_rxn_in(tUInt8 ARG_rxn_i);
  tUInt8 METH_RDY_aurora_rxn_in();
  void METH_aurora_rxp_in(tUInt8 ARG_rxp_i);
  tUInt8 METH_RDY_aurora_rxp_in();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
  tResetFn reset_fn_rst;
 
 /* Functions for the parent module to register its reset fns */
 public:
  void set_reset_fn_rst(tResetFn fn);
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
  void set_clk_1(char const *s);
  void set_clk_2(char const *s);
  void set_clk_3(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAuroraIntra &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAuroraIntra &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAuroraIntra &backing);
};

#endif /* ifndef __mkAuroraIntra_h__ */
