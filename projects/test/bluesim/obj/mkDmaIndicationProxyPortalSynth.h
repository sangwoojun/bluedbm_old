/*
 * Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
 * 
 * On Tue Sep  9 03:11:42 EDT 2014
 * 
 */

/* Generation options: */
#ifndef __mkDmaIndicationProxyPortalSynth_h__
#define __mkDmaIndicationProxyPortalSynth_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkDmaIndicationProxyPortalSynth module */
class MOD_mkDmaIndicationProxyPortalSynth : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_addrResponse_responseFifo_count;
  MOD_Fifo<tUInt64> INST_addrResponse_responseFifo_fifo;
  MOD_Reg<tUInt32> INST_configResp_responseFifo_count;
  MOD_Fifo<tUInt32> INST_configResp_responseFifo_fifo;
  MOD_Reg<tUInt32> INST_dmaError_responseFifo_count;
  MOD_Fifo<tUWide> INST_dmaError_responseFifo_fifo;
  MOD_Reg<tUInt32> INST_reportMemoryTraffic_responseFifo_count;
  MOD_Fifo<tUInt64> INST_reportMemoryTraffic_responseFifo_fifo;
  MOD_Reg<tUInt32> INST_reportStateDbg_responseFifo_count;
  MOD_Fifo<tUWide> INST_reportStateDbg_responseFifo_fifo;
 
 /* Constructor */
 public:
  MOD_mkDmaIndicationProxyPortalSynth(tSimStateHdl simHdl,
				      char const *name,
				      Module *parent,
				      tUInt32 ARG_id);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt32 PORT_id;
  tUWide PORT_ifc_reportStateDbg_rec;
  tUWide PORT_portalIfc_indicationSizeBits;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_dmaError_responseFifo_fifo_notEmpty____d53;
  tUInt8 DEF_dmaError_responseFifo_fifo_i_notEmpty____d54;
  tUInt8 DEF_reportMemoryTraffic_responseFifo_fifo_notEmpty____d41;
  tUInt8 DEF_reportMemoryTraffic_responseFifo_fifo_i_notEmpty____d42;
  tUInt8 DEF_reportStateDbg_responseFifo_fifo_notEmpty____d29;
  tUInt8 DEF_reportStateDbg_responseFifo_fifo_i_notEmpty____d30;
  tUInt8 DEF_addrResponse_responseFifo_fifo_notEmpty____d17;
  tUInt8 DEF_addrResponse_responseFifo_fifo_i_notEmpty____d18;
  tUInt8 DEF_configResp_responseFifo_fifo_notEmpty____d5;
  tUInt8 DEF_configResp_responseFifo_fifo_i_notEmpty____d6;
  tUInt32 DEF__read__h824;
  tUInt32 DEF__read__h660;
  tUInt32 DEF__read__h501;
  tUInt32 DEF__read__h337;
  tUInt32 DEF__read__h178;
  tUInt8 DEF_dmaError_responseFifo_count_9_EQ_5___d55;
  tUInt8 DEF_reportMemoryTraffic_responseFifo_count_7_EQ_1___d43;
  tUInt8 DEF_reportStateDbg_responseFifo_count_5_EQ_3___d31;
  tUInt8 DEF_configResp_responseFifo_count_EQ_0___d7;
  tUInt8 DEF_addrResponse_responseFifo_count_3_EQ_1___d19;
 
 /* Local definitions */
 private:
  tUWide DEF_x_first__h772;
  tUWide DEF_x_first__h449;
  tUWide DEF_x__h1509;
  tUWide DEF_x__h1259;
  tUWide DEF_x__h2325;
  tUWide DEF_ifc_dmaError_offset_CONCAT_ifc_dmaError_extra___d60;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUInt32 METH_portalIfc_ifcType();
  tUInt8 METH_RDY_portalIfc_ifcType();
  tUInt8 METH_portalIfc_requestSizeBits();
  tUInt8 METH_RDY_portalIfc_requestSizeBits();
  tUWide METH_portalIfc_indicationSizeBits();
  tUInt8 METH_RDY_portalIfc_indicationSizeBits();
  tUInt32 METH_portalIfc_ifcId();
  tUInt8 METH_RDY_portalIfc_ifcId();
  tUInt32 METH_portalIfc_indications_0_first();
  tUInt8 METH_RDY_portalIfc_indications_0_first();
  void METH_portalIfc_indications_0_deq();
  tUInt8 METH_RDY_portalIfc_indications_0_deq();
  tUInt8 METH_portalIfc_indications_0_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_0_notEmpty();
  tUInt32 METH_portalIfc_indications_1_first();
  tUInt8 METH_RDY_portalIfc_indications_1_first();
  void METH_portalIfc_indications_1_deq();
  tUInt8 METH_RDY_portalIfc_indications_1_deq();
  tUInt8 METH_portalIfc_indications_1_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_1_notEmpty();
  tUInt32 METH_portalIfc_indications_2_first();
  tUInt8 METH_RDY_portalIfc_indications_2_first();
  void METH_portalIfc_indications_2_deq();
  tUInt8 METH_RDY_portalIfc_indications_2_deq();
  tUInt8 METH_portalIfc_indications_2_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_2_notEmpty();
  tUInt32 METH_portalIfc_indications_3_first();
  tUInt8 METH_RDY_portalIfc_indications_3_first();
  void METH_portalIfc_indications_3_deq();
  tUInt8 METH_RDY_portalIfc_indications_3_deq();
  tUInt8 METH_portalIfc_indications_3_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_3_notEmpty();
  tUInt32 METH_portalIfc_indications_4_first();
  tUInt8 METH_RDY_portalIfc_indications_4_first();
  void METH_portalIfc_indications_4_deq();
  tUInt8 METH_RDY_portalIfc_indications_4_deq();
  tUInt8 METH_portalIfc_indications_4_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_4_notEmpty();
  void METH_ifc_configResp(tUInt32 ARG_ifc_configResp_pointer);
  tUInt8 METH_RDY_ifc_configResp();
  void METH_ifc_addrResponse(tUInt64 ARG_ifc_addrResponse_physAddr);
  tUInt8 METH_RDY_ifc_addrResponse();
  void METH_ifc_reportStateDbg(tUWide ARG_ifc_reportStateDbg_rec);
  tUInt8 METH_RDY_ifc_reportStateDbg();
  void METH_ifc_reportMemoryTraffic(tUInt64 ARG_ifc_reportMemoryTraffic_words);
  tUInt8 METH_RDY_ifc_reportMemoryTraffic();
  void METH_ifc_dmaError(tUInt32 ARG_ifc_dmaError_code,
			 tUInt32 ARG_ifc_dmaError_pointer,
			 tUInt64 ARG_ifc_dmaError_offset,
			 tUInt64 ARG_ifc_dmaError_extra);
  tUInt8 METH_RDY_ifc_dmaError();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDmaIndicationProxyPortalSynth &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDmaIndicationProxyPortalSynth &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDmaIndicationProxyPortalSynth &backing);
};

#endif /* ifndef __mkDmaIndicationProxyPortalSynth_h__ */
