/*
 * Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
 * 
 * On Tue Sep  9 02:31:39 EDT 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkAuroraIntra.h"


/* Literal declarations */
static unsigned int const UWide_literal_120_h0_arr[] = { 0u, 0u, 0u, 0u };
static tUWide const UWide_literal_120_h0(120u, UWide_literal_120_h0_arr);
static unsigned int const UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
										      2863311530u,
										      2863311530u,
										      11184810u };
static tUWide const UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(121u,
								      UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);


/* Constructor */
MOD_mkAuroraIntra::MOD_mkAuroraIntra(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    __clk_handle_1(BAD_CLOCK_HANDLE),
    __clk_handle_2(BAD_CLOCK_HANDLE),
    __clk_handle_3(BAD_CLOCK_HANDLE),
    INST_auroraIntraImport_mirrorQ(simHdl, "auroraIntraImport_mirrorQ", this, 128u, 2u, 1u, 0u),
    INST_curRecvOffset(simHdl, "curRecvOffset", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_packetRecvBuffer(simHdl,
			  "packetRecvBuffer",
			  this,
			  121u,
			  bs_wide_tmp(121u).set_bits_in_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_bits_in_word32(3u,
																  0u,
																  25u),
							     3u,
							     0u,
							     25u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(2u),
										 2u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(1u),
												    1u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(0u),
														       0u),
			  (tUInt8)0u),
    INST_packetSendBuffer(simHdl,
			  "packetSendBuffer",
			  this,
			  121u,
			  bs_wide_tmp(121u).set_bits_in_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_bits_in_word32(3u,
																  0u,
																  25u),
							     3u,
							     0u,
							     25u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(2u),
										 2u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(1u),
												    1u).set_whole_word(UWide_literal_121_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.get_whole_word(0u),
														       0u),
			  (tUInt8)0u),
    INST_recvQ(simHdl, "recvQ", this, 240u, 16u, 0u),
    INST_sendQ(simHdl, "sendQ", this, 240u, 16u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_auroraIntraImport_mirrorQ_first____d24(128u),
    DEF_packetRecvBuffer___d21(121u),
    DEF_packetSendBuffer___d2(121u),
    DEF_sendQ_first____d12(240u),
    DEF_sendQ_first__2_BITS_239_TO_120___d17(120u),
    DEF_data_BITS_119_TO_0___h665(120u),
    DEF_cdata__h895(120u),
    DEF_packetRecvBuffer_1_BITS_119_TO_0___d40(120u),
    DEF_packetSendBuffer_BITS_119_TO_0___d9(120u),
    DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15(128u),
    DEF_data__h522(128u),
    DEF_data__h659(128u),
    DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36(120u),
    DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37(120u),
    DEF_pdata__h935(120u),
    DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18(120u),
    DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10(120u),
    DEF_x1__h1025(240u),
    DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19(121u),
    DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38(121u),
    DEF_receive__avValue1(240u)
{
  PORT_send_data.setSize(240u);
  PORT_send_data.clear();
  PORT_TXP = 0u;
  PORT_TXN = 0u;
  PORT_receive.setSize(240u);
  PORT_receive.clear();
  PORT_RDY_rxn_in = false;
  PORT_RDY_rxp_in = false;
  PORT_RDY_txn_out = false;
  PORT_RDY_txp_out = false;
  reset_fn_rst = NULL;
  symbol_count = 17u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAuroraIntra::init_symbols_0()
{
  init_symbol(&symbols[0u], "auroraIntraImport_mirrorQ", SYM_MODULE, &INST_auroraIntraImport_mirrorQ);
  init_symbol(&symbols[1u], "curRecvOffset", SYM_MODULE, &INST_curRecvOffset);
  init_symbol(&symbols[2u], "header__h896", SYM_DEF, &DEF_header__h896, 8u);
  init_symbol(&symbols[3u], "packetRecvBuffer", SYM_MODULE, &INST_packetRecvBuffer);
  init_symbol(&symbols[4u], "packetSendBuffer", SYM_MODULE, &INST_packetSendBuffer);
  init_symbol(&symbols[5u], "RDY_rxn_in", SYM_PORT, &PORT_RDY_rxn_in, 1u);
  init_symbol(&symbols[6u], "RDY_rxp_in", SYM_PORT, &PORT_RDY_rxp_in, 1u);
  init_symbol(&symbols[7u], "RDY_txn_out", SYM_PORT, &PORT_RDY_txn_out, 1u);
  init_symbol(&symbols[8u], "RDY_txp_out", SYM_PORT, &PORT_RDY_txp_out, 1u);
  init_symbol(&symbols[9u], "RL_recvPacketPart", SYM_RULE);
  init_symbol(&symbols[10u], "RL_sendPacketPart", SYM_RULE);
  init_symbol(&symbols[11u], "receive", SYM_PORT, &PORT_receive, 240u);
  init_symbol(&symbols[12u], "recvQ", SYM_MODULE, &INST_recvQ);
  init_symbol(&symbols[13u], "send_data", SYM_PORT, &PORT_send_data, 240u);
  init_symbol(&symbols[14u], "sendQ", SYM_MODULE, &INST_sendQ);
  init_symbol(&symbols[15u], "TXN", SYM_PORT, &PORT_TXN, 4u);
  init_symbol(&symbols[16u], "TXP", SYM_PORT, &PORT_TXP, 4u);
}


/* Rule actions */

void MOD_mkAuroraIntra::RL_sendPacketPart()
{
  tUInt8 DEF_NOT_packetSendBuffer_BIT_120___d16;
  DEF_sendQ_first____d12 = INST_sendQ.METH_first();
  DEF_packetSendBuffer___d2 = INST_packetSendBuffer.METH_read();
  wop_primExtractWide(120u,
		      240u,
		      DEF_sendQ_first____d12,
		      32u,
		      239u,
		      32u,
		      120u,
		      DEF_sendQ_first__2_BITS_239_TO_120___d17);
  wop_primExtractWide(120u,
		      240u,
		      DEF_sendQ_first____d12,
		      32u,
		      119u,
		      32u,
		      0u,
		      DEF_data_BITS_119_TO_0___h665);
  wop_primExtractWide(120u,
		      121u,
		      DEF_packetSendBuffer___d2,
		      32u,
		      119u,
		      32u,
		      0u,
		      DEF_packetSendBuffer_BITS_119_TO_0___d9);
  DEF_packetSendBuffer_BIT_120___d3 = DEF_packetSendBuffer___d2.get_bits_in_word8(3u, 24u, 1u);
  DEF_data__h659.set_whole_word((((tUInt32)((tUInt8)0u)) << 24u) | DEF_data_BITS_119_TO_0___h665.get_bits_in_word32(3u,
														    0u,
														    24u),
				3u).set_whole_word(DEF_data_BITS_119_TO_0___h665.get_whole_word(2u),
						   2u).set_whole_word(DEF_data_BITS_119_TO_0___h665.get_whole_word(1u),
								      1u).set_whole_word(DEF_data_BITS_119_TO_0___h665.get_whole_word(0u),
											 0u);
  DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18 = DEF_packetSendBuffer_BIT_120___d3 ? DEF_sendQ_first__2_BITS_239_TO_120___d17 : DEF_sendQ_first__2_BITS_239_TO_120___d17;
  DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10 = DEF_packetSendBuffer_BIT_120___d3 ? DEF_packetSendBuffer_BITS_119_TO_0___d9 : UWide_literal_120_h0;
  DEF_data__h522.set_whole_word((((tUInt32)((tUInt8)1u)) << 24u) | DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10.get_bits_in_word32(3u,
																		   0u,
																		   24u),
				3u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10.get_whole_word(2u),
						   2u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10.get_whole_word(1u),
								      1u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10.get_whole_word(0u),
											 0u);
  DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15 = DEF_packetSendBuffer_BIT_120___d3 ? DEF_data__h522 : DEF_data__h659;
  DEF_NOT_packetSendBuffer_BIT_120___d16 = !DEF_packetSendBuffer_BIT_120___d3;
  DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19.set_bits_in_word(33554431u & ((((tUInt32)(DEF_NOT_packetSendBuffer_BIT_120___d16)) << 24u) | DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18.get_bits_in_word32(3u,
																													    0u,
																													    24u)),
										3u,
										0u,
										25u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18.get_whole_word(2u),
												    2u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18.get_whole_word(1u),
														       1u).set_whole_word(DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18.get_whole_word(0u),
																	  0u);
  INST_auroraIntraImport_mirrorQ.METH_enq(DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15);
  INST_packetSendBuffer.METH_write(DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19);
  if (DEF_NOT_packetSendBuffer_BIT_120___d16)
    INST_sendQ.METH_deq();
}

void MOD_mkAuroraIntra::RL_recvPacketPart()
{
  tUInt8 DEF_packetRecvBuffer_1_BIT_120_2_AND_auroraIntraIm_ETC___d39;
  tUInt8 DEF_packetRecvBuffer_1_BIT_120_2_OR_auroraIntraImp_ETC___d33;
  DEF_auroraIntraImport_mirrorQ_first____d24 = INST_auroraIntraImport_mirrorQ.METH_first();
  DEF_header__h896 = DEF_auroraIntraImport_mirrorQ_first____d24.get_bits_in_word8(3u, 24u, 8u);
  DEF_packetRecvBuffer___d21 = INST_packetRecvBuffer.METH_read();
  DEF_packetRecvBuffer_1_BIT_120___d22 = DEF_packetRecvBuffer___d21.get_bits_in_word8(3u, 24u, 1u);
  DEF_packetRecvBuffer_1_BIT_120_2_OR_auroraIntraImp_ETC___d33 = DEF_packetRecvBuffer_1_BIT_120___d22 || DEF_header__h896 == (tUInt8)0u;
  wop_primExtractWide(120u,
		      128u,
		      DEF_auroraIntraImport_mirrorQ_first____d24,
		      32u,
		      119u,
		      32u,
		      0u,
		      DEF_cdata__h895);
  wop_primExtractWide(120u,
		      121u,
		      DEF_packetRecvBuffer___d21,
		      32u,
		      119u,
		      32u,
		      0u,
		      DEF_packetRecvBuffer_1_BITS_119_TO_0___d40);
  DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26 = DEF_header__h896 == (tUInt8)1u;
  DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36 = DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26 ? DEF_cdata__h895 : DEF_cdata__h895;
  DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37 = DEF_packetRecvBuffer_1_BIT_120___d22 ? DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36 : DEF_cdata__h895;
  DEF_pdata__h935 = DEF_packetRecvBuffer_1_BIT_120___d22 ? DEF_packetRecvBuffer_1_BITS_119_TO_0___d40 : UWide_literal_120_h0;
  DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27 = !DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26;
  DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23 = !DEF_packetRecvBuffer_1_BIT_120___d22;
  DEF_packetRecvBuffer_1_BIT_120_2_AND_auroraIntraIm_ETC___d39 = DEF_packetRecvBuffer_1_BIT_120___d22 && DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26;
  DEF_x1__h1025.set_bits_in_word(DEF_cdata__h895.get_bits_in_word32(3u, 8u, 16u),
				 7u,
				 0u,
				 16u).set_whole_word(primExtract32(32u, 120u, DEF_cdata__h895, 32u, 103u, 32u, 72u),
						     6u).set_whole_word(primExtract32(32u,
										      120u,
										      DEF_cdata__h895,
										      32u,
										      71u,
										      32u,
										      40u),
									5u).set_whole_word(primExtract32(32u,
													 120u,
													 DEF_cdata__h895,
													 32u,
													 39u,
													 32u,
													 8u),
											   4u).set_whole_word((((tUInt32)(DEF_cdata__h895.get_bits_in_word8(0u,
																			    0u,
																			    8u))) << 24u) | DEF_pdata__h935.get_bits_in_word32(3u,
																									       0u,
																									       24u),
													      3u).set_whole_word(DEF_pdata__h935.get_whole_word(2u),
																 2u).set_whole_word(DEF_pdata__h935.get_whole_word(1u),
																		    1u).set_whole_word(DEF_pdata__h935.get_whole_word(0u),
																				       0u);
  DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38.set_bits_in_word(33554431u & ((((tUInt32)(DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23 || DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27)) << 24u) | DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37.get_bits_in_word32(3u,
																																						0u,
																																						24u)),
										3u,
										0u,
										25u).set_whole_word(DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37.get_whole_word(2u),
												    2u).set_whole_word(DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37.get_whole_word(1u),
														       1u).set_whole_word(DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37.get_whole_word(0u),
																	  0u);
  INST_auroraIntraImport_mirrorQ.METH_deq();
  if (DEF_packetRecvBuffer_1_BIT_120_2_OR_auroraIntraImp_ETC___d33)
    INST_packetRecvBuffer.METH_write(DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38);
  if (DEF_packetRecvBuffer_1_BIT_120_2_AND_auroraIntraIm_ETC___d39)
    INST_recvQ.METH_enq(DEF_x1__h1025);
}


/* Methods */

tUInt8 MOD_mkAuroraIntra::METH_channel_up()
{
  tUInt8 PORT_channel_up;
  PORT_channel_up = (tUInt8)0u;
  return PORT_channel_up;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_channel_up()
{
  tUInt8 PORT_RDY_channel_up;
  tUInt8 DEF_CAN_FIRE_channel_up;
  DEF_CAN_FIRE_channel_up = (tUInt8)1u;
  PORT_RDY_channel_up = DEF_CAN_FIRE_channel_up;
  return PORT_RDY_channel_up;
}

tUInt8 MOD_mkAuroraIntra::METH_lane_up()
{
  tUInt8 PORT_lane_up;
  PORT_lane_up = (tUInt8)0u;
  return PORT_lane_up;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_lane_up()
{
  tUInt8 PORT_RDY_lane_up;
  tUInt8 DEF_CAN_FIRE_lane_up;
  DEF_CAN_FIRE_lane_up = (tUInt8)1u;
  PORT_RDY_lane_up = DEF_CAN_FIRE_lane_up;
  return PORT_RDY_lane_up;
}

tUInt8 MOD_mkAuroraIntra::METH_hard_err()
{
  tUInt8 PORT_hard_err;
  PORT_hard_err = (tUInt8)0u;
  return PORT_hard_err;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_hard_err()
{
  tUInt8 PORT_RDY_hard_err;
  tUInt8 DEF_CAN_FIRE_hard_err;
  DEF_CAN_FIRE_hard_err = (tUInt8)1u;
  PORT_RDY_hard_err = DEF_CAN_FIRE_hard_err;
  return PORT_RDY_hard_err;
}

tUInt8 MOD_mkAuroraIntra::METH_soft_err()
{
  tUInt8 PORT_soft_err;
  PORT_soft_err = (tUInt8)0u;
  return PORT_soft_err;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_soft_err()
{
  tUInt8 PORT_RDY_soft_err;
  tUInt8 DEF_CAN_FIRE_soft_err;
  DEF_CAN_FIRE_soft_err = (tUInt8)1u;
  PORT_RDY_soft_err = DEF_CAN_FIRE_soft_err;
  return PORT_RDY_soft_err;
}

tUInt8 MOD_mkAuroraIntra::METH_data_err_count()
{
  tUInt8 PORT_data_err_count;
  PORT_data_err_count = (tUInt8)0u;
  return PORT_data_err_count;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_data_err_count()
{
  tUInt8 PORT_RDY_data_err_count;
  tUInt8 DEF_CAN_FIRE_data_err_count;
  DEF_CAN_FIRE_data_err_count = (tUInt8)1u;
  PORT_RDY_data_err_count = DEF_CAN_FIRE_data_err_count;
  return PORT_RDY_data_err_count;
}

tUInt8 MOD_mkAuroraIntra::METH_aurora_txn_out()
{
  PORT_TXN = (tUInt8)10u;
  return PORT_TXN;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_aurora_txn_out()
{
  tUInt8 DEF_CAN_FIRE_aurora_txn_out;
  DEF_CAN_FIRE_aurora_txn_out = (tUInt8)1u;
  PORT_RDY_txn_out = DEF_CAN_FIRE_aurora_txn_out;
  return PORT_RDY_txn_out;
}

tUInt8 MOD_mkAuroraIntra::METH_aurora_txp_out()
{
  PORT_TXP = (tUInt8)10u;
  return PORT_TXP;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_aurora_txp_out()
{
  tUInt8 DEF_CAN_FIRE_aurora_txp_out;
  DEF_CAN_FIRE_aurora_txp_out = (tUInt8)1u;
  PORT_RDY_txp_out = DEF_CAN_FIRE_aurora_txp_out;
  return PORT_RDY_txp_out;
}

void MOD_mkAuroraIntra::METH_send(tUWide ARG_send_data)
{
  PORT_send_data = ARG_send_data;
  INST_sendQ.METH_enq(ARG_send_data);
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_send()
{
  tUInt8 PORT_RDY_send;
  tUInt8 DEF_CAN_FIRE_send;
  DEF_CAN_FIRE_send = INST_sendQ.METH_RDY_enq();
  PORT_RDY_send = DEF_CAN_FIRE_send;
  return PORT_RDY_send;
}

tUWide MOD_mkAuroraIntra::METH_receive()
{
  DEF_receive__avValue1 = INST_recvQ.METH_first();
  PORT_receive = DEF_receive__avValue1;
  INST_recvQ.METH_deq();
  return PORT_receive;
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_receive()
{
  tUInt8 PORT_RDY_receive;
  tUInt8 DEF_CAN_FIRE_receive;
  DEF_CAN_FIRE_receive = INST_recvQ.METH_RDY_deq() && INST_recvQ.METH_RDY_first();
  PORT_RDY_receive = DEF_CAN_FIRE_receive;
  return PORT_RDY_receive;
}

void MOD_mkAuroraIntra::METH_aurora_rxn_in(tUInt8 ARG_rxn_i)
{
  if (PORT_RDY_rxn_in)
  {
  }
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_aurora_rxn_in()
{
  tUInt8 DEF_CAN_FIRE_aurora_rxn_in;
  DEF_CAN_FIRE_aurora_rxn_in = (tUInt8)1u;
  PORT_RDY_rxn_in = DEF_CAN_FIRE_aurora_rxn_in;
  return PORT_RDY_rxn_in;
}

void MOD_mkAuroraIntra::METH_aurora_rxp_in(tUInt8 ARG_rxp_i)
{
  if (PORT_RDY_rxp_in)
  {
  }
}

tUInt8 MOD_mkAuroraIntra::METH_RDY_aurora_rxp_in()
{
  tUInt8 DEF_CAN_FIRE_aurora_rxp_in;
  DEF_CAN_FIRE_aurora_rxp_in = (tUInt8)1u;
  PORT_RDY_rxp_in = DEF_CAN_FIRE_aurora_rxp_in;
  return PORT_RDY_rxp_in;
}


/* Reset routines */

void MOD_mkAuroraIntra::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_sendQ.reset_sRST(ARG_rst_in);
  INST_recvQ.reset_sRST(ARG_rst_in);
  INST_packetSendBuffer.reset_RST(ARG_rst_in);
  INST_packetRecvBuffer.reset_RST(ARG_rst_in);
  INST_curRecvOffset.reset_RST(ARG_rst_in);
  INST_auroraIntraImport_mirrorQ.reset_RST(ARG_rst_in);
  if (reset_fn_rst)
    reset_fn_rst(parent, ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */

void MOD_mkAuroraIntra::set_reset_fn_rst(tResetFn fn)
{
  reset_fn_rst = fn;
}


/* Functions to set the elaborated clock id */

void MOD_mkAuroraIntra::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}

void MOD_mkAuroraIntra::set_clk_1(char const *s)
{
  __clk_handle_1 = bk_get_or_define_clock(sim_hdl, s);
}

void MOD_mkAuroraIntra::set_clk_2(char const *s)
{
  __clk_handle_2 = bk_get_or_define_clock(sim_hdl, s);
}

void MOD_mkAuroraIntra::set_clk_3(char const *s)
{
  __clk_handle_3 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAuroraIntra::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_auroraIntraImport_mirrorQ.dump_state(indent + 2u);
  INST_curRecvOffset.dump_state(indent + 2u);
  INST_packetRecvBuffer.dump_state(indent + 2u);
  INST_packetSendBuffer.dump_state(indent + 2u);
  INST_recvQ.dump_state(indent + 2u);
  INST_sendQ.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAuroraIntra::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 42u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_1), "CLK_gtx_clk_p", 1u);
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_2), "CLK_gtx_clk_n", 1u);
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_3), "CLK_clk250", 1u);
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38", 121u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_packetRecvBuffer_1_BIT_120_2___d23", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19", 121u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "auroraIntraImport_mirrorQ_first____d24", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cdata__h895", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "data_BITS_119_TO_0___h665", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "data__h522", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "data__h659", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "header__h896", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetRecvBuffer_1_BITS_119_TO_0___d40", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetRecvBuffer_1_BIT_120___d22", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetRecvBuffer___d21", 121u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetSendBuffer_BITS_119_TO_0___d9", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetSendBuffer_BIT_120___d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "packetSendBuffer___d2", 121u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pdata__h935", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "receive__avValue1", 240u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sendQ_first__2_BITS_239_TO_120___d17", 120u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sendQ_first____d12", 240u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x1__h1025", 240u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_rxn_in", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_rxp_in", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_txn_out", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_txp_out", 1u);
  vcd_write_def(sim_hdl, num++, "TXN", 4u);
  vcd_write_def(sim_hdl, num++, "TXP", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "receive", 240u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "send_data", 240u);
  num = INST_auroraIntraImport_mirrorQ.dump_VCD_defs(num);
  num = INST_curRecvOffset.dump_VCD_defs(num);
  num = INST_packetRecvBuffer.dump_VCD_defs(num);
  num = INST_packetSendBuffer.dump_VCD_defs(num);
  num = INST_recvQ.dump_VCD_defs(num);
  num = INST_sendQ.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAuroraIntra::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAuroraIntra &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAuroraIntra::vcd_defs(tVCDDumpType dt, MOD_mkAuroraIntra &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 121u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 121u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 121u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 121u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 240u);
    vcd_write_x(sim_hdl, num++, 120u);
    vcd_write_x(sim_hdl, num++, 240u);
    vcd_write_x(sim_hdl, num++, 240u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 240u);
    vcd_write_x(sim_hdl, num++, 240u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36) != DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36, 120u);
	backing.DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36 = DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36;
      }
      ++num;
      if ((backing.DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37) != DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37, 120u);
	backing.DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37 = DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37;
      }
      ++num;
      if ((backing.DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15) != DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15, 128u);
	backing.DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15 = DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15;
      }
      ++num;
      if ((backing.DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18) != DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18, 120u);
	backing.DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18 = DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18;
      }
      ++num;
      if ((backing.DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10) != DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10, 120u);
	backing.DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10 = DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10;
      }
      ++num;
      if ((backing.DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27) != DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27, 1u);
	backing.DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27 = DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27;
      }
      ++num;
      if ((backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38) != DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38, 121u);
	backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38 = DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38;
      }
      ++num;
      if ((backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23) != DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23, 1u);
	backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23 = DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23;
      }
      ++num;
      if ((backing.DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19) != DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19, 121u);
	backing.DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19 = DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26) != DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26)
      {
	vcd_write_val(sim_hdl, num, DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26, 1u);
	backing.DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26 = DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26;
      }
      ++num;
      if ((backing.DEF_auroraIntraImport_mirrorQ_first____d24) != DEF_auroraIntraImport_mirrorQ_first____d24)
      {
	vcd_write_val(sim_hdl, num, DEF_auroraIntraImport_mirrorQ_first____d24, 128u);
	backing.DEF_auroraIntraImport_mirrorQ_first____d24 = DEF_auroraIntraImport_mirrorQ_first____d24;
      }
      ++num;
      if ((backing.DEF_cdata__h895) != DEF_cdata__h895)
      {
	vcd_write_val(sim_hdl, num, DEF_cdata__h895, 120u);
	backing.DEF_cdata__h895 = DEF_cdata__h895;
      }
      ++num;
      if ((backing.DEF_data_BITS_119_TO_0___h665) != DEF_data_BITS_119_TO_0___h665)
      {
	vcd_write_val(sim_hdl, num, DEF_data_BITS_119_TO_0___h665, 120u);
	backing.DEF_data_BITS_119_TO_0___h665 = DEF_data_BITS_119_TO_0___h665;
      }
      ++num;
      if ((backing.DEF_data__h522) != DEF_data__h522)
      {
	vcd_write_val(sim_hdl, num, DEF_data__h522, 128u);
	backing.DEF_data__h522 = DEF_data__h522;
      }
      ++num;
      if ((backing.DEF_data__h659) != DEF_data__h659)
      {
	vcd_write_val(sim_hdl, num, DEF_data__h659, 128u);
	backing.DEF_data__h659 = DEF_data__h659;
      }
      ++num;
      if ((backing.DEF_header__h896) != DEF_header__h896)
      {
	vcd_write_val(sim_hdl, num, DEF_header__h896, 8u);
	backing.DEF_header__h896 = DEF_header__h896;
      }
      ++num;
      if ((backing.DEF_packetRecvBuffer_1_BITS_119_TO_0___d40) != DEF_packetRecvBuffer_1_BITS_119_TO_0___d40)
      {
	vcd_write_val(sim_hdl, num, DEF_packetRecvBuffer_1_BITS_119_TO_0___d40, 120u);
	backing.DEF_packetRecvBuffer_1_BITS_119_TO_0___d40 = DEF_packetRecvBuffer_1_BITS_119_TO_0___d40;
      }
      ++num;
      if ((backing.DEF_packetRecvBuffer_1_BIT_120___d22) != DEF_packetRecvBuffer_1_BIT_120___d22)
      {
	vcd_write_val(sim_hdl, num, DEF_packetRecvBuffer_1_BIT_120___d22, 1u);
	backing.DEF_packetRecvBuffer_1_BIT_120___d22 = DEF_packetRecvBuffer_1_BIT_120___d22;
      }
      ++num;
      if ((backing.DEF_packetRecvBuffer___d21) != DEF_packetRecvBuffer___d21)
      {
	vcd_write_val(sim_hdl, num, DEF_packetRecvBuffer___d21, 121u);
	backing.DEF_packetRecvBuffer___d21 = DEF_packetRecvBuffer___d21;
      }
      ++num;
      if ((backing.DEF_packetSendBuffer_BITS_119_TO_0___d9) != DEF_packetSendBuffer_BITS_119_TO_0___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_packetSendBuffer_BITS_119_TO_0___d9, 120u);
	backing.DEF_packetSendBuffer_BITS_119_TO_0___d9 = DEF_packetSendBuffer_BITS_119_TO_0___d9;
      }
      ++num;
      if ((backing.DEF_packetSendBuffer_BIT_120___d3) != DEF_packetSendBuffer_BIT_120___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_packetSendBuffer_BIT_120___d3, 1u);
	backing.DEF_packetSendBuffer_BIT_120___d3 = DEF_packetSendBuffer_BIT_120___d3;
      }
      ++num;
      if ((backing.DEF_packetSendBuffer___d2) != DEF_packetSendBuffer___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_packetSendBuffer___d2, 121u);
	backing.DEF_packetSendBuffer___d2 = DEF_packetSendBuffer___d2;
      }
      ++num;
      if ((backing.DEF_pdata__h935) != DEF_pdata__h935)
      {
	vcd_write_val(sim_hdl, num, DEF_pdata__h935, 120u);
	backing.DEF_pdata__h935 = DEF_pdata__h935;
      }
      ++num;
      if ((backing.DEF_receive__avValue1) != DEF_receive__avValue1)
      {
	vcd_write_val(sim_hdl, num, DEF_receive__avValue1, 240u);
	backing.DEF_receive__avValue1 = DEF_receive__avValue1;
      }
      ++num;
      if ((backing.DEF_sendQ_first__2_BITS_239_TO_120___d17) != DEF_sendQ_first__2_BITS_239_TO_120___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_sendQ_first__2_BITS_239_TO_120___d17, 120u);
	backing.DEF_sendQ_first__2_BITS_239_TO_120___d17 = DEF_sendQ_first__2_BITS_239_TO_120___d17;
      }
      ++num;
      if ((backing.DEF_sendQ_first____d12) != DEF_sendQ_first____d12)
      {
	vcd_write_val(sim_hdl, num, DEF_sendQ_first____d12, 240u);
	backing.DEF_sendQ_first____d12 = DEF_sendQ_first____d12;
      }
      ++num;
      if ((backing.DEF_x1__h1025) != DEF_x1__h1025)
      {
	vcd_write_val(sim_hdl, num, DEF_x1__h1025, 240u);
	backing.DEF_x1__h1025 = DEF_x1__h1025;
      }
      ++num;
      if ((backing.PORT_RDY_rxn_in) != PORT_RDY_rxn_in)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_rxn_in, 1u);
	backing.PORT_RDY_rxn_in = PORT_RDY_rxn_in;
      }
      ++num;
      if ((backing.PORT_RDY_rxp_in) != PORT_RDY_rxp_in)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_rxp_in, 1u);
	backing.PORT_RDY_rxp_in = PORT_RDY_rxp_in;
      }
      ++num;
      if ((backing.PORT_RDY_txn_out) != PORT_RDY_txn_out)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_txn_out, 1u);
	backing.PORT_RDY_txn_out = PORT_RDY_txn_out;
      }
      ++num;
      if ((backing.PORT_RDY_txp_out) != PORT_RDY_txp_out)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_txp_out, 1u);
	backing.PORT_RDY_txp_out = PORT_RDY_txp_out;
      }
      ++num;
      if ((backing.PORT_TXN) != PORT_TXN)
      {
	vcd_write_val(sim_hdl, num, PORT_TXN, 4u);
	backing.PORT_TXN = PORT_TXN;
      }
      ++num;
      if ((backing.PORT_TXP) != PORT_TXP)
      {
	vcd_write_val(sim_hdl, num, PORT_TXP, 4u);
	backing.PORT_TXP = PORT_TXP;
      }
      ++num;
      if ((backing.PORT_receive) != PORT_receive)
      {
	vcd_write_val(sim_hdl, num, PORT_receive, 240u);
	backing.PORT_receive = PORT_receive;
      }
      ++num;
      if ((backing.PORT_send_data) != PORT_send_data)
      {
	vcd_write_val(sim_hdl, num, PORT_send_data, 240u);
	backing.PORT_send_data = PORT_send_data;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36, 120u);
      backing.DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36 = DEF_IF_auroraIntraImport_mirrorQ_first__4_BITS_127_ETC___d36;
      vcd_write_val(sim_hdl, num++, DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37, 120u);
      backing.DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37 = DEF_IF_packetRecvBuffer_1_BIT_120_2_THEN_IF_aurora_ETC___d37;
      vcd_write_val(sim_hdl, num++, DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15, 128u);
      backing.DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15 = DEF_IF_packetSendBuffer_BIT_120_THEN_0x1_CONCAT_IF_ETC___d15;
      vcd_write_val(sim_hdl, num++, DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18, 120u);
      backing.DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18 = DEF_IF_packetSendBuffer_BIT_120_THEN_DONTCARE_ELSE_ETC___d18;
      vcd_write_val(sim_hdl, num++, DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10, 120u);
      backing.DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10 = DEF_IF_packetSendBuffer_BIT_120_THEN_packetSendBuf_ETC___d10;
      vcd_write_val(sim_hdl, num++, DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27, 1u);
      backing.DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27 = DEF_NOT_auroraIntraImport_mirrorQ_first__4_BITS_12_ETC___d27;
      vcd_write_val(sim_hdl, num++, DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38, 121u);
      backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38 = DEF_NOT_packetRecvBuffer_1_BIT_120_2_3_OR_NOT_auro_ETC___d38;
      vcd_write_val(sim_hdl, num++, DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23, 1u);
      backing.DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23 = DEF_NOT_packetRecvBuffer_1_BIT_120_2___d23;
      vcd_write_val(sim_hdl, num++, DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19, 121u);
      backing.DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19 = DEF_NOT_packetSendBuffer_BIT_120_6_CONCAT_IF_packe_ETC___d19;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26, 1u);
      backing.DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26 = DEF_auroraIntraImport_mirrorQ_first__4_BITS_127_TO_ETC___d26;
      vcd_write_val(sim_hdl, num++, DEF_auroraIntraImport_mirrorQ_first____d24, 128u);
      backing.DEF_auroraIntraImport_mirrorQ_first____d24 = DEF_auroraIntraImport_mirrorQ_first____d24;
      vcd_write_val(sim_hdl, num++, DEF_cdata__h895, 120u);
      backing.DEF_cdata__h895 = DEF_cdata__h895;
      vcd_write_val(sim_hdl, num++, DEF_data_BITS_119_TO_0___h665, 120u);
      backing.DEF_data_BITS_119_TO_0___h665 = DEF_data_BITS_119_TO_0___h665;
      vcd_write_val(sim_hdl, num++, DEF_data__h522, 128u);
      backing.DEF_data__h522 = DEF_data__h522;
      vcd_write_val(sim_hdl, num++, DEF_data__h659, 128u);
      backing.DEF_data__h659 = DEF_data__h659;
      vcd_write_val(sim_hdl, num++, DEF_header__h896, 8u);
      backing.DEF_header__h896 = DEF_header__h896;
      vcd_write_val(sim_hdl, num++, DEF_packetRecvBuffer_1_BITS_119_TO_0___d40, 120u);
      backing.DEF_packetRecvBuffer_1_BITS_119_TO_0___d40 = DEF_packetRecvBuffer_1_BITS_119_TO_0___d40;
      vcd_write_val(sim_hdl, num++, DEF_packetRecvBuffer_1_BIT_120___d22, 1u);
      backing.DEF_packetRecvBuffer_1_BIT_120___d22 = DEF_packetRecvBuffer_1_BIT_120___d22;
      vcd_write_val(sim_hdl, num++, DEF_packetRecvBuffer___d21, 121u);
      backing.DEF_packetRecvBuffer___d21 = DEF_packetRecvBuffer___d21;
      vcd_write_val(sim_hdl, num++, DEF_packetSendBuffer_BITS_119_TO_0___d9, 120u);
      backing.DEF_packetSendBuffer_BITS_119_TO_0___d9 = DEF_packetSendBuffer_BITS_119_TO_0___d9;
      vcd_write_val(sim_hdl, num++, DEF_packetSendBuffer_BIT_120___d3, 1u);
      backing.DEF_packetSendBuffer_BIT_120___d3 = DEF_packetSendBuffer_BIT_120___d3;
      vcd_write_val(sim_hdl, num++, DEF_packetSendBuffer___d2, 121u);
      backing.DEF_packetSendBuffer___d2 = DEF_packetSendBuffer___d2;
      vcd_write_val(sim_hdl, num++, DEF_pdata__h935, 120u);
      backing.DEF_pdata__h935 = DEF_pdata__h935;
      vcd_write_val(sim_hdl, num++, DEF_receive__avValue1, 240u);
      backing.DEF_receive__avValue1 = DEF_receive__avValue1;
      vcd_write_val(sim_hdl, num++, DEF_sendQ_first__2_BITS_239_TO_120___d17, 120u);
      backing.DEF_sendQ_first__2_BITS_239_TO_120___d17 = DEF_sendQ_first__2_BITS_239_TO_120___d17;
      vcd_write_val(sim_hdl, num++, DEF_sendQ_first____d12, 240u);
      backing.DEF_sendQ_first____d12 = DEF_sendQ_first____d12;
      vcd_write_val(sim_hdl, num++, DEF_x1__h1025, 240u);
      backing.DEF_x1__h1025 = DEF_x1__h1025;
      vcd_write_val(sim_hdl, num++, PORT_RDY_rxn_in, 1u);
      backing.PORT_RDY_rxn_in = PORT_RDY_rxn_in;
      vcd_write_val(sim_hdl, num++, PORT_RDY_rxp_in, 1u);
      backing.PORT_RDY_rxp_in = PORT_RDY_rxp_in;
      vcd_write_val(sim_hdl, num++, PORT_RDY_txn_out, 1u);
      backing.PORT_RDY_txn_out = PORT_RDY_txn_out;
      vcd_write_val(sim_hdl, num++, PORT_RDY_txp_out, 1u);
      backing.PORT_RDY_txp_out = PORT_RDY_txp_out;
      vcd_write_val(sim_hdl, num++, PORT_TXN, 4u);
      backing.PORT_TXN = PORT_TXN;
      vcd_write_val(sim_hdl, num++, PORT_TXP, 4u);
      backing.PORT_TXP = PORT_TXP;
      vcd_write_val(sim_hdl, num++, PORT_receive, 240u);
      backing.PORT_receive = PORT_receive;
      vcd_write_val(sim_hdl, num++, PORT_send_data, 240u);
      backing.PORT_send_data = PORT_send_data;
    }
}

void MOD_mkAuroraIntra::vcd_prims(tVCDDumpType dt, MOD_mkAuroraIntra &backing)
{
  INST_auroraIntraImport_mirrorQ.dump_VCD(dt, backing.INST_auroraIntraImport_mirrorQ);
  INST_curRecvOffset.dump_VCD(dt, backing.INST_curRecvOffset);
  INST_packetRecvBuffer.dump_VCD(dt, backing.INST_packetRecvBuffer);
  INST_packetSendBuffer.dump_VCD(dt, backing.INST_packetSendBuffer);
  INST_recvQ.dump_VCD(dt, backing.INST_recvQ);
  INST_sendQ.dump_VCD(dt, backing.INST_sendQ);
}
