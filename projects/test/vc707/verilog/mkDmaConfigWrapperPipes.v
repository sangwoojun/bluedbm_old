//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:14:11 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// RDY_inputPipes_0_enq           O     1
// inputPipes_0_notFull           O     1 reg
// RDY_inputPipes_0_notFull       O     1 const
// RDY_inputPipes_1_enq           O     1
// inputPipes_1_notFull           O     1 reg
// RDY_inputPipes_1_notFull       O     1 const
// RDY_inputPipes_2_enq           O     1
// inputPipes_2_notFull           O     1 reg
// RDY_inputPipes_2_notFull       O     1 const
// RDY_inputPipes_3_enq           O     1 reg
// inputPipes_3_notFull           O     1 reg
// RDY_inputPipes_3_notFull       O     1 const
// RDY_inputPipes_4_enq           O     1 reg
// inputPipes_4_notFull           O     1 reg
// RDY_inputPipes_4_notFull       O     1 const
// requestSizeBits                O   160 const
// RDY_requestSizeBits            O     1 const
// sglist_PipeOut_first           O   160 reg
// RDY_sglist_PipeOut_first       O     1 reg
// RDY_sglist_PipeOut_deq         O     1 reg
// sglist_PipeOut_notEmpty        O     1 reg
// RDY_sglist_PipeOut_notEmpty    O     1 const
// region_PipeOut_first           O   320 reg
// RDY_region_PipeOut_first       O     1 reg
// RDY_region_PipeOut_deq         O     1 reg
// region_PipeOut_notEmpty        O     1 reg
// RDY_region_PipeOut_notEmpty    O     1 const
// addrRequest_PipeOut_first      O    64 reg
// RDY_addrRequest_PipeOut_first  O     1 reg
// RDY_addrRequest_PipeOut_deq    O     1 reg
// addrRequest_PipeOut_notEmpty   O     1 reg
// RDY_addrRequest_PipeOut_notEmpty  O     1 const
// getStateDbg_PipeOut_first      O     1 reg
// RDY_getStateDbg_PipeOut_first  O     1 reg
// RDY_getStateDbg_PipeOut_deq    O     1 reg
// getStateDbg_PipeOut_notEmpty   O     1 reg
// RDY_getStateDbg_PipeOut_notEmpty  O     1 const
// getMemoryTraffic_PipeOut_first  O     1 reg
// RDY_getMemoryTraffic_PipeOut_first  O     1 reg
// RDY_getMemoryTraffic_PipeOut_deq  O     1 reg
// getMemoryTraffic_PipeOut_notEmpty  O     1 reg
// RDY_getMemoryTraffic_PipeOut_notEmpty  O     1 const
// id                             I    32 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inputPipes_0_enq_v             I    32 reg
// inputPipes_1_enq_v             I    32 reg
// inputPipes_2_enq_v             I    32 reg
// inputPipes_3_enq_v             I    32 reg
// inputPipes_4_enq_v             I    32 reg
// EN_inputPipes_0_enq            I     1
// EN_inputPipes_1_enq            I     1
// EN_inputPipes_2_enq            I     1
// EN_inputPipes_3_enq            I     1
// EN_inputPipes_4_enq            I     1
// EN_sglist_PipeOut_deq          I     1
// EN_region_PipeOut_deq          I     1
// EN_addrRequest_PipeOut_deq     I     1
// EN_getStateDbg_PipeOut_deq     I     1
// EN_getMemoryTraffic_PipeOut_deq  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDmaConfigWrapperPipes(id,
			       CLK,
			       RST_N,

			       inputPipes_0_enq_v,
			       EN_inputPipes_0_enq,
			       RDY_inputPipes_0_enq,

			       inputPipes_0_notFull,
			       RDY_inputPipes_0_notFull,

			       inputPipes_1_enq_v,
			       EN_inputPipes_1_enq,
			       RDY_inputPipes_1_enq,

			       inputPipes_1_notFull,
			       RDY_inputPipes_1_notFull,

			       inputPipes_2_enq_v,
			       EN_inputPipes_2_enq,
			       RDY_inputPipes_2_enq,

			       inputPipes_2_notFull,
			       RDY_inputPipes_2_notFull,

			       inputPipes_3_enq_v,
			       EN_inputPipes_3_enq,
			       RDY_inputPipes_3_enq,

			       inputPipes_3_notFull,
			       RDY_inputPipes_3_notFull,

			       inputPipes_4_enq_v,
			       EN_inputPipes_4_enq,
			       RDY_inputPipes_4_enq,

			       inputPipes_4_notFull,
			       RDY_inputPipes_4_notFull,

			       requestSizeBits,
			       RDY_requestSizeBits,

			       sglist_PipeOut_first,
			       RDY_sglist_PipeOut_first,

			       EN_sglist_PipeOut_deq,
			       RDY_sglist_PipeOut_deq,

			       sglist_PipeOut_notEmpty,
			       RDY_sglist_PipeOut_notEmpty,

			       region_PipeOut_first,
			       RDY_region_PipeOut_first,

			       EN_region_PipeOut_deq,
			       RDY_region_PipeOut_deq,

			       region_PipeOut_notEmpty,
			       RDY_region_PipeOut_notEmpty,

			       addrRequest_PipeOut_first,
			       RDY_addrRequest_PipeOut_first,

			       EN_addrRequest_PipeOut_deq,
			       RDY_addrRequest_PipeOut_deq,

			       addrRequest_PipeOut_notEmpty,
			       RDY_addrRequest_PipeOut_notEmpty,

			       getStateDbg_PipeOut_first,
			       RDY_getStateDbg_PipeOut_first,

			       EN_getStateDbg_PipeOut_deq,
			       RDY_getStateDbg_PipeOut_deq,

			       getStateDbg_PipeOut_notEmpty,
			       RDY_getStateDbg_PipeOut_notEmpty,

			       getMemoryTraffic_PipeOut_first,
			       RDY_getMemoryTraffic_PipeOut_first,

			       EN_getMemoryTraffic_PipeOut_deq,
			       RDY_getMemoryTraffic_PipeOut_deq,

			       getMemoryTraffic_PipeOut_notEmpty,
			       RDY_getMemoryTraffic_PipeOut_notEmpty);
  input  [31 : 0] id;
  input  CLK;
  input  RST_N;

  // action method inputPipes_0_enq
  input  [31 : 0] inputPipes_0_enq_v;
  input  EN_inputPipes_0_enq;
  output RDY_inputPipes_0_enq;

  // value method inputPipes_0_notFull
  output inputPipes_0_notFull;
  output RDY_inputPipes_0_notFull;

  // action method inputPipes_1_enq
  input  [31 : 0] inputPipes_1_enq_v;
  input  EN_inputPipes_1_enq;
  output RDY_inputPipes_1_enq;

  // value method inputPipes_1_notFull
  output inputPipes_1_notFull;
  output RDY_inputPipes_1_notFull;

  // action method inputPipes_2_enq
  input  [31 : 0] inputPipes_2_enq_v;
  input  EN_inputPipes_2_enq;
  output RDY_inputPipes_2_enq;

  // value method inputPipes_2_notFull
  output inputPipes_2_notFull;
  output RDY_inputPipes_2_notFull;

  // action method inputPipes_3_enq
  input  [31 : 0] inputPipes_3_enq_v;
  input  EN_inputPipes_3_enq;
  output RDY_inputPipes_3_enq;

  // value method inputPipes_3_notFull
  output inputPipes_3_notFull;
  output RDY_inputPipes_3_notFull;

  // action method inputPipes_4_enq
  input  [31 : 0] inputPipes_4_enq_v;
  input  EN_inputPipes_4_enq;
  output RDY_inputPipes_4_enq;

  // value method inputPipes_4_notFull
  output inputPipes_4_notFull;
  output RDY_inputPipes_4_notFull;

  // value method requestSizeBits
  output [159 : 0] requestSizeBits;
  output RDY_requestSizeBits;

  // value method sglist_PipeOut_first
  output [159 : 0] sglist_PipeOut_first;
  output RDY_sglist_PipeOut_first;

  // action method sglist_PipeOut_deq
  input  EN_sglist_PipeOut_deq;
  output RDY_sglist_PipeOut_deq;

  // value method sglist_PipeOut_notEmpty
  output sglist_PipeOut_notEmpty;
  output RDY_sglist_PipeOut_notEmpty;

  // value method region_PipeOut_first
  output [319 : 0] region_PipeOut_first;
  output RDY_region_PipeOut_first;

  // action method region_PipeOut_deq
  input  EN_region_PipeOut_deq;
  output RDY_region_PipeOut_deq;

  // value method region_PipeOut_notEmpty
  output region_PipeOut_notEmpty;
  output RDY_region_PipeOut_notEmpty;

  // value method addrRequest_PipeOut_first
  output [63 : 0] addrRequest_PipeOut_first;
  output RDY_addrRequest_PipeOut_first;

  // action method addrRequest_PipeOut_deq
  input  EN_addrRequest_PipeOut_deq;
  output RDY_addrRequest_PipeOut_deq;

  // value method addrRequest_PipeOut_notEmpty
  output addrRequest_PipeOut_notEmpty;
  output RDY_addrRequest_PipeOut_notEmpty;

  // value method getStateDbg_PipeOut_first
  output getStateDbg_PipeOut_first;
  output RDY_getStateDbg_PipeOut_first;

  // action method getStateDbg_PipeOut_deq
  input  EN_getStateDbg_PipeOut_deq;
  output RDY_getStateDbg_PipeOut_deq;

  // value method getStateDbg_PipeOut_notEmpty
  output getStateDbg_PipeOut_notEmpty;
  output RDY_getStateDbg_PipeOut_notEmpty;

  // value method getMemoryTraffic_PipeOut_first
  output getMemoryTraffic_PipeOut_first;
  output RDY_getMemoryTraffic_PipeOut_first;

  // action method getMemoryTraffic_PipeOut_deq
  input  EN_getMemoryTraffic_PipeOut_deq;
  output RDY_getMemoryTraffic_PipeOut_deq;

  // value method getMemoryTraffic_PipeOut_notEmpty
  output getMemoryTraffic_PipeOut_notEmpty;
  output RDY_getMemoryTraffic_PipeOut_notEmpty;

  // signals for module outputs
  wire [319 : 0] region_PipeOut_first;
  wire [159 : 0] requestSizeBits, sglist_PipeOut_first;
  wire [63 : 0] addrRequest_PipeOut_first;
  wire RDY_addrRequest_PipeOut_deq,
       RDY_addrRequest_PipeOut_first,
       RDY_addrRequest_PipeOut_notEmpty,
       RDY_getMemoryTraffic_PipeOut_deq,
       RDY_getMemoryTraffic_PipeOut_first,
       RDY_getMemoryTraffic_PipeOut_notEmpty,
       RDY_getStateDbg_PipeOut_deq,
       RDY_getStateDbg_PipeOut_first,
       RDY_getStateDbg_PipeOut_notEmpty,
       RDY_inputPipes_0_enq,
       RDY_inputPipes_0_notFull,
       RDY_inputPipes_1_enq,
       RDY_inputPipes_1_notFull,
       RDY_inputPipes_2_enq,
       RDY_inputPipes_2_notFull,
       RDY_inputPipes_3_enq,
       RDY_inputPipes_3_notFull,
       RDY_inputPipes_4_enq,
       RDY_inputPipes_4_notFull,
       RDY_region_PipeOut_deq,
       RDY_region_PipeOut_first,
       RDY_region_PipeOut_notEmpty,
       RDY_requestSizeBits,
       RDY_sglist_PipeOut_deq,
       RDY_sglist_PipeOut_first,
       RDY_sglist_PipeOut_notEmpty,
       addrRequest_PipeOut_notEmpty,
       getMemoryTraffic_PipeOut_first,
       getMemoryTraffic_PipeOut_notEmpty,
       getStateDbg_PipeOut_first,
       getStateDbg_PipeOut_notEmpty,
       inputPipes_0_notFull,
       inputPipes_1_notFull,
       inputPipes_2_notFull,
       inputPipes_3_notFull,
       inputPipes_4_notFull,
       region_PipeOut_notEmpty,
       sglist_PipeOut_notEmpty;

  // register addrRequest_requestFifo_count
  reg [31 : 0] addrRequest_requestFifo_count;
  wire [31 : 0] addrRequest_requestFifo_count_D_IN;
  wire addrRequest_requestFifo_count_EN;

  // register addrRequest_requestFifo_fbnbuff
  reg [63 : 0] addrRequest_requestFifo_fbnbuff;
  wire [63 : 0] addrRequest_requestFifo_fbnbuff_D_IN;
  wire addrRequest_requestFifo_fbnbuff_EN;

  // register getMemoryTraffic_requestFifo_count
  reg [31 : 0] getMemoryTraffic_requestFifo_count;
  wire [31 : 0] getMemoryTraffic_requestFifo_count_D_IN;
  wire getMemoryTraffic_requestFifo_count_EN;

  // register getMemoryTraffic_requestFifo_fbnbuff
  reg [31 : 0] getMemoryTraffic_requestFifo_fbnbuff;
  wire [31 : 0] getMemoryTraffic_requestFifo_fbnbuff_D_IN;
  wire getMemoryTraffic_requestFifo_fbnbuff_EN;

  // register getStateDbg_requestFifo_count
  reg [31 : 0] getStateDbg_requestFifo_count;
  wire [31 : 0] getStateDbg_requestFifo_count_D_IN;
  wire getStateDbg_requestFifo_count_EN;

  // register getStateDbg_requestFifo_fbnbuff
  reg [31 : 0] getStateDbg_requestFifo_fbnbuff;
  wire [31 : 0] getStateDbg_requestFifo_fbnbuff_D_IN;
  wire getStateDbg_requestFifo_fbnbuff_EN;

  // register region_requestFifo_count
  reg [31 : 0] region_requestFifo_count;
  wire [31 : 0] region_requestFifo_count_D_IN;
  wire region_requestFifo_count_EN;

  // register region_requestFifo_fbnbuff
  reg [319 : 0] region_requestFifo_fbnbuff;
  wire [319 : 0] region_requestFifo_fbnbuff_D_IN;
  wire region_requestFifo_fbnbuff_EN;

  // register sglist_requestFifo_count
  reg [31 : 0] sglist_requestFifo_count;
  wire [31 : 0] sglist_requestFifo_count_D_IN;
  wire sglist_requestFifo_count_EN;

  // register sglist_requestFifo_fbnbuff
  reg [159 : 0] sglist_requestFifo_fbnbuff;
  wire [159 : 0] sglist_requestFifo_fbnbuff_D_IN;
  wire sglist_requestFifo_fbnbuff_EN;

  // ports of submodule addrRequest_requestFifo_fifo
  wire [63 : 0] addrRequest_requestFifo_fifo_D_IN,
		addrRequest_requestFifo_fifo_D_OUT;
  wire addrRequest_requestFifo_fifo_CLR,
       addrRequest_requestFifo_fifo_DEQ,
       addrRequest_requestFifo_fifo_EMPTY_N,
       addrRequest_requestFifo_fifo_ENQ,
       addrRequest_requestFifo_fifo_FULL_N;

  // ports of submodule getMemoryTraffic_requestFifo_fifo
  wire getMemoryTraffic_requestFifo_fifo_CLR,
       getMemoryTraffic_requestFifo_fifo_DEQ,
       getMemoryTraffic_requestFifo_fifo_D_IN,
       getMemoryTraffic_requestFifo_fifo_D_OUT,
       getMemoryTraffic_requestFifo_fifo_EMPTY_N,
       getMemoryTraffic_requestFifo_fifo_ENQ,
       getMemoryTraffic_requestFifo_fifo_FULL_N;

  // ports of submodule getStateDbg_requestFifo_fifo
  wire getStateDbg_requestFifo_fifo_CLR,
       getStateDbg_requestFifo_fifo_DEQ,
       getStateDbg_requestFifo_fifo_D_IN,
       getStateDbg_requestFifo_fifo_D_OUT,
       getStateDbg_requestFifo_fifo_EMPTY_N,
       getStateDbg_requestFifo_fifo_ENQ,
       getStateDbg_requestFifo_fifo_FULL_N;

  // ports of submodule region_requestFifo_fifo
  wire [319 : 0] region_requestFifo_fifo_D_IN, region_requestFifo_fifo_D_OUT;
  wire region_requestFifo_fifo_CLR,
       region_requestFifo_fifo_DEQ,
       region_requestFifo_fifo_EMPTY_N,
       region_requestFifo_fifo_ENQ,
       region_requestFifo_fifo_FULL_N;

  // ports of submodule sglist_requestFifo_fifo
  wire [159 : 0] sglist_requestFifo_fifo_D_IN, sglist_requestFifo_fifo_D_OUT;
  wire sglist_requestFifo_fifo_CLR,
       sglist_requestFifo_fifo_DEQ,
       sglist_requestFifo_fifo_EMPTY_N,
       sglist_requestFifo_fifo_ENQ,
       sglist_requestFifo_fifo_FULL_N;

  // remaining internal signals
  wire [31 : 0] x__h1290, x__h1414, x__h1538, x__h1660, x__h1781;

  // action method inputPipes_0_enq
  assign RDY_inputPipes_0_enq =
	     sglist_requestFifo_count < 32'd4 ||
	     sglist_requestFifo_fifo_FULL_N ;

  // value method inputPipes_0_notFull
  assign inputPipes_0_notFull = sglist_requestFifo_fifo_FULL_N ;
  assign RDY_inputPipes_0_notFull = 1'd1 ;

  // action method inputPipes_1_enq
  assign RDY_inputPipes_1_enq =
	     region_requestFifo_count < 32'd9 ||
	     region_requestFifo_fifo_FULL_N ;

  // value method inputPipes_1_notFull
  assign inputPipes_1_notFull = region_requestFifo_fifo_FULL_N ;
  assign RDY_inputPipes_1_notFull = 1'd1 ;

  // action method inputPipes_2_enq
  assign RDY_inputPipes_2_enq =
	     addrRequest_requestFifo_count == 32'd0 ||
	     addrRequest_requestFifo_fifo_FULL_N ;

  // value method inputPipes_2_notFull
  assign inputPipes_2_notFull = addrRequest_requestFifo_fifo_FULL_N ;
  assign RDY_inputPipes_2_notFull = 1'd1 ;

  // action method inputPipes_3_enq
  assign RDY_inputPipes_3_enq = getStateDbg_requestFifo_fifo_FULL_N ;

  // value method inputPipes_3_notFull
  assign inputPipes_3_notFull = getStateDbg_requestFifo_fifo_FULL_N ;
  assign RDY_inputPipes_3_notFull = 1'd1 ;

  // action method inputPipes_4_enq
  assign RDY_inputPipes_4_enq = getMemoryTraffic_requestFifo_fifo_FULL_N ;

  // value method inputPipes_4_notFull
  assign inputPipes_4_notFull = getMemoryTraffic_requestFifo_fifo_FULL_N ;
  assign RDY_inputPipes_4_notFull = 1'd1 ;

  // value method requestSizeBits
  assign requestSizeBits = 160'h00000001000000010000004000000140000000A0 ;
  assign RDY_requestSizeBits = 1'd1 ;

  // value method sglist_PipeOut_first
  assign sglist_PipeOut_first = sglist_requestFifo_fifo_D_OUT ;
  assign RDY_sglist_PipeOut_first = sglist_requestFifo_fifo_EMPTY_N ;

  // action method sglist_PipeOut_deq
  assign RDY_sglist_PipeOut_deq = sglist_requestFifo_fifo_EMPTY_N ;

  // value method sglist_PipeOut_notEmpty
  assign sglist_PipeOut_notEmpty = sglist_requestFifo_fifo_EMPTY_N ;
  assign RDY_sglist_PipeOut_notEmpty = 1'd1 ;

  // value method region_PipeOut_first
  assign region_PipeOut_first = region_requestFifo_fifo_D_OUT ;
  assign RDY_region_PipeOut_first = region_requestFifo_fifo_EMPTY_N ;

  // action method region_PipeOut_deq
  assign RDY_region_PipeOut_deq = region_requestFifo_fifo_EMPTY_N ;

  // value method region_PipeOut_notEmpty
  assign region_PipeOut_notEmpty = region_requestFifo_fifo_EMPTY_N ;
  assign RDY_region_PipeOut_notEmpty = 1'd1 ;

  // value method addrRequest_PipeOut_first
  assign addrRequest_PipeOut_first = addrRequest_requestFifo_fifo_D_OUT ;
  assign RDY_addrRequest_PipeOut_first =
	     addrRequest_requestFifo_fifo_EMPTY_N ;

  // action method addrRequest_PipeOut_deq
  assign RDY_addrRequest_PipeOut_deq = addrRequest_requestFifo_fifo_EMPTY_N ;

  // value method addrRequest_PipeOut_notEmpty
  assign addrRequest_PipeOut_notEmpty = addrRequest_requestFifo_fifo_EMPTY_N ;
  assign RDY_addrRequest_PipeOut_notEmpty = 1'd1 ;

  // value method getStateDbg_PipeOut_first
  assign getStateDbg_PipeOut_first = getStateDbg_requestFifo_fifo_D_OUT ;
  assign RDY_getStateDbg_PipeOut_first =
	     getStateDbg_requestFifo_fifo_EMPTY_N ;

  // action method getStateDbg_PipeOut_deq
  assign RDY_getStateDbg_PipeOut_deq = getStateDbg_requestFifo_fifo_EMPTY_N ;

  // value method getStateDbg_PipeOut_notEmpty
  assign getStateDbg_PipeOut_notEmpty = getStateDbg_requestFifo_fifo_EMPTY_N ;
  assign RDY_getStateDbg_PipeOut_notEmpty = 1'd1 ;

  // value method getMemoryTraffic_PipeOut_first
  assign getMemoryTraffic_PipeOut_first =
	     getMemoryTraffic_requestFifo_fifo_D_OUT ;
  assign RDY_getMemoryTraffic_PipeOut_first =
	     getMemoryTraffic_requestFifo_fifo_EMPTY_N ;

  // action method getMemoryTraffic_PipeOut_deq
  assign RDY_getMemoryTraffic_PipeOut_deq =
	     getMemoryTraffic_requestFifo_fifo_EMPTY_N ;

  // value method getMemoryTraffic_PipeOut_notEmpty
  assign getMemoryTraffic_PipeOut_notEmpty =
	     getMemoryTraffic_requestFifo_fifo_EMPTY_N ;
  assign RDY_getMemoryTraffic_PipeOut_notEmpty = 1'd1 ;

  // submodule addrRequest_requestFifo_fifo
  FIFO1 #(.width(32'd64),
	  .guarded(32'd1)) addrRequest_requestFifo_fifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(addrRequest_requestFifo_fifo_D_IN),
							.ENQ(addrRequest_requestFifo_fifo_ENQ),
							.DEQ(addrRequest_requestFifo_fifo_DEQ),
							.CLR(addrRequest_requestFifo_fifo_CLR),
							.D_OUT(addrRequest_requestFifo_fifo_D_OUT),
							.FULL_N(addrRequest_requestFifo_fifo_FULL_N),
							.EMPTY_N(addrRequest_requestFifo_fifo_EMPTY_N));

  // submodule getMemoryTraffic_requestFifo_fifo
  FIFO1 #(.width(32'd1),
	  .guarded(32'd1)) getMemoryTraffic_requestFifo_fifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(getMemoryTraffic_requestFifo_fifo_D_IN),
							     .ENQ(getMemoryTraffic_requestFifo_fifo_ENQ),
							     .DEQ(getMemoryTraffic_requestFifo_fifo_DEQ),
							     .CLR(getMemoryTraffic_requestFifo_fifo_CLR),
							     .D_OUT(getMemoryTraffic_requestFifo_fifo_D_OUT),
							     .FULL_N(getMemoryTraffic_requestFifo_fifo_FULL_N),
							     .EMPTY_N(getMemoryTraffic_requestFifo_fifo_EMPTY_N));

  // submodule getStateDbg_requestFifo_fifo
  FIFO1 #(.width(32'd1),
	  .guarded(32'd1)) getStateDbg_requestFifo_fifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(getStateDbg_requestFifo_fifo_D_IN),
							.ENQ(getStateDbg_requestFifo_fifo_ENQ),
							.DEQ(getStateDbg_requestFifo_fifo_DEQ),
							.CLR(getStateDbg_requestFifo_fifo_CLR),
							.D_OUT(getStateDbg_requestFifo_fifo_D_OUT),
							.FULL_N(getStateDbg_requestFifo_fifo_FULL_N),
							.EMPTY_N(getStateDbg_requestFifo_fifo_EMPTY_N));

  // submodule region_requestFifo_fifo
  FIFO1 #(.width(32'd320),
	  .guarded(32'd1)) region_requestFifo_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(region_requestFifo_fifo_D_IN),
						   .ENQ(region_requestFifo_fifo_ENQ),
						   .DEQ(region_requestFifo_fifo_DEQ),
						   .CLR(region_requestFifo_fifo_CLR),
						   .D_OUT(region_requestFifo_fifo_D_OUT),
						   .FULL_N(region_requestFifo_fifo_FULL_N),
						   .EMPTY_N(region_requestFifo_fifo_EMPTY_N));

  // submodule sglist_requestFifo_fifo
  FIFO1 #(.width(32'd160),
	  .guarded(32'd1)) sglist_requestFifo_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(sglist_requestFifo_fifo_D_IN),
						   .ENQ(sglist_requestFifo_fifo_ENQ),
						   .DEQ(sglist_requestFifo_fifo_DEQ),
						   .CLR(sglist_requestFifo_fifo_CLR),
						   .D_OUT(sglist_requestFifo_fifo_D_OUT),
						   .FULL_N(sglist_requestFifo_fifo_FULL_N),
						   .EMPTY_N(sglist_requestFifo_fifo_EMPTY_N));

  // register addrRequest_requestFifo_count
  assign addrRequest_requestFifo_count_D_IN =
	     (addrRequest_requestFifo_count == 32'd1) ? 32'd0 : x__h1538 ;
  assign addrRequest_requestFifo_count_EN = EN_inputPipes_2_enq ;

  // register addrRequest_requestFifo_fbnbuff
  assign addrRequest_requestFifo_fbnbuff_D_IN =
	     { addrRequest_requestFifo_fbnbuff[31:0], inputPipes_2_enq_v } ;
  assign addrRequest_requestFifo_fbnbuff_EN = EN_inputPipes_2_enq ;

  // register getMemoryTraffic_requestFifo_count
  assign getMemoryTraffic_requestFifo_count_D_IN =
	     (getMemoryTraffic_requestFifo_count == 32'd0) ?
	       getMemoryTraffic_requestFifo_count :
	       x__h1781 ;
  assign getMemoryTraffic_requestFifo_count_EN = EN_inputPipes_4_enq ;

  // register getMemoryTraffic_requestFifo_fbnbuff
  assign getMemoryTraffic_requestFifo_fbnbuff_D_IN = inputPipes_4_enq_v ;
  assign getMemoryTraffic_requestFifo_fbnbuff_EN = EN_inputPipes_4_enq ;

  // register getStateDbg_requestFifo_count
  assign getStateDbg_requestFifo_count_D_IN =
	     (getStateDbg_requestFifo_count == 32'd0) ?
	       getStateDbg_requestFifo_count :
	       x__h1660 ;
  assign getStateDbg_requestFifo_count_EN = EN_inputPipes_3_enq ;

  // register getStateDbg_requestFifo_fbnbuff
  assign getStateDbg_requestFifo_fbnbuff_D_IN = inputPipes_3_enq_v ;
  assign getStateDbg_requestFifo_fbnbuff_EN = EN_inputPipes_3_enq ;

  // register region_requestFifo_count
  assign region_requestFifo_count_D_IN =
	     (region_requestFifo_count == 32'd9) ? 32'd0 : x__h1414 ;
  assign region_requestFifo_count_EN = EN_inputPipes_1_enq ;

  // register region_requestFifo_fbnbuff
  assign region_requestFifo_fbnbuff_D_IN =
	     { region_requestFifo_fbnbuff[287:0], inputPipes_1_enq_v } ;
  assign region_requestFifo_fbnbuff_EN = EN_inputPipes_1_enq ;

  // register sglist_requestFifo_count
  assign sglist_requestFifo_count_D_IN =
	     (sglist_requestFifo_count == 32'd4) ? 32'd0 : x__h1290 ;
  assign sglist_requestFifo_count_EN = EN_inputPipes_0_enq ;

  // register sglist_requestFifo_fbnbuff
  assign sglist_requestFifo_fbnbuff_D_IN =
	     { sglist_requestFifo_fbnbuff[127:0], inputPipes_0_enq_v } ;
  assign sglist_requestFifo_fbnbuff_EN = EN_inputPipes_0_enq ;

  // submodule addrRequest_requestFifo_fifo
  assign addrRequest_requestFifo_fifo_D_IN =
	     { addrRequest_requestFifo_fbnbuff[31:0], inputPipes_2_enq_v } ;
  assign addrRequest_requestFifo_fifo_ENQ =
	     EN_inputPipes_2_enq && addrRequest_requestFifo_count == 32'd1 ;
  assign addrRequest_requestFifo_fifo_DEQ = EN_addrRequest_PipeOut_deq ;
  assign addrRequest_requestFifo_fifo_CLR = 1'b0 ;

  // submodule getMemoryTraffic_requestFifo_fifo
  assign getMemoryTraffic_requestFifo_fifo_D_IN = inputPipes_4_enq_v[0] ;
  assign getMemoryTraffic_requestFifo_fifo_ENQ =
	     EN_inputPipes_4_enq &&
	     getMemoryTraffic_requestFifo_count == 32'd0 ;
  assign getMemoryTraffic_requestFifo_fifo_DEQ =
	     EN_getMemoryTraffic_PipeOut_deq ;
  assign getMemoryTraffic_requestFifo_fifo_CLR = 1'b0 ;

  // submodule getStateDbg_requestFifo_fifo
  assign getStateDbg_requestFifo_fifo_D_IN = inputPipes_3_enq_v[0] ;
  assign getStateDbg_requestFifo_fifo_ENQ =
	     EN_inputPipes_3_enq && getStateDbg_requestFifo_count == 32'd0 ;
  assign getStateDbg_requestFifo_fifo_DEQ = EN_getStateDbg_PipeOut_deq ;
  assign getStateDbg_requestFifo_fifo_CLR = 1'b0 ;

  // submodule region_requestFifo_fifo
  assign region_requestFifo_fifo_D_IN =
	     { region_requestFifo_fbnbuff[287:0], inputPipes_1_enq_v } ;
  assign region_requestFifo_fifo_ENQ =
	     EN_inputPipes_1_enq && region_requestFifo_count == 32'd9 ;
  assign region_requestFifo_fifo_DEQ = EN_region_PipeOut_deq ;
  assign region_requestFifo_fifo_CLR = 1'b0 ;

  // submodule sglist_requestFifo_fifo
  assign sglist_requestFifo_fifo_D_IN =
	     { sglist_requestFifo_fbnbuff[127:0], inputPipes_0_enq_v } ;
  assign sglist_requestFifo_fifo_ENQ =
	     EN_inputPipes_0_enq && sglist_requestFifo_count == 32'd4 ;
  assign sglist_requestFifo_fifo_DEQ = EN_sglist_PipeOut_deq ;
  assign sglist_requestFifo_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign x__h1290 = sglist_requestFifo_count + 32'd1 ;
  assign x__h1414 = region_requestFifo_count + 32'd1 ;
  assign x__h1538 = addrRequest_requestFifo_count + 32'd1 ;
  assign x__h1660 = getStateDbg_requestFifo_count + 32'd1 ;
  assign x__h1781 = getMemoryTraffic_requestFifo_count + 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addrRequest_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	addrRequest_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 64'd0;
	getMemoryTraffic_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	getMemoryTraffic_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 32'd0;
	getStateDbg_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	getStateDbg_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 32'd0;
	region_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	region_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 320'd0;
	sglist_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sglist_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 160'd0;
      end
    else
      begin
        if (addrRequest_requestFifo_count_EN)
	  addrRequest_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      addrRequest_requestFifo_count_D_IN;
	if (addrRequest_requestFifo_fbnbuff_EN)
	  addrRequest_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      addrRequest_requestFifo_fbnbuff_D_IN;
	if (getMemoryTraffic_requestFifo_count_EN)
	  getMemoryTraffic_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      getMemoryTraffic_requestFifo_count_D_IN;
	if (getMemoryTraffic_requestFifo_fbnbuff_EN)
	  getMemoryTraffic_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      getMemoryTraffic_requestFifo_fbnbuff_D_IN;
	if (getStateDbg_requestFifo_count_EN)
	  getStateDbg_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      getStateDbg_requestFifo_count_D_IN;
	if (getStateDbg_requestFifo_fbnbuff_EN)
	  getStateDbg_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      getStateDbg_requestFifo_fbnbuff_D_IN;
	if (region_requestFifo_count_EN)
	  region_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      region_requestFifo_count_D_IN;
	if (region_requestFifo_fbnbuff_EN)
	  region_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      region_requestFifo_fbnbuff_D_IN;
	if (sglist_requestFifo_count_EN)
	  sglist_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      sglist_requestFifo_count_D_IN;
	if (sglist_requestFifo_fbnbuff_EN)
	  sglist_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      sglist_requestFifo_fbnbuff_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addrRequest_requestFifo_count = 32'hAAAAAAAA;
    addrRequest_requestFifo_fbnbuff = 64'hAAAAAAAAAAAAAAAA;
    getMemoryTraffic_requestFifo_count = 32'hAAAAAAAA;
    getMemoryTraffic_requestFifo_fbnbuff = 32'hAAAAAAAA;
    getStateDbg_requestFifo_count = 32'hAAAAAAAA;
    getStateDbg_requestFifo_fbnbuff = 32'hAAAAAAAA;
    region_requestFifo_count = 32'hAAAAAAAA;
    region_requestFifo_fbnbuff =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    sglist_requestFifo_count = 32'hAAAAAAAA;
    sglist_requestFifo_fbnbuff =
	160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDmaConfigWrapperPipes

