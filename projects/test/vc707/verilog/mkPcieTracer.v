//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:13:41 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// pci_request_get                O   153 reg
// RDY_pci_request_get            O     1 reg
// RDY_pci_response_put           O     1 reg
// RDY_trace_put                  O     1
// RDY_bus_request_put            O     1 reg
// bus_response_get               O   153 reg
// RDY_bus_response_get           O     1
// RDY_tlpdata_tlpTracing__write  O     1 const
// tlpdata_tlpTracing__read       O     1 reg
// RDY_tlpdata_tlpTracing__read   O     1 const
// RDY_tlpdata_tlpTraceLimit__write  O     1 const
// tlpdata_tlpTraceLimit__read    O    11 reg
// RDY_tlpdata_tlpTraceLimit__read  O     1 const
// RDY_tlpdata_pcieTraceBramWrAddr__write  O     1 reg
// tlpdata_pcieTraceBramWrAddr__read  O    11 reg
// RDY_tlpdata_pcieTraceBramWrAddr__read  O     1 const
// RDY_tlpdata_bramServer_request_put  O     1
// tlpdata_bramServer_response_get  O   192 reg
// RDY_tlpdata_bramServer_response_get  O     1 reg
// RDY_tlpdata_bscanBramServer_request_put  O     1
// tlpdata_bscanBramServer_response_get  O   192 reg
// RDY_tlpdata_bscanBramServer_response_get  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pci_response_put               I   153 reg
// trace_put                      I   192
// bus_request_put                I   153
// tlpdata_tlpTracing__write_1    I     1 reg
// tlpdata_tlpTraceLimit__write_1  I    11 reg
// tlpdata_pcieTraceBramWrAddr__write_1  I    11 reg
// tlpdata_bramServer_request_put  I   206
// tlpdata_bscanBramServer_request_put  I   206
// EN_pci_response_put            I     1
// EN_trace_put                   I     1
// EN_bus_request_put             I     1
// EN_tlpdata_tlpTracing__write   I     1
// EN_tlpdata_tlpTraceLimit__write  I     1
// EN_tlpdata_pcieTraceBramWrAddr__write  I     1
// EN_tlpdata_bramServer_request_put  I     1
// EN_tlpdata_bscanBramServer_request_put  I     1
// EN_pci_request_get             I     1
// EN_bus_response_get            I     1
// EN_tlpdata_bramServer_response_get  I     1
// EN_tlpdata_bscanBramServer_response_get  I     1
//
// Combinational paths from inputs to outputs:
//   (EN_bus_request_put, EN_bus_response_get) -> RDY_trace_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPcieTracer(CLK,
		    RST_N,

		    EN_pci_request_get,
		    pci_request_get,
		    RDY_pci_request_get,

		    pci_response_put,
		    EN_pci_response_put,
		    RDY_pci_response_put,

		    trace_put,
		    EN_trace_put,
		    RDY_trace_put,

		    bus_request_put,
		    EN_bus_request_put,
		    RDY_bus_request_put,

		    EN_bus_response_get,
		    bus_response_get,
		    RDY_bus_response_get,

		    tlpdata_tlpTracing__write_1,
		    EN_tlpdata_tlpTracing__write,
		    RDY_tlpdata_tlpTracing__write,

		    tlpdata_tlpTracing__read,
		    RDY_tlpdata_tlpTracing__read,

		    tlpdata_tlpTraceLimit__write_1,
		    EN_tlpdata_tlpTraceLimit__write,
		    RDY_tlpdata_tlpTraceLimit__write,

		    tlpdata_tlpTraceLimit__read,
		    RDY_tlpdata_tlpTraceLimit__read,

		    tlpdata_pcieTraceBramWrAddr__write_1,
		    EN_tlpdata_pcieTraceBramWrAddr__write,
		    RDY_tlpdata_pcieTraceBramWrAddr__write,

		    tlpdata_pcieTraceBramWrAddr__read,
		    RDY_tlpdata_pcieTraceBramWrAddr__read,

		    tlpdata_bramServer_request_put,
		    EN_tlpdata_bramServer_request_put,
		    RDY_tlpdata_bramServer_request_put,

		    EN_tlpdata_bramServer_response_get,
		    tlpdata_bramServer_response_get,
		    RDY_tlpdata_bramServer_response_get,

		    tlpdata_bscanBramServer_request_put,
		    EN_tlpdata_bscanBramServer_request_put,
		    RDY_tlpdata_bscanBramServer_request_put,

		    EN_tlpdata_bscanBramServer_response_get,
		    tlpdata_bscanBramServer_response_get,
		    RDY_tlpdata_bscanBramServer_response_get);
  input  CLK;
  input  RST_N;

  // actionvalue method pci_request_get
  input  EN_pci_request_get;
  output [152 : 0] pci_request_get;
  output RDY_pci_request_get;

  // action method pci_response_put
  input  [152 : 0] pci_response_put;
  input  EN_pci_response_put;
  output RDY_pci_response_put;

  // action method trace_put
  input  [191 : 0] trace_put;
  input  EN_trace_put;
  output RDY_trace_put;

  // action method bus_request_put
  input  [152 : 0] bus_request_put;
  input  EN_bus_request_put;
  output RDY_bus_request_put;

  // actionvalue method bus_response_get
  input  EN_bus_response_get;
  output [152 : 0] bus_response_get;
  output RDY_bus_response_get;

  // action method tlpdata_tlpTracing__write
  input  tlpdata_tlpTracing__write_1;
  input  EN_tlpdata_tlpTracing__write;
  output RDY_tlpdata_tlpTracing__write;

  // value method tlpdata_tlpTracing__read
  output tlpdata_tlpTracing__read;
  output RDY_tlpdata_tlpTracing__read;

  // action method tlpdata_tlpTraceLimit__write
  input  [10 : 0] tlpdata_tlpTraceLimit__write_1;
  input  EN_tlpdata_tlpTraceLimit__write;
  output RDY_tlpdata_tlpTraceLimit__write;

  // value method tlpdata_tlpTraceLimit__read
  output [10 : 0] tlpdata_tlpTraceLimit__read;
  output RDY_tlpdata_tlpTraceLimit__read;

  // action method tlpdata_pcieTraceBramWrAddr__write
  input  [10 : 0] tlpdata_pcieTraceBramWrAddr__write_1;
  input  EN_tlpdata_pcieTraceBramWrAddr__write;
  output RDY_tlpdata_pcieTraceBramWrAddr__write;

  // value method tlpdata_pcieTraceBramWrAddr__read
  output [10 : 0] tlpdata_pcieTraceBramWrAddr__read;
  output RDY_tlpdata_pcieTraceBramWrAddr__read;

  // action method tlpdata_bramServer_request_put
  input  [205 : 0] tlpdata_bramServer_request_put;
  input  EN_tlpdata_bramServer_request_put;
  output RDY_tlpdata_bramServer_request_put;

  // actionvalue method tlpdata_bramServer_response_get
  input  EN_tlpdata_bramServer_response_get;
  output [191 : 0] tlpdata_bramServer_response_get;
  output RDY_tlpdata_bramServer_response_get;

  // action method tlpdata_bscanBramServer_request_put
  input  [205 : 0] tlpdata_bscanBramServer_request_put;
  input  EN_tlpdata_bscanBramServer_request_put;
  output RDY_tlpdata_bscanBramServer_request_put;

  // actionvalue method tlpdata_bscanBramServer_response_get
  input  EN_tlpdata_bscanBramServer_response_get;
  output [191 : 0] tlpdata_bscanBramServer_response_get;
  output RDY_tlpdata_bscanBramServer_response_get;

  // signals for module outputs
  wire [191 : 0] tlpdata_bramServer_response_get,
		 tlpdata_bscanBramServer_response_get;
  wire [152 : 0] bus_response_get, pci_request_get;
  wire [10 : 0] tlpdata_pcieTraceBramWrAddr__read,
		tlpdata_tlpTraceLimit__read;
  wire RDY_bus_request_put,
       RDY_bus_response_get,
       RDY_pci_request_get,
       RDY_pci_response_put,
       RDY_tlpdata_bramServer_request_put,
       RDY_tlpdata_bramServer_response_get,
       RDY_tlpdata_bscanBramServer_request_put,
       RDY_tlpdata_bscanBramServer_response_get,
       RDY_tlpdata_pcieTraceBramWrAddr__read,
       RDY_tlpdata_pcieTraceBramWrAddr__write,
       RDY_tlpdata_tlpTraceLimit__read,
       RDY_tlpdata_tlpTraceLimit__write,
       RDY_tlpdata_tlpTracing__read,
       RDY_tlpdata_tlpTracing__write,
       RDY_trace_put,
       tlpdata_tlpTracing__read;

  // inlined wires
  wire [191 : 0] bramMuxReg_responseFifo_rw_enq_wget,
		 bscanBramMux_responseFifo_rw_enq_wget;
  wire [1 : 0] fromPcieTraceBram_serverAdapterA_s1_1_wget,
	       fromPcieTraceBram_serverAdapterB_s1_1_wget,
	       fromPcieTraceBram_serverAdapterB_writeWithResp_wget,
	       toPcieTraceBram_serverAdapterA_s1_1_wget;
  wire bramMuxReg_responseFifo_rw_enq_whas,
       bscanBramMux_responseFifo_rw_enq_whas,
       fromPcie_whas,
       fromPcieTraceBram_serverAdapterA_cnt_1_whas,
       fromPcieTraceBram_serverAdapterA_outData_enqData_whas,
       fromPcieTraceBram_serverAdapterA_outData_outData_whas,
       fromPcieTraceBram_serverAdapterA_s1_1_whas,
       fromPcieTraceBram_serverAdapterB_cnt_1_whas,
       fromPcieTraceBram_serverAdapterB_outData_enqData_whas,
       fromPcieTraceBram_serverAdapterB_outData_outData_whas,
       fromPcieTraceBram_serverAdapterB_writeWithResp_whas,
       toPcie_whas,
       toPcieTraceBram_serverAdapterA_cnt_1_whas,
       toPcieTraceBram_serverAdapterA_outData_enqData_whas,
       toPcieTraceBram_serverAdapterA_outData_outData_whas,
       toPcieTraceBram_serverAdapterA_writeWithResp_whas,
       toPcieTraceBram_serverAdapterB_cnt_1_whas,
       toPcieTraceBram_serverAdapterB_outData_enqData_whas,
       toPcieTraceBram_serverAdapterB_outData_outData_whas,
       toPcieTraceBram_serverAdapterB_writeWithResp_whas;

  // register bramMuxReg_responseFifo_taggedReg
  reg [192 : 0] bramMuxReg_responseFifo_taggedReg;
  wire [192 : 0] bramMuxReg_responseFifo_taggedReg_D_IN;
  wire bramMuxReg_responseFifo_taggedReg_EN;

  // register bscanBramMux_responseFifo_taggedReg
  reg [192 : 0] bscanBramMux_responseFifo_taggedReg;
  wire [192 : 0] bscanBramMux_responseFifo_taggedReg_D_IN;
  wire bscanBramMux_responseFifo_taggedReg_EN;

  // register fromPcieTraceBram_serverAdapterA_cnt
  reg [2 : 0] fromPcieTraceBram_serverAdapterA_cnt;
  wire [2 : 0] fromPcieTraceBram_serverAdapterA_cnt_D_IN;
  wire fromPcieTraceBram_serverAdapterA_cnt_EN;

  // register fromPcieTraceBram_serverAdapterA_s1
  reg [1 : 0] fromPcieTraceBram_serverAdapterA_s1;
  wire [1 : 0] fromPcieTraceBram_serverAdapterA_s1_D_IN;
  wire fromPcieTraceBram_serverAdapterA_s1_EN;

  // register fromPcieTraceBram_serverAdapterB_cnt
  reg [2 : 0] fromPcieTraceBram_serverAdapterB_cnt;
  wire [2 : 0] fromPcieTraceBram_serverAdapterB_cnt_D_IN;
  wire fromPcieTraceBram_serverAdapterB_cnt_EN;

  // register fromPcieTraceBram_serverAdapterB_s1
  reg [1 : 0] fromPcieTraceBram_serverAdapterB_s1;
  wire [1 : 0] fromPcieTraceBram_serverAdapterB_s1_D_IN;
  wire fromPcieTraceBram_serverAdapterB_s1_EN;

  // register pcieTraceBramWrAddrReg
  reg [10 : 0] pcieTraceBramWrAddrReg;
  wire [10 : 0] pcieTraceBramWrAddrReg_D_IN;
  wire pcieTraceBramWrAddrReg_EN;

  // register skippingIncomingTlps
  reg skippingIncomingTlps;
  wire skippingIncomingTlps_D_IN, skippingIncomingTlps_EN;

  // register timestamp
  reg [31 : 0] timestamp;
  wire [31 : 0] timestamp_D_IN;
  wire timestamp_EN;

  // register tlpTraceLimitReg
  reg [10 : 0] tlpTraceLimitReg;
  wire [10 : 0] tlpTraceLimitReg_D_IN;
  wire tlpTraceLimitReg_EN;

  // register tlpTracingReg
  reg tlpTracingReg;
  wire tlpTracingReg_D_IN, tlpTracingReg_EN;

  // register toPcieTraceBram_serverAdapterA_cnt
  reg [2 : 0] toPcieTraceBram_serverAdapterA_cnt;
  wire [2 : 0] toPcieTraceBram_serverAdapterA_cnt_D_IN;
  wire toPcieTraceBram_serverAdapterA_cnt_EN;

  // register toPcieTraceBram_serverAdapterA_s1
  reg [1 : 0] toPcieTraceBram_serverAdapterA_s1;
  wire [1 : 0] toPcieTraceBram_serverAdapterA_s1_D_IN;
  wire toPcieTraceBram_serverAdapterA_s1_EN;

  // register toPcieTraceBram_serverAdapterB_cnt
  reg [2 : 0] toPcieTraceBram_serverAdapterB_cnt;
  wire [2 : 0] toPcieTraceBram_serverAdapterB_cnt_D_IN;
  wire toPcieTraceBram_serverAdapterB_cnt_EN;

  // register toPcieTraceBram_serverAdapterB_s1
  reg [1 : 0] toPcieTraceBram_serverAdapterB_s1;
  wire [1 : 0] toPcieTraceBram_serverAdapterB_s1_D_IN;
  wire toPcieTraceBram_serverAdapterB_s1_EN;

  // ports of submodule fromPcieTraceBram_memory
  wire [191 : 0] fromPcieTraceBram_memory_DIA,
		 fromPcieTraceBram_memory_DIB,
		 fromPcieTraceBram_memory_DOA,
		 fromPcieTraceBram_memory_DOB;
  wire [10 : 0] fromPcieTraceBram_memory_ADDRA,
		fromPcieTraceBram_memory_ADDRB;
  wire fromPcieTraceBram_memory_ENA,
       fromPcieTraceBram_memory_ENB,
       fromPcieTraceBram_memory_WEA,
       fromPcieTraceBram_memory_WEB;

  // ports of submodule fromPcieTraceBram_serverAdapterA_outDataCore
  wire [191 : 0] fromPcieTraceBram_serverAdapterA_outDataCore_D_IN,
		 fromPcieTraceBram_serverAdapterA_outDataCore_D_OUT;
  wire fromPcieTraceBram_serverAdapterA_outDataCore_CLR,
       fromPcieTraceBram_serverAdapterA_outDataCore_DEQ,
       fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N,
       fromPcieTraceBram_serverAdapterA_outDataCore_ENQ,
       fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule fromPcieTraceBram_serverAdapterB_outDataCore
  wire [191 : 0] fromPcieTraceBram_serverAdapterB_outDataCore_D_IN,
		 fromPcieTraceBram_serverAdapterB_outDataCore_D_OUT;
  wire fromPcieTraceBram_serverAdapterB_outDataCore_CLR,
       fromPcieTraceBram_serverAdapterB_outDataCore_DEQ,
       fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N,
       fromPcieTraceBram_serverAdapterB_outDataCore_ENQ,
       fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule isRootBroadcastMessage
  wire isRootBroadcastMessage_CLR,
       isRootBroadcastMessage_DEQ,
       isRootBroadcastMessage_D_IN,
       isRootBroadcastMessage_D_OUT,
       isRootBroadcastMessage_EMPTY_N,
       isRootBroadcastMessage_ENQ,
       isRootBroadcastMessage_FULL_N;

  // ports of submodule pcieTraceBramWrAddrFifo
  wire [10 : 0] pcieTraceBramWrAddrFifo_D_IN, pcieTraceBramWrAddrFifo_D_OUT;
  wire pcieTraceBramWrAddrFifo_CLR,
       pcieTraceBramWrAddrFifo_DEQ,
       pcieTraceBramWrAddrFifo_EMPTY_N,
       pcieTraceBramWrAddrFifo_ENQ,
       pcieTraceBramWrAddrFifo_FULL_N;

  // ports of submodule tlpBusResponseFifo
  wire [152 : 0] tlpBusResponseFifo_D_IN, tlpBusResponseFifo_D_OUT;
  wire tlpBusResponseFifo_CLR,
       tlpBusResponseFifo_DEQ,
       tlpBusResponseFifo_EMPTY_N,
       tlpBusResponseFifo_ENQ,
       tlpBusResponseFifo_FULL_N;

  // ports of submodule tlpFromBusFifo
  wire [152 : 0] tlpFromBusFifo_D_IN, tlpFromBusFifo_D_OUT;
  wire tlpFromBusFifo_CLR,
       tlpFromBusFifo_DEQ,
       tlpFromBusFifo_EMPTY_N,
       tlpFromBusFifo_ENQ,
       tlpFromBusFifo_FULL_N;

  // ports of submodule tlpToBusFifo
  wire [152 : 0] tlpToBusFifo_D_IN, tlpToBusFifo_D_OUT;
  wire tlpToBusFifo_CLR,
       tlpToBusFifo_DEQ,
       tlpToBusFifo_EMPTY_N,
       tlpToBusFifo_ENQ,
       tlpToBusFifo_FULL_N;

  // ports of submodule toPcieTraceBram_memory
  reg [191 : 0] toPcieTraceBram_memory_DIA;
  reg [10 : 0] toPcieTraceBram_memory_ADDRA;
  wire [191 : 0] toPcieTraceBram_memory_DIB,
		 toPcieTraceBram_memory_DOA,
		 toPcieTraceBram_memory_DOB;
  wire [10 : 0] toPcieTraceBram_memory_ADDRB;
  wire toPcieTraceBram_memory_ENA,
       toPcieTraceBram_memory_ENB,
       toPcieTraceBram_memory_WEA,
       toPcieTraceBram_memory_WEB;

  // ports of submodule toPcieTraceBram_serverAdapterA_outDataCore
  wire [191 : 0] toPcieTraceBram_serverAdapterA_outDataCore_D_IN,
		 toPcieTraceBram_serverAdapterA_outDataCore_D_OUT;
  wire toPcieTraceBram_serverAdapterA_outDataCore_CLR,
       toPcieTraceBram_serverAdapterA_outDataCore_DEQ,
       toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N,
       toPcieTraceBram_serverAdapterA_outDataCore_ENQ,
       toPcieTraceBram_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule toPcieTraceBram_serverAdapterB_outDataCore
  wire [191 : 0] toPcieTraceBram_serverAdapterB_outDataCore_D_IN,
		 toPcieTraceBram_serverAdapterB_outDataCore_D_OUT;
  wire toPcieTraceBram_serverAdapterB_outDataCore_CLR,
       toPcieTraceBram_serverAdapterB_outDataCore_DEQ,
       toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N,
       toPcieTraceBram_serverAdapterB_outDataCore_ENQ,
       toPcieTraceBram_serverAdapterB_outDataCore_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_bramMuxReg_respond_1,
       CAN_FIRE_RL_bscanBramMux_respond_1,
       WILL_FIRE_RL_bramMuxReg_respond,
       WILL_FIRE_RL_bscanBramMux_respond,
       WILL_FIRE_RL_doTracing,
       WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_setFirstEnq;

  // inputs to muxes for submodule ports
  wire [191 : 0] MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_1,
		 MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_2,
		 MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_1,
		 MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_2,
		 MUX_fromPcieTraceBram_memory_a_put_3__VAL_2,
		 MUX_toPcieTraceBram_memory_a_put_3__VAL_1,
		 MUX_toPcieTraceBram_memory_a_put_3__VAL_3;
  wire [10 : 0] MUX_pcieTraceBramWrAddrReg_write_1__VAL_1,
		MUX_pcieTraceBramWrAddrReg_write_1__VAL_2;
  wire MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2,
       MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2,
       MUX_fromPcieTraceBram_memory_a_put_1__SEL_1,
       MUX_pcieTraceBramWrAddrReg_write_1__SEL_1,
       MUX_toPcieTraceBram_memory_a_put_1__SEL_2;

  // remaining internal signals
  wire [31 : 0] fromttd_timestamp__h9873, tottd_timestamp__h10065;
  wire [10 : 0] v__h9749;
  wire [6 : 0] fromttd_source__h9874, tottd_source__h10066;
  wire [2 : 0] fromPcieTraceBram_serverAdapterA_cnt_6_PLUS_IF_ETC___d32,
	       fromPcieTraceBram_serverAdapterB_cnt_5_PLUS_IF_ETC___d91,
	       toPcieTraceBram_serverAdapterA_cnt_44_PLUS_IF__ETC___d150,
	       toPcieTraceBram_serverAdapterB_cnt_03_PLUS_IF__ETC___d209;
  wire [1 : 0] ab__h1840,
	       ab__h5158,
	       tlpdata_bscanBramServer_request_put_BITS_205_T_ETC__q1;
  wire fromPcieTraceBram_serverAdapterA_cnt_6_SLT_3___d293,
       toPcieTraceBram_serverAdapterA_cnt_44_SLT_3___d294;

  // actionvalue method pci_request_get
  assign pci_request_get = tlpToBusFifo_D_OUT ;
  assign RDY_pci_request_get = tlpToBusFifo_EMPTY_N ;

  // action method pci_response_put
  assign RDY_pci_response_put = tlpFromBusFifo_FULL_N ;

  // action method trace_put
  assign RDY_trace_put =
	     !fromPcie_whas && !toPcie_whas &&
	     (!tlpTracingReg ||
	      toPcieTraceBram_serverAdapterA_cnt_44_SLT_3___d294) ;

  // action method bus_request_put
  assign RDY_bus_request_put = tlpToBusFifo_FULL_N ;

  // actionvalue method bus_response_get
  assign bus_response_get = tlpBusResponseFifo_D_OUT ;
  assign RDY_bus_response_get =
	     tlpBusResponseFifo_EMPTY_N && isRootBroadcastMessage_EMPTY_N ;

  // action method tlpdata_tlpTracing__write
  assign RDY_tlpdata_tlpTracing__write = 1'd1 ;

  // value method tlpdata_tlpTracing__read
  assign tlpdata_tlpTracing__read = tlpTracingReg ;
  assign RDY_tlpdata_tlpTracing__read = 1'd1 ;

  // action method tlpdata_tlpTraceLimit__write
  assign RDY_tlpdata_tlpTraceLimit__write = 1'd1 ;

  // value method tlpdata_tlpTraceLimit__read
  assign tlpdata_tlpTraceLimit__read = tlpTraceLimitReg ;
  assign RDY_tlpdata_tlpTraceLimit__read = 1'd1 ;

  // action method tlpdata_pcieTraceBramWrAddr__write
  assign RDY_tlpdata_pcieTraceBramWrAddr__write =
	     pcieTraceBramWrAddrFifo_FULL_N ;

  // value method tlpdata_pcieTraceBramWrAddr__read
  assign tlpdata_pcieTraceBramWrAddr__read = pcieTraceBramWrAddrReg ;
  assign RDY_tlpdata_pcieTraceBramWrAddr__read = 1'd1 ;

  // action method tlpdata_bramServer_request_put
  assign RDY_tlpdata_bramServer_request_put =
	     fromPcieTraceBram_serverAdapterA_cnt_6_SLT_3___d293 &&
	     toPcieTraceBram_serverAdapterA_cnt_44_SLT_3___d294 ;

  // actionvalue method tlpdata_bramServer_response_get
  assign tlpdata_bramServer_response_get =
	     bramMuxReg_responseFifo_taggedReg[191:0] ;
  assign RDY_tlpdata_bramServer_response_get =
	     bramMuxReg_responseFifo_taggedReg[192] ;

  // action method tlpdata_bscanBramServer_request_put
  assign RDY_tlpdata_bscanBramServer_request_put =
	     (fromPcieTraceBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (toPcieTraceBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;

  // actionvalue method tlpdata_bscanBramServer_response_get
  assign tlpdata_bscanBramServer_response_get =
	     bscanBramMux_responseFifo_taggedReg[191:0] ;
  assign RDY_tlpdata_bscanBramServer_response_get =
	     bscanBramMux_responseFifo_taggedReg[192] ;

  // submodule fromPcieTraceBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd192),
	  .MEMSIZE(12'd2048)) fromPcieTraceBram_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(fromPcieTraceBram_memory_ADDRA),
						       .ADDRB(fromPcieTraceBram_memory_ADDRB),
						       .DIA(fromPcieTraceBram_memory_DIA),
						       .DIB(fromPcieTraceBram_memory_DIB),
						       .WEA(fromPcieTraceBram_memory_WEA),
						       .WEB(fromPcieTraceBram_memory_WEB),
						       .ENA(fromPcieTraceBram_memory_ENA),
						       .ENB(fromPcieTraceBram_memory_ENB),
						       .DOA(fromPcieTraceBram_memory_DOA),
						       .DOB(fromPcieTraceBram_memory_DOB));

  // submodule fromPcieTraceBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd192),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) fromPcieTraceBram_serverAdapterA_outDataCore(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(fromPcieTraceBram_serverAdapterA_outDataCore_D_IN),
									    .ENQ(fromPcieTraceBram_serverAdapterA_outDataCore_ENQ),
									    .DEQ(fromPcieTraceBram_serverAdapterA_outDataCore_DEQ),
									    .CLR(fromPcieTraceBram_serverAdapterA_outDataCore_CLR),
									    .D_OUT(fromPcieTraceBram_serverAdapterA_outDataCore_D_OUT),
									    .FULL_N(fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N),
									    .EMPTY_N(fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N));

  // submodule fromPcieTraceBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd192),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) fromPcieTraceBram_serverAdapterB_outDataCore(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(fromPcieTraceBram_serverAdapterB_outDataCore_D_IN),
									    .ENQ(fromPcieTraceBram_serverAdapterB_outDataCore_ENQ),
									    .DEQ(fromPcieTraceBram_serverAdapterB_outDataCore_DEQ),
									    .CLR(fromPcieTraceBram_serverAdapterB_outDataCore_CLR),
									    .D_OUT(fromPcieTraceBram_serverAdapterB_outDataCore_D_OUT),
									    .FULL_N(fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N),
									    .EMPTY_N(fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N));

  // submodule isRootBroadcastMessage
  FIFO2 #(.width(32'd1), .guarded(32'd1)) isRootBroadcastMessage(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(isRootBroadcastMessage_D_IN),
								 .ENQ(isRootBroadcastMessage_ENQ),
								 .DEQ(isRootBroadcastMessage_DEQ),
								 .CLR(isRootBroadcastMessage_CLR),
								 .D_OUT(isRootBroadcastMessage_D_OUT),
								 .FULL_N(isRootBroadcastMessage_FULL_N),
								 .EMPTY_N(isRootBroadcastMessage_EMPTY_N));

  // submodule pcieTraceBramWrAddrFifo
  FIFO2 #(.width(32'd11),
	  .guarded(32'd1)) pcieTraceBramWrAddrFifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(pcieTraceBramWrAddrFifo_D_IN),
						   .ENQ(pcieTraceBramWrAddrFifo_ENQ),
						   .DEQ(pcieTraceBramWrAddrFifo_DEQ),
						   .CLR(pcieTraceBramWrAddrFifo_CLR),
						   .D_OUT(pcieTraceBramWrAddrFifo_D_OUT),
						   .FULL_N(pcieTraceBramWrAddrFifo_FULL_N),
						   .EMPTY_N(pcieTraceBramWrAddrFifo_EMPTY_N));

  // submodule tlpBusResponseFifo
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlpBusResponseFifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(tlpBusResponseFifo_D_IN),
							       .ENQ(tlpBusResponseFifo_ENQ),
							       .DEQ(tlpBusResponseFifo_DEQ),
							       .CLR(tlpBusResponseFifo_CLR),
							       .D_OUT(tlpBusResponseFifo_D_OUT),
							       .FULL_N(tlpBusResponseFifo_FULL_N),
							       .EMPTY_N(tlpBusResponseFifo_EMPTY_N));

  // submodule tlpFromBusFifo
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlpFromBusFifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(tlpFromBusFifo_D_IN),
							   .ENQ(tlpFromBusFifo_ENQ),
							   .DEQ(tlpFromBusFifo_DEQ),
							   .CLR(tlpFromBusFifo_CLR),
							   .D_OUT(tlpFromBusFifo_D_OUT),
							   .FULL_N(tlpFromBusFifo_FULL_N),
							   .EMPTY_N(tlpFromBusFifo_EMPTY_N));

  // submodule tlpToBusFifo
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlpToBusFifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(tlpToBusFifo_D_IN),
							 .ENQ(tlpToBusFifo_ENQ),
							 .DEQ(tlpToBusFifo_DEQ),
							 .CLR(tlpToBusFifo_CLR),
							 .D_OUT(tlpToBusFifo_D_OUT),
							 .FULL_N(tlpToBusFifo_FULL_N),
							 .EMPTY_N(tlpToBusFifo_EMPTY_N));

  // submodule toPcieTraceBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd192),
	  .MEMSIZE(12'd2048)) toPcieTraceBram_memory(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(toPcieTraceBram_memory_ADDRA),
						     .ADDRB(toPcieTraceBram_memory_ADDRB),
						     .DIA(toPcieTraceBram_memory_DIA),
						     .DIB(toPcieTraceBram_memory_DIB),
						     .WEA(toPcieTraceBram_memory_WEA),
						     .WEB(toPcieTraceBram_memory_WEB),
						     .ENA(toPcieTraceBram_memory_ENA),
						     .ENB(toPcieTraceBram_memory_ENB),
						     .DOA(toPcieTraceBram_memory_DOA),
						     .DOB(toPcieTraceBram_memory_DOB));

  // submodule toPcieTraceBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd192),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) toPcieTraceBram_serverAdapterA_outDataCore(.RST(RST_N),
									  .CLK(CLK),
									  .D_IN(toPcieTraceBram_serverAdapterA_outDataCore_D_IN),
									  .ENQ(toPcieTraceBram_serverAdapterA_outDataCore_ENQ),
									  .DEQ(toPcieTraceBram_serverAdapterA_outDataCore_DEQ),
									  .CLR(toPcieTraceBram_serverAdapterA_outDataCore_CLR),
									  .D_OUT(toPcieTraceBram_serverAdapterA_outDataCore_D_OUT),
									  .FULL_N(toPcieTraceBram_serverAdapterA_outDataCore_FULL_N),
									  .EMPTY_N(toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N));

  // submodule toPcieTraceBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd192),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) toPcieTraceBram_serverAdapterB_outDataCore(.RST(RST_N),
									  .CLK(CLK),
									  .D_IN(toPcieTraceBram_serverAdapterB_outDataCore_D_IN),
									  .ENQ(toPcieTraceBram_serverAdapterB_outDataCore_ENQ),
									  .DEQ(toPcieTraceBram_serverAdapterB_outDataCore_DEQ),
									  .CLR(toPcieTraceBram_serverAdapterB_outDataCore_CLR),
									  .D_OUT(toPcieTraceBram_serverAdapterB_outDataCore_D_OUT),
									  .FULL_N(toPcieTraceBram_serverAdapterB_outDataCore_FULL_N),
									  .EMPTY_N(toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N));

  // rule RL_doTracing
  assign WILL_FIRE_RL_doTracing =
	     fromPcieTraceBram_serverAdapterA_cnt_6_SLT_3___d293 &&
	     toPcieTraceBram_serverAdapterA_cnt_44_SLT_3___d294 &&
	     (fromPcie_whas || toPcie_whas) &&
	     !EN_tlpdata_bramServer_request_put ;

  // rule RL_fromPcieTraceBram_serverAdapterA_outData_setFirstEnq
  assign WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_setFirstEnq =
	     !fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     fromPcieTraceBram_serverAdapterA_outData_enqData_whas ;

  // rule RL_fromPcieTraceBram_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_setFirstEnq =
	     !fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     fromPcieTraceBram_serverAdapterB_outData_enqData_whas ;

  // rule RL_toPcieTraceBram_serverAdapterA_outData_setFirstEnq
  assign WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_setFirstEnq =
	     !toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     toPcieTraceBram_serverAdapterA_outData_enqData_whas ;

  // rule RL_toPcieTraceBram_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_setFirstEnq =
	     !toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     toPcieTraceBram_serverAdapterB_outData_enqData_whas ;

  // rule RL_bramMuxReg_respond
  assign WILL_FIRE_RL_bramMuxReg_respond =
	     (fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N ||
	      fromPcieTraceBram_serverAdapterA_outData_enqData_whas) &&
	     fromPcieTraceBram_serverAdapterA_outData_outData_whas &&
	     (!bramMuxReg_responseFifo_taggedReg[192] ||
	      EN_tlpdata_bramServer_response_get) ;

  // rule RL_fromPcieTraceBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_enqAndDeq =
	     fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N &&
	     WILL_FIRE_RL_bramMuxReg_respond &&
	     fromPcieTraceBram_serverAdapterA_outData_enqData_whas ;

  // rule RL_bramMuxReg_respond_1
  assign CAN_FIRE_RL_bramMuxReg_respond_1 =
	     (!bramMuxReg_responseFifo_taggedReg[192] ||
	      EN_tlpdata_bramServer_response_get) &&
	     (toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N ||
	      toPcieTraceBram_serverAdapterA_outData_enqData_whas) &&
	     toPcieTraceBram_serverAdapterA_outData_outData_whas ;

  // rule RL_toPcieTraceBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_enqAndDeq =
	     toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     toPcieTraceBram_serverAdapterA_outDataCore_FULL_N &&
	     MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 &&
	     toPcieTraceBram_serverAdapterA_outData_enqData_whas ;

  // rule RL_bscanBramMux_respond
  assign WILL_FIRE_RL_bscanBramMux_respond =
	     (fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N ||
	      fromPcieTraceBram_serverAdapterB_outData_enqData_whas) &&
	     fromPcieTraceBram_serverAdapterB_outData_outData_whas &&
	     (!bscanBramMux_responseFifo_taggedReg[192] ||
	      EN_tlpdata_bscanBramServer_response_get) ;

  // rule RL_fromPcieTraceBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_enqAndDeq =
	     fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_bscanBramMux_respond &&
	     fromPcieTraceBram_serverAdapterB_outData_enqData_whas ;

  // rule RL_bscanBramMux_respond_1
  assign CAN_FIRE_RL_bscanBramMux_respond_1 =
	     (!bscanBramMux_responseFifo_taggedReg[192] ||
	      EN_tlpdata_bscanBramServer_response_get) &&
	     (toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N ||
	      toPcieTraceBram_serverAdapterB_outData_enqData_whas) &&
	     toPcieTraceBram_serverAdapterB_outData_outData_whas ;

  // rule RL_toPcieTraceBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_enqAndDeq =
	     toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     toPcieTraceBram_serverAdapterB_outDataCore_FULL_N &&
	     MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 &&
	     toPcieTraceBram_serverAdapterB_outData_enqData_whas ;

  // inputs to muxes for submodule ports
  assign MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 =
	     CAN_FIRE_RL_bramMuxReg_respond_1 &&
	     !WILL_FIRE_RL_bramMuxReg_respond ;
  assign MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 =
	     CAN_FIRE_RL_bscanBramMux_respond_1 &&
	     !WILL_FIRE_RL_bscanBramMux_respond ;
  assign MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 =
	     EN_tlpdata_bramServer_request_put &&
	     tlpdata_bramServer_request_put[203] == 1'd0 ;
  assign MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 =
	     EN_trace_put && tlpTracingReg ;
  assign MUX_toPcieTraceBram_memory_a_put_1__SEL_2 =
	     EN_tlpdata_bramServer_request_put &&
	     tlpdata_bramServer_request_put[203] == 1'd1 ;
  assign MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_1 =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_setFirstEnq ?
	       fromPcieTraceBram_memory_DOA :
	       fromPcieTraceBram_serverAdapterA_outDataCore_D_OUT ;
  assign MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_2 =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_setFirstEnq ?
	       toPcieTraceBram_memory_DOA :
	       toPcieTraceBram_serverAdapterA_outDataCore_D_OUT ;
  assign MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_1 =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_setFirstEnq ?
	       fromPcieTraceBram_memory_DOB :
	       fromPcieTraceBram_serverAdapterB_outDataCore_D_OUT ;
  assign MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_2 =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_setFirstEnq ?
	       toPcieTraceBram_memory_DOB :
	       toPcieTraceBram_serverAdapterB_outDataCore_D_OUT ;
  assign MUX_fromPcieTraceBram_memory_a_put_3__VAL_2 =
	     { fromttd_timestamp__h9873,
	       fromttd_source__h9874,
	       fromPcie_whas && fromPcie_whas &&
	       tlpBusResponseFifo_D_OUT[152],
	       fromPcie_whas && fromPcie_whas &&
	       tlpBusResponseFifo_D_OUT[151],
	       fromPcie_whas ?
		 (fromPcie_whas ? tlpBusResponseFifo_D_OUT[150:0] : 151'd0) :
		 151'd0 } ;
  assign MUX_pcieTraceBramWrAddrReg_write_1__VAL_1 =
	     pcieTraceBramWrAddrReg + 11'd1 ;
  assign MUX_pcieTraceBramWrAddrReg_write_1__VAL_2 = v__h9749 + 11'd1 ;
  assign MUX_toPcieTraceBram_memory_a_put_3__VAL_1 =
	     { timestamp, trace_put[159:0] } ;
  assign MUX_toPcieTraceBram_memory_a_put_3__VAL_3 =
	     { tottd_timestamp__h10065,
	       tottd_source__h10066,
	       toPcie_whas && toPcie_whas && bus_request_put[152],
	       toPcie_whas && toPcie_whas && bus_request_put[151],
	       toPcie_whas ?
		 (toPcie_whas ? bus_request_put[150:0] : 151'd0) :
		 151'd0 } ;

  // inlined wires
  assign fromPcieTraceBram_serverAdapterA_outData_enqData_whas =
	     (!fromPcieTraceBram_serverAdapterA_s1[0] ||
	      fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N) &&
	     fromPcieTraceBram_serverAdapterA_s1[1] &&
	     fromPcieTraceBram_serverAdapterA_s1[0] ;
  assign fromPcieTraceBram_serverAdapterA_outData_outData_whas =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_setFirstEnq ||
	     fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N ;
  assign fromPcieTraceBram_serverAdapterA_cnt_1_whas =
	     (MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ||
	      WILL_FIRE_RL_doTracing) &&
	     (!ab__h1840[1] || ab__h1840[0]) ;
  assign fromPcieTraceBram_serverAdapterA_s1_1_wget =
	     { 1'd1, !ab__h1840[1] || ab__h1840[0] } ;
  assign fromPcieTraceBram_serverAdapterA_s1_1_whas =
	     MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ||
	     WILL_FIRE_RL_doTracing ;
  assign fromPcieTraceBram_serverAdapterB_outData_enqData_whas =
	     (!fromPcieTraceBram_serverAdapterB_s1[0] ||
	      fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N) &&
	     fromPcieTraceBram_serverAdapterB_s1[1] &&
	     fromPcieTraceBram_serverAdapterB_s1[0] ;
  assign fromPcieTraceBram_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_setFirstEnq ||
	     fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N ;
  assign fromPcieTraceBram_serverAdapterB_cnt_1_whas =
	     EN_tlpdata_bscanBramServer_request_put &&
	     tlpdata_bscanBramServer_request_put[203] == 1'd0 &&
	     (!tlpdata_bscanBramServer_request_put_BITS_205_T_ETC__q1[1] ||
	      tlpdata_bscanBramServer_request_put_BITS_205_T_ETC__q1[0]) ;
  assign fromPcieTraceBram_serverAdapterB_writeWithResp_wget =
	     tlpdata_bscanBramServer_request_put[205:204] ;
  assign fromPcieTraceBram_serverAdapterB_writeWithResp_whas =
	     EN_tlpdata_bscanBramServer_request_put &&
	     tlpdata_bscanBramServer_request_put[203] == 1'd0 ;
  assign fromPcieTraceBram_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !fromPcieTraceBram_serverAdapterB_writeWithResp_wget[1] ||
	       fromPcieTraceBram_serverAdapterB_writeWithResp_wget[0] } ;
  assign toPcieTraceBram_serverAdapterA_outData_enqData_whas =
	     (!toPcieTraceBram_serverAdapterA_s1[0] ||
	      toPcieTraceBram_serverAdapterA_outDataCore_FULL_N) &&
	     toPcieTraceBram_serverAdapterA_s1[1] &&
	     toPcieTraceBram_serverAdapterA_s1[0] ;
  assign toPcieTraceBram_serverAdapterA_outData_outData_whas =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_setFirstEnq ||
	     toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N ;
  assign toPcieTraceBram_serverAdapterA_cnt_1_whas =
	     (MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 ||
	      MUX_toPcieTraceBram_memory_a_put_1__SEL_2 ||
	      WILL_FIRE_RL_doTracing) &&
	     (!ab__h5158[1] || ab__h5158[0]) ;
  assign toPcieTraceBram_serverAdapterA_writeWithResp_whas =
	     MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 ||
	     MUX_toPcieTraceBram_memory_a_put_1__SEL_2 ||
	     WILL_FIRE_RL_doTracing ;
  assign toPcieTraceBram_serverAdapterA_s1_1_wget =
	     { 1'd1, !ab__h5158[1] || ab__h5158[0] } ;
  assign toPcieTraceBram_serverAdapterB_outData_enqData_whas =
	     (!toPcieTraceBram_serverAdapterB_s1[0] ||
	      toPcieTraceBram_serverAdapterB_outDataCore_FULL_N) &&
	     toPcieTraceBram_serverAdapterB_s1[1] &&
	     toPcieTraceBram_serverAdapterB_s1[0] ;
  assign toPcieTraceBram_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_setFirstEnq ||
	     toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N ;
  assign toPcieTraceBram_serverAdapterB_cnt_1_whas =
	     EN_tlpdata_bscanBramServer_request_put &&
	     tlpdata_bscanBramServer_request_put[203] == 1'd1 &&
	     (!fromPcieTraceBram_serverAdapterB_writeWithResp_wget[1] ||
	      fromPcieTraceBram_serverAdapterB_writeWithResp_wget[0]) ;
  assign toPcieTraceBram_serverAdapterB_writeWithResp_whas =
	     EN_tlpdata_bscanBramServer_request_put &&
	     tlpdata_bscanBramServer_request_put[203] == 1'd1 ;
  assign bramMuxReg_responseFifo_rw_enq_wget =
	     WILL_FIRE_RL_bramMuxReg_respond ?
	       MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_1 :
	       MUX_bramMuxReg_responseFifo_rw_enq_wset_1__VAL_2 ;
  assign bramMuxReg_responseFifo_rw_enq_whas =
	     WILL_FIRE_RL_bramMuxReg_respond ||
	     CAN_FIRE_RL_bramMuxReg_respond_1 &&
	     !WILL_FIRE_RL_bramMuxReg_respond ;
  assign bscanBramMux_responseFifo_rw_enq_wget =
	     WILL_FIRE_RL_bscanBramMux_respond ?
	       MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_1 :
	       MUX_bscanBramMux_responseFifo_rw_enq_wset_1__VAL_2 ;
  assign bscanBramMux_responseFifo_rw_enq_whas =
	     WILL_FIRE_RL_bscanBramMux_respond ||
	     CAN_FIRE_RL_bscanBramMux_respond_1 &&
	     !WILL_FIRE_RL_bscanBramMux_respond ;
  assign fromPcie_whas =
	     EN_bus_response_get && tlpTracingReg &&
	     (!tlpBusResponseFifo_D_OUT[152] ||
	      !isRootBroadcastMessage_D_OUT) &&
	     (!skippingIncomingTlps || tlpBusResponseFifo_D_OUT[152]) ;
  assign toPcie_whas = EN_bus_request_put && tlpTracingReg ;

  // register bramMuxReg_responseFifo_taggedReg
  assign bramMuxReg_responseFifo_taggedReg_D_IN =
	     { bramMuxReg_responseFifo_rw_enq_whas,
	       bramMuxReg_responseFifo_rw_enq_wget } ;
  assign bramMuxReg_responseFifo_taggedReg_EN =
	     bramMuxReg_responseFifo_rw_enq_whas ||
	     EN_tlpdata_bramServer_response_get ;

  // register bscanBramMux_responseFifo_taggedReg
  assign bscanBramMux_responseFifo_taggedReg_D_IN =
	     { bscanBramMux_responseFifo_rw_enq_whas,
	       bscanBramMux_responseFifo_rw_enq_wget } ;
  assign bscanBramMux_responseFifo_taggedReg_EN =
	     bscanBramMux_responseFifo_rw_enq_whas ||
	     EN_tlpdata_bscanBramServer_response_get ;

  // register fromPcieTraceBram_serverAdapterA_cnt
  assign fromPcieTraceBram_serverAdapterA_cnt_D_IN =
	     fromPcieTraceBram_serverAdapterA_cnt_6_PLUS_IF_ETC___d32 ;
  assign fromPcieTraceBram_serverAdapterA_cnt_EN =
	     fromPcieTraceBram_serverAdapterA_cnt_1_whas ||
	     WILL_FIRE_RL_bramMuxReg_respond ;

  // register fromPcieTraceBram_serverAdapterA_s1
  assign fromPcieTraceBram_serverAdapterA_s1_D_IN =
	     { fromPcieTraceBram_serverAdapterA_s1_1_whas &&
	       fromPcieTraceBram_serverAdapterA_s1_1_wget[1],
	       fromPcieTraceBram_serverAdapterA_s1_1_wget[0] } ;
  assign fromPcieTraceBram_serverAdapterA_s1_EN = 1'd1 ;

  // register fromPcieTraceBram_serverAdapterB_cnt
  assign fromPcieTraceBram_serverAdapterB_cnt_D_IN =
	     fromPcieTraceBram_serverAdapterB_cnt_5_PLUS_IF_ETC___d91 ;
  assign fromPcieTraceBram_serverAdapterB_cnt_EN =
	     fromPcieTraceBram_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_bscanBramMux_respond ;

  // register fromPcieTraceBram_serverAdapterB_s1
  assign fromPcieTraceBram_serverAdapterB_s1_D_IN =
	     { fromPcieTraceBram_serverAdapterB_writeWithResp_whas &&
	       fromPcieTraceBram_serverAdapterB_s1_1_wget[1],
	       fromPcieTraceBram_serverAdapterB_s1_1_wget[0] } ;
  assign fromPcieTraceBram_serverAdapterB_s1_EN = 1'd1 ;

  // register pcieTraceBramWrAddrReg
  assign pcieTraceBramWrAddrReg_D_IN =
	     MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 ?
	       MUX_pcieTraceBramWrAddrReg_write_1__VAL_1 :
	       MUX_pcieTraceBramWrAddrReg_write_1__VAL_2 ;
  assign pcieTraceBramWrAddrReg_EN =
	     EN_trace_put && tlpTracingReg || WILL_FIRE_RL_doTracing ;

  // register skippingIncomingTlps
  assign skippingIncomingTlps_D_IN =
	     tlpBusResponseFifo_D_OUT[152] && isRootBroadcastMessage_D_OUT ;
  assign skippingIncomingTlps_EN =
	     EN_bus_response_get && tlpTracingReg &&
	     (!skippingIncomingTlps || tlpBusResponseFifo_D_OUT[152]) ;

  // register timestamp
  assign timestamp_D_IN = timestamp + 32'd1 ;
  assign timestamp_EN = 1'd1 ;

  // register tlpTraceLimitReg
  assign tlpTraceLimitReg_D_IN = tlpdata_tlpTraceLimit__write_1 ;
  assign tlpTraceLimitReg_EN = EN_tlpdata_tlpTraceLimit__write ;

  // register tlpTracingReg
  assign tlpTracingReg_D_IN = tlpdata_tlpTracing__write_1 ;
  assign tlpTracingReg_EN = EN_tlpdata_tlpTracing__write ;

  // register toPcieTraceBram_serverAdapterA_cnt
  assign toPcieTraceBram_serverAdapterA_cnt_D_IN =
	     toPcieTraceBram_serverAdapterA_cnt_44_PLUS_IF__ETC___d150 ;
  assign toPcieTraceBram_serverAdapterA_cnt_EN =
	     toPcieTraceBram_serverAdapterA_cnt_1_whas ||
	     MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 ;

  // register toPcieTraceBram_serverAdapterA_s1
  assign toPcieTraceBram_serverAdapterA_s1_D_IN =
	     { toPcieTraceBram_serverAdapterA_writeWithResp_whas &&
	       toPcieTraceBram_serverAdapterA_s1_1_wget[1],
	       toPcieTraceBram_serverAdapterA_s1_1_wget[0] } ;
  assign toPcieTraceBram_serverAdapterA_s1_EN = 1'd1 ;

  // register toPcieTraceBram_serverAdapterB_cnt
  assign toPcieTraceBram_serverAdapterB_cnt_D_IN =
	     toPcieTraceBram_serverAdapterB_cnt_03_PLUS_IF__ETC___d209 ;
  assign toPcieTraceBram_serverAdapterB_cnt_EN =
	     toPcieTraceBram_serverAdapterB_cnt_1_whas ||
	     MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 ;

  // register toPcieTraceBram_serverAdapterB_s1
  assign toPcieTraceBram_serverAdapterB_s1_D_IN =
	     { toPcieTraceBram_serverAdapterB_writeWithResp_whas &&
	       fromPcieTraceBram_serverAdapterB_s1_1_wget[1],
	       fromPcieTraceBram_serverAdapterB_s1_1_wget[0] } ;
  assign toPcieTraceBram_serverAdapterB_s1_EN = 1'd1 ;

  // submodule fromPcieTraceBram_memory
  assign fromPcieTraceBram_memory_ADDRA =
	     MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ?
	       tlpdata_bramServer_request_put[202:192] :
	       v__h9749 ;
  assign fromPcieTraceBram_memory_ADDRB =
	     tlpdata_bscanBramServer_request_put[202:192] ;
  assign fromPcieTraceBram_memory_DIA =
	     MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ?
	       tlpdata_bramServer_request_put[191:0] :
	       MUX_fromPcieTraceBram_memory_a_put_3__VAL_2 ;
  assign fromPcieTraceBram_memory_DIB =
	     tlpdata_bscanBramServer_request_put[191:0] ;
  assign fromPcieTraceBram_memory_WEA =
	     !MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ||
	     tlpdata_bramServer_request_put[205] ;
  assign fromPcieTraceBram_memory_WEB =
	     tlpdata_bscanBramServer_request_put[205] ;
  assign fromPcieTraceBram_memory_ENA =
	     EN_tlpdata_bramServer_request_put &&
	     tlpdata_bramServer_request_put[203] == 1'd0 ||
	     WILL_FIRE_RL_doTracing ;
  assign fromPcieTraceBram_memory_ENB =
	     fromPcieTraceBram_serverAdapterB_writeWithResp_whas ;

  // submodule fromPcieTraceBram_serverAdapterA_outDataCore
  assign fromPcieTraceBram_serverAdapterA_outDataCore_D_IN =
	     fromPcieTraceBram_memory_DOA ;
  assign fromPcieTraceBram_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_enqAndDeq ||
	     fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_bramMuxReg_respond &&
	     fromPcieTraceBram_serverAdapterA_outData_enqData_whas ;
  assign fromPcieTraceBram_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterA_outData_enqAndDeq ||
	     fromPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_bramMuxReg_respond &&
	     !fromPcieTraceBram_serverAdapterA_outData_enqData_whas ;
  assign fromPcieTraceBram_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule fromPcieTraceBram_serverAdapterB_outDataCore
  assign fromPcieTraceBram_serverAdapterB_outDataCore_D_IN =
	     fromPcieTraceBram_memory_DOB ;
  assign fromPcieTraceBram_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_enqAndDeq ||
	     fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_bscanBramMux_respond &&
	     fromPcieTraceBram_serverAdapterB_outData_enqData_whas ;
  assign fromPcieTraceBram_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_fromPcieTraceBram_serverAdapterB_outData_enqAndDeq ||
	     fromPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_bscanBramMux_respond &&
	     !fromPcieTraceBram_serverAdapterB_outData_enqData_whas ;
  assign fromPcieTraceBram_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule isRootBroadcastMessage
  assign isRootBroadcastMessage_D_IN =
	     tlpFromBusFifo_D_OUT[152] &&
	     tlpFromBusFifo_D_OUT[150:144] == 7'd0 &&
	     tlpFromBusFifo_D_OUT[124:120] != 5'd10 ;
  assign isRootBroadcastMessage_ENQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign isRootBroadcastMessage_DEQ = EN_bus_response_get ;
  assign isRootBroadcastMessage_CLR = 1'b0 ;

  // submodule pcieTraceBramWrAddrFifo
  assign pcieTraceBramWrAddrFifo_D_IN = tlpdata_pcieTraceBramWrAddr__write_1 ;
  assign pcieTraceBramWrAddrFifo_ENQ = EN_tlpdata_pcieTraceBramWrAddr__write ;
  assign pcieTraceBramWrAddrFifo_DEQ =
	     WILL_FIRE_RL_doTracing && pcieTraceBramWrAddrFifo_EMPTY_N ;
  assign pcieTraceBramWrAddrFifo_CLR = 1'b0 ;

  // submodule tlpBusResponseFifo
  assign tlpBusResponseFifo_D_IN = tlpFromBusFifo_D_OUT ;
  assign tlpBusResponseFifo_ENQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign tlpBusResponseFifo_DEQ = EN_bus_response_get ;
  assign tlpBusResponseFifo_CLR = 1'b0 ;

  // submodule tlpFromBusFifo
  assign tlpFromBusFifo_D_IN = pci_response_put ;
  assign tlpFromBusFifo_ENQ = EN_pci_response_put ;
  assign tlpFromBusFifo_DEQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign tlpFromBusFifo_CLR = 1'b0 ;

  // submodule tlpToBusFifo
  assign tlpToBusFifo_D_IN = bus_request_put ;
  assign tlpToBusFifo_ENQ = EN_bus_request_put ;
  assign tlpToBusFifo_DEQ = EN_pci_request_get ;
  assign tlpToBusFifo_CLR = 1'b0 ;

  // submodule toPcieTraceBram_memory
  always@(MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 or
	  pcieTraceBramWrAddrReg or
	  MUX_toPcieTraceBram_memory_a_put_1__SEL_2 or
	  tlpdata_bramServer_request_put or
	  WILL_FIRE_RL_doTracing or v__h9749)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pcieTraceBramWrAddrReg_write_1__SEL_1:
	  toPcieTraceBram_memory_ADDRA = pcieTraceBramWrAddrReg;
      MUX_toPcieTraceBram_memory_a_put_1__SEL_2:
	  toPcieTraceBram_memory_ADDRA =
	      tlpdata_bramServer_request_put[202:192];
      WILL_FIRE_RL_doTracing: toPcieTraceBram_memory_ADDRA = v__h9749;
      default: toPcieTraceBram_memory_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign toPcieTraceBram_memory_ADDRB =
	     tlpdata_bscanBramServer_request_put[202:192] ;
  always@(MUX_pcieTraceBramWrAddrReg_write_1__SEL_1 or
	  MUX_toPcieTraceBram_memory_a_put_3__VAL_1 or
	  MUX_toPcieTraceBram_memory_a_put_1__SEL_2 or
	  tlpdata_bramServer_request_put or
	  WILL_FIRE_RL_doTracing or MUX_toPcieTraceBram_memory_a_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pcieTraceBramWrAddrReg_write_1__SEL_1:
	  toPcieTraceBram_memory_DIA =
	      MUX_toPcieTraceBram_memory_a_put_3__VAL_1;
      MUX_toPcieTraceBram_memory_a_put_1__SEL_2:
	  toPcieTraceBram_memory_DIA = tlpdata_bramServer_request_put[191:0];
      WILL_FIRE_RL_doTracing:
	  toPcieTraceBram_memory_DIA =
	      MUX_toPcieTraceBram_memory_a_put_3__VAL_3;
      default: toPcieTraceBram_memory_DIA =
		   192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toPcieTraceBram_memory_DIB =
	     tlpdata_bscanBramServer_request_put[191:0] ;
  assign toPcieTraceBram_memory_WEA =
	     !MUX_toPcieTraceBram_memory_a_put_1__SEL_2 ||
	     tlpdata_bramServer_request_put[205] ;
  assign toPcieTraceBram_memory_WEB =
	     tlpdata_bscanBramServer_request_put[205] ;
  assign toPcieTraceBram_memory_ENA =
	     EN_trace_put && tlpTracingReg ||
	     EN_tlpdata_bramServer_request_put &&
	     tlpdata_bramServer_request_put[203] == 1'd1 ||
	     WILL_FIRE_RL_doTracing ;
  assign toPcieTraceBram_memory_ENB =
	     toPcieTraceBram_serverAdapterB_writeWithResp_whas ;

  // submodule toPcieTraceBram_serverAdapterA_outDataCore
  assign toPcieTraceBram_serverAdapterA_outDataCore_D_IN =
	     toPcieTraceBram_memory_DOA ;
  assign toPcieTraceBram_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_enqAndDeq ||
	     toPcieTraceBram_serverAdapterA_outDataCore_FULL_N &&
	     !MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 &&
	     toPcieTraceBram_serverAdapterA_outData_enqData_whas ;
  assign toPcieTraceBram_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterA_outData_enqAndDeq ||
	     toPcieTraceBram_serverAdapterA_outDataCore_EMPTY_N &&
	     MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 &&
	     !toPcieTraceBram_serverAdapterA_outData_enqData_whas ;
  assign toPcieTraceBram_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule toPcieTraceBram_serverAdapterB_outDataCore
  assign toPcieTraceBram_serverAdapterB_outDataCore_D_IN =
	     toPcieTraceBram_memory_DOB ;
  assign toPcieTraceBram_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_enqAndDeq ||
	     toPcieTraceBram_serverAdapterB_outDataCore_FULL_N &&
	     !MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 &&
	     toPcieTraceBram_serverAdapterB_outData_enqData_whas ;
  assign toPcieTraceBram_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_toPcieTraceBram_serverAdapterB_outData_enqAndDeq ||
	     toPcieTraceBram_serverAdapterB_outDataCore_EMPTY_N &&
	     MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 &&
	     !toPcieTraceBram_serverAdapterB_outData_enqData_whas ;
  assign toPcieTraceBram_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // remaining internal signals
  assign ab__h1840 =
	     MUX_fromPcieTraceBram_memory_a_put_1__SEL_1 ?
	       tlpdata_bramServer_request_put[205:204] :
	       2'd2 ;
  assign ab__h5158 =
	     MUX_toPcieTraceBram_memory_a_put_1__SEL_2 ?
	       tlpdata_bramServer_request_put[205:204] :
	       2'd2 ;
  assign fromPcieTraceBram_serverAdapterA_cnt_6_PLUS_IF_ETC___d32 =
	     fromPcieTraceBram_serverAdapterA_cnt +
	     (fromPcieTraceBram_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_bramMuxReg_respond ? 3'd7 : 3'd0) ;
  assign fromPcieTraceBram_serverAdapterA_cnt_6_SLT_3___d293 =
	     (fromPcieTraceBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign fromPcieTraceBram_serverAdapterB_cnt_5_PLUS_IF_ETC___d91 =
	     fromPcieTraceBram_serverAdapterB_cnt +
	     (fromPcieTraceBram_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_bscanBramMux_respond ? 3'd7 : 3'd0) ;
  assign fromttd_source__h9874 = fromPcie_whas ? 7'h04 : 7'd0 ;
  assign fromttd_timestamp__h9873 = fromPcie_whas ? timestamp : 32'd0 ;
  assign tlpdata_bscanBramServer_request_put_BITS_205_T_ETC__q1 =
	     tlpdata_bscanBramServer_request_put[205:204] ;
  assign toPcieTraceBram_serverAdapterA_cnt_44_PLUS_IF__ETC___d150 =
	     toPcieTraceBram_serverAdapterA_cnt +
	     (toPcieTraceBram_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (MUX_bramMuxReg_responseFifo_rw_enq_wset_1__SEL_2 ?
		3'd7 :
		3'd0) ;
  assign toPcieTraceBram_serverAdapterA_cnt_44_SLT_3___d294 =
	     (toPcieTraceBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign toPcieTraceBram_serverAdapterB_cnt_03_PLUS_IF__ETC___d209 =
	     toPcieTraceBram_serverAdapterB_cnt +
	     (toPcieTraceBram_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (MUX_bscanBramMux_responseFifo_rw_enq_wset_1__SEL_2 ?
		3'd7 :
		3'd0) ;
  assign tottd_source__h10066 = toPcie_whas ? 7'h08 : 7'd0 ;
  assign tottd_timestamp__h10065 = toPcie_whas ? timestamp : 32'd0 ;
  assign v__h9749 =
	     pcieTraceBramWrAddrFifo_EMPTY_N ?
	       pcieTraceBramWrAddrFifo_D_OUT :
	       pcieTraceBramWrAddrReg ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bramMuxReg_responseFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	bscanBramMux_responseFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fromPcieTraceBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fromPcieTraceBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	fromPcieTraceBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fromPcieTraceBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pcieTraceBramWrAddrReg <= `BSV_ASSIGNMENT_DELAY 11'd0;
	skippingIncomingTlps <= `BSV_ASSIGNMENT_DELAY 1'd0;
	timestamp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tlpTraceLimitReg <= `BSV_ASSIGNMENT_DELAY 11'd0;
	tlpTracingReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toPcieTraceBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	toPcieTraceBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	toPcieTraceBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	toPcieTraceBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (bramMuxReg_responseFifo_taggedReg_EN)
	  bramMuxReg_responseFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      bramMuxReg_responseFifo_taggedReg_D_IN;
	if (bscanBramMux_responseFifo_taggedReg_EN)
	  bscanBramMux_responseFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      bscanBramMux_responseFifo_taggedReg_D_IN;
	if (fromPcieTraceBram_serverAdapterA_cnt_EN)
	  fromPcieTraceBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_serverAdapterA_cnt_D_IN;
	if (fromPcieTraceBram_serverAdapterA_s1_EN)
	  fromPcieTraceBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_serverAdapterA_s1_D_IN;
	if (fromPcieTraceBram_serverAdapterB_cnt_EN)
	  fromPcieTraceBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_serverAdapterB_cnt_D_IN;
	if (fromPcieTraceBram_serverAdapterB_s1_EN)
	  fromPcieTraceBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_serverAdapterB_s1_D_IN;
	if (pcieTraceBramWrAddrReg_EN)
	  pcieTraceBramWrAddrReg <= `BSV_ASSIGNMENT_DELAY
	      pcieTraceBramWrAddrReg_D_IN;
	if (skippingIncomingTlps_EN)
	  skippingIncomingTlps <= `BSV_ASSIGNMENT_DELAY
	      skippingIncomingTlps_D_IN;
	if (timestamp_EN) timestamp <= `BSV_ASSIGNMENT_DELAY timestamp_D_IN;
	if (tlpTraceLimitReg_EN)
	  tlpTraceLimitReg <= `BSV_ASSIGNMENT_DELAY tlpTraceLimitReg_D_IN;
	if (tlpTracingReg_EN)
	  tlpTracingReg <= `BSV_ASSIGNMENT_DELAY tlpTracingReg_D_IN;
	if (toPcieTraceBram_serverAdapterA_cnt_EN)
	  toPcieTraceBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_serverAdapterA_cnt_D_IN;
	if (toPcieTraceBram_serverAdapterA_s1_EN)
	  toPcieTraceBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_serverAdapterA_s1_D_IN;
	if (toPcieTraceBram_serverAdapterB_cnt_EN)
	  toPcieTraceBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_serverAdapterB_cnt_D_IN;
	if (toPcieTraceBram_serverAdapterB_s1_EN)
	  toPcieTraceBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_serverAdapterB_s1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bramMuxReg_responseFifo_taggedReg =
	193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    bscanBramMux_responseFifo_taggedReg =
	193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fromPcieTraceBram_serverAdapterA_cnt = 3'h2;
    fromPcieTraceBram_serverAdapterA_s1 = 2'h2;
    fromPcieTraceBram_serverAdapterB_cnt = 3'h2;
    fromPcieTraceBram_serverAdapterB_s1 = 2'h2;
    pcieTraceBramWrAddrReg = 11'h2AA;
    skippingIncomingTlps = 1'h0;
    timestamp = 32'hAAAAAAAA;
    tlpTraceLimitReg = 11'h2AA;
    tlpTracingReg = 1'h0;
    toPcieTraceBram_serverAdapterA_cnt = 3'h2;
    toPcieTraceBram_serverAdapterA_s1 = 2'h2;
    toPcieTraceBram_serverAdapterB_cnt = 3'h2;
    toPcieTraceBram_serverAdapterB_s1 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (fromPcieTraceBram_serverAdapterA_s1[1] &&
	  !fromPcieTraceBram_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (fromPcieTraceBram_serverAdapterB_s1[1] &&
	  !fromPcieTraceBram_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (toPcieTraceBram_serverAdapterA_s1[1] &&
	  !toPcieTraceBram_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (toPcieTraceBram_serverAdapterB_s1[1] &&
	  !toPcieTraceBram_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkPcieTracer

