//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:13:35 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// outToBus_get                   O   153 reg
// RDY_outToBus_get               O     1 reg
// RDY_in_0_put                   O     1 reg
// RDY_in_1_put                   O     1 reg
// RDY_in_2_put                   O     1 reg
// RDY_in_3_put                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// in_0_put                       I   153 reg
// in_1_put                       I   153 reg
// in_2_put                       I   153 reg
// in_3_put                       I   153 reg
// EN_in_0_put                    I     1
// EN_in_1_put                    I     1
// EN_in_2_put                    I     1
// EN_in_3_put                    I     1
// EN_outToBus_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTLPArbiter(CLK,
		    RST_N,

		    EN_outToBus_get,
		    outToBus_get,
		    RDY_outToBus_get,

		    in_0_put,
		    EN_in_0_put,
		    RDY_in_0_put,

		    in_1_put,
		    EN_in_1_put,
		    RDY_in_1_put,

		    in_2_put,
		    EN_in_2_put,
		    RDY_in_2_put,

		    in_3_put,
		    EN_in_3_put,
		    RDY_in_3_put);
  input  CLK;
  input  RST_N;

  // actionvalue method outToBus_get
  input  EN_outToBus_get;
  output [152 : 0] outToBus_get;
  output RDY_outToBus_get;

  // action method in_0_put
  input  [152 : 0] in_0_put;
  input  EN_in_0_put;
  output RDY_in_0_put;

  // action method in_1_put
  input  [152 : 0] in_1_put;
  input  EN_in_1_put;
  output RDY_in_1_put;

  // action method in_2_put
  input  [152 : 0] in_2_put;
  input  EN_in_2_put;
  output RDY_in_2_put;

  // action method in_3_put
  input  [152 : 0] in_3_put;
  input  EN_in_3_put;
  output RDY_in_3_put;

  // signals for module outputs
  wire [152 : 0] outToBus_get;
  wire RDY_in_0_put,
       RDY_in_1_put,
       RDY_in_2_put,
       RDY_in_3_put,
       RDY_outToBus_get;

  // register routeFrom
  reg [2 : 0] routeFrom;
  wire [2 : 0] routeFrom_D_IN;
  wire routeFrom_EN;

  // ports of submodule tlp_in_fifo_0
  wire [152 : 0] tlp_in_fifo_0_D_IN, tlp_in_fifo_0_D_OUT;
  wire tlp_in_fifo_0_CLR,
       tlp_in_fifo_0_DEQ,
       tlp_in_fifo_0_EMPTY_N,
       tlp_in_fifo_0_ENQ,
       tlp_in_fifo_0_FULL_N;

  // ports of submodule tlp_in_fifo_1
  wire [152 : 0] tlp_in_fifo_1_D_IN, tlp_in_fifo_1_D_OUT;
  wire tlp_in_fifo_1_CLR,
       tlp_in_fifo_1_DEQ,
       tlp_in_fifo_1_EMPTY_N,
       tlp_in_fifo_1_ENQ,
       tlp_in_fifo_1_FULL_N;

  // ports of submodule tlp_in_fifo_2
  wire [152 : 0] tlp_in_fifo_2_D_IN, tlp_in_fifo_2_D_OUT;
  wire tlp_in_fifo_2_CLR,
       tlp_in_fifo_2_DEQ,
       tlp_in_fifo_2_EMPTY_N,
       tlp_in_fifo_2_ENQ,
       tlp_in_fifo_2_FULL_N;

  // ports of submodule tlp_in_fifo_3
  wire [152 : 0] tlp_in_fifo_3_D_IN, tlp_in_fifo_3_D_OUT;
  wire tlp_in_fifo_3_CLR,
       tlp_in_fifo_3_DEQ,
       tlp_in_fifo_3_EMPTY_N,
       tlp_in_fifo_3_ENQ,
       tlp_in_fifo_3_FULL_N;

  // ports of submodule tlp_out_fifo
  wire [152 : 0] tlp_out_fifo_D_IN, tlp_out_fifo_D_OUT;
  wire tlp_out_fifo_CLR,
       tlp_out_fifo_DEQ,
       tlp_out_fifo_EMPTY_N,
       tlp_out_fifo_ENQ,
       tlp_out_fifo_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_arbitrate_outgoing_TLP;

  // remaining internal signals
  reg [127 : 0] SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76;
  reg [15 : 0] SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70;
  reg [6 : 0] SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64;
  reg SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58,
      SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52,
      SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9;
  wire [152 : 0] IF_routeFrom_BIT_2_THEN_SEL_ARR_tlp_in_fifo_0__ETC___d79,
		 _dfoo4;
  wire [2 : 0] _dfoo6;
  wire NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d101,
       NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d105,
       NOT_tlp_in_fifo_2_i_notEmpty_7_AND_NOT_tlp_in__ETC___d117,
       _dfoo1,
       _dfoo10,
       _dfoo3,
       routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d50,
       routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d86,
       tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d109,
       tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d113,
       tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d43,
       tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d33,
       tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d42;

  // actionvalue method outToBus_get
  assign outToBus_get = tlp_out_fifo_D_OUT ;
  assign RDY_outToBus_get = tlp_out_fifo_EMPTY_N ;

  // action method in_0_put
  assign RDY_in_0_put = tlp_in_fifo_0_FULL_N ;

  // action method in_1_put
  assign RDY_in_1_put = tlp_in_fifo_1_FULL_N ;

  // action method in_2_put
  assign RDY_in_2_put = tlp_in_fifo_2_FULL_N ;

  // action method in_3_put
  assign RDY_in_3_put = tlp_in_fifo_3_FULL_N ;

  // submodule tlp_in_fifo_0
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlp_in_fifo_0(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(tlp_in_fifo_0_D_IN),
							  .ENQ(tlp_in_fifo_0_ENQ),
							  .DEQ(tlp_in_fifo_0_DEQ),
							  .CLR(tlp_in_fifo_0_CLR),
							  .D_OUT(tlp_in_fifo_0_D_OUT),
							  .FULL_N(tlp_in_fifo_0_FULL_N),
							  .EMPTY_N(tlp_in_fifo_0_EMPTY_N));

  // submodule tlp_in_fifo_1
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlp_in_fifo_1(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(tlp_in_fifo_1_D_IN),
							  .ENQ(tlp_in_fifo_1_ENQ),
							  .DEQ(tlp_in_fifo_1_DEQ),
							  .CLR(tlp_in_fifo_1_CLR),
							  .D_OUT(tlp_in_fifo_1_D_OUT),
							  .FULL_N(tlp_in_fifo_1_FULL_N),
							  .EMPTY_N(tlp_in_fifo_1_EMPTY_N));

  // submodule tlp_in_fifo_2
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlp_in_fifo_2(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(tlp_in_fifo_2_D_IN),
							  .ENQ(tlp_in_fifo_2_ENQ),
							  .DEQ(tlp_in_fifo_2_DEQ),
							  .CLR(tlp_in_fifo_2_CLR),
							  .D_OUT(tlp_in_fifo_2_D_OUT),
							  .FULL_N(tlp_in_fifo_2_FULL_N),
							  .EMPTY_N(tlp_in_fifo_2_EMPTY_N));

  // submodule tlp_in_fifo_3
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlp_in_fifo_3(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(tlp_in_fifo_3_D_IN),
							  .ENQ(tlp_in_fifo_3_ENQ),
							  .DEQ(tlp_in_fifo_3_DEQ),
							  .CLR(tlp_in_fifo_3_CLR),
							  .D_OUT(tlp_in_fifo_3_D_OUT),
							  .FULL_N(tlp_in_fifo_3_FULL_N),
							  .EMPTY_N(tlp_in_fifo_3_EMPTY_N));

  // submodule tlp_out_fifo
  FIFO2 #(.width(32'd153), .guarded(32'd1)) tlp_out_fifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(tlp_out_fifo_D_IN),
							 .ENQ(tlp_out_fifo_ENQ),
							 .DEQ(tlp_out_fifo_DEQ),
							 .CLR(tlp_out_fifo_CLR),
							 .D_OUT(tlp_out_fifo_D_OUT),
							 .FULL_N(tlp_out_fifo_FULL_N),
							 .EMPTY_N(tlp_out_fifo_EMPTY_N));

  // rule RL_arbitrate_outgoing_TLP
  assign WILL_FIRE_RL_arbitrate_outgoing_TLP =
	     routeFrom[2] ?
	       !SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	       tlp_out_fifo_FULL_N :
	       (!tlp_in_fifo_0_EMPTY_N || !tlp_in_fifo_0_D_OUT[152] ||
		tlp_out_fifo_FULL_N) &&
	       tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d43 ;

  // register routeFrom
  assign routeFrom_D_IN =
	     routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d86 ?
	       (routeFrom[2] ? 3'd2 : 3'd4) :
	       _dfoo6 ;
  assign routeFrom_EN =
	     WILL_FIRE_RL_arbitrate_outgoing_TLP &&
	     (routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d86 ||
	      NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d105 ||
	      _dfoo1) ;

  // submodule tlp_in_fifo_0
  assign tlp_in_fifo_0_D_IN = in_0_put ;
  assign tlp_in_fifo_0_ENQ = EN_in_0_put ;
  assign tlp_in_fifo_0_DEQ =
	     WILL_FIRE_RL_arbitrate_outgoing_TLP &&
	     (routeFrom[1:0] == 2'd0 && routeFrom[2] &&
	      SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	      !routeFrom[2] && tlp_in_fifo_0_EMPTY_N) ;
  assign tlp_in_fifo_0_CLR = 1'b0 ;

  // submodule tlp_in_fifo_1
  assign tlp_in_fifo_1_D_IN = in_1_put ;
  assign tlp_in_fifo_1_ENQ = EN_in_1_put ;
  assign tlp_in_fifo_1_DEQ =
	     WILL_FIRE_RL_arbitrate_outgoing_TLP &&
	     (routeFrom[1:0] == 2'd1 && routeFrom[2] &&
	      SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	      !routeFrom[2] && !tlp_in_fifo_0_EMPTY_N &&
	      tlp_in_fifo_1_EMPTY_N) ;
  assign tlp_in_fifo_1_CLR = 1'b0 ;

  // submodule tlp_in_fifo_2
  assign tlp_in_fifo_2_D_IN = in_2_put ;
  assign tlp_in_fifo_2_ENQ = EN_in_2_put ;
  assign tlp_in_fifo_2_DEQ = WILL_FIRE_RL_arbitrate_outgoing_TLP && _dfoo10 ;
  assign tlp_in_fifo_2_CLR = 1'b0 ;

  // submodule tlp_in_fifo_3
  assign tlp_in_fifo_3_D_IN = in_3_put ;
  assign tlp_in_fifo_3_ENQ = EN_in_3_put ;
  assign tlp_in_fifo_3_DEQ =
	     WILL_FIRE_RL_arbitrate_outgoing_TLP &&
	     (routeFrom[1:0] == 2'd3 && routeFrom[2] &&
	      SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	      !routeFrom[2] &&
	      NOT_tlp_in_fifo_2_i_notEmpty_7_AND_NOT_tlp_in__ETC___d117) ;
  assign tlp_in_fifo_3_CLR = 1'b0 ;

  // submodule tlp_out_fifo
  assign tlp_out_fifo_D_IN =
	     routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d50 ?
	       IF_routeFrom_BIT_2_THEN_SEL_ARR_tlp_in_fifo_0__ETC___d79 :
	       (NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d101 ?
		  tlp_in_fifo_1_D_OUT :
		  _dfoo4) ;
  assign tlp_out_fifo_ENQ =
	     WILL_FIRE_RL_arbitrate_outgoing_TLP &&
	     (routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d50 ||
	      NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d101 ||
	      _dfoo3) ;
  assign tlp_out_fifo_DEQ = EN_outToBus_get ;
  assign tlp_out_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_routeFrom_BIT_2_THEN_SEL_ARR_tlp_in_fifo_0__ETC___d79 =
	     routeFrom[2] ?
	       { SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52,
		 SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58,
		 SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64,
		 SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70,
		 SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76 } :
	       tlp_in_fifo_0_D_OUT ;
  assign NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d101 =
	     !routeFrom[2] && !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_1_EMPTY_N &&
	     tlp_in_fifo_1_D_OUT[152] ;
  assign NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d105 =
	     !routeFrom[2] && !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_1_EMPTY_N &&
	     tlp_in_fifo_1_D_OUT[152] &&
	     !tlp_in_fifo_1_D_OUT[151] ;
  assign NOT_tlp_in_fifo_2_i_notEmpty_7_AND_NOT_tlp_in__ETC___d117 =
	     !tlp_in_fifo_2_EMPTY_N && !tlp_in_fifo_1_EMPTY_N &&
	     !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_3_EMPTY_N ;
  assign _dfoo1 =
	     !routeFrom[2] &&
	     (tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d113 ||
	      NOT_tlp_in_fifo_2_i_notEmpty_7_AND_NOT_tlp_in__ETC___d117 &&
	      tlp_in_fifo_3_D_OUT[152] &&
	      !tlp_in_fifo_3_D_OUT[151]) ;
  assign _dfoo10 =
	     routeFrom[1:0] == 2'd2 && routeFrom[2] &&
	     SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	     !routeFrom[2] && !tlp_in_fifo_1_EMPTY_N &&
	     !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_2_EMPTY_N ;
  assign _dfoo3 =
	     !routeFrom[2] &&
	     (tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d109 ||
	      NOT_tlp_in_fifo_2_i_notEmpty_7_AND_NOT_tlp_in__ETC___d117 &&
	      tlp_in_fifo_3_D_OUT[152]) ;
  assign _dfoo4 =
	     (!routeFrom[2] &&
	      tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d109) ?
	       tlp_in_fifo_2_D_OUT :
	       tlp_in_fifo_3_D_OUT ;
  assign _dfoo6 =
	     NOT_routeFrom_BIT_2_7_AND_NOT_tlp_in_fifo_0_i__ETC___d105 ?
	       3'd5 :
	       ((!routeFrom[2] &&
		 tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d113) ?
		  3'd6 :
		  3'd7) ;
  assign routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d50 =
	     routeFrom[2] &&
	     SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 ||
	     !routeFrom[2] && tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_0_D_OUT[152] ;
  assign routeFrom_BIT_2_AND_SEL_ARR_tlp_in_fifo_0_i_no_ETC___d86 =
	     routeFrom[2] &&
	     SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 &&
	     SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58 ||
	     !routeFrom[2] && tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_0_D_OUT[152] &&
	     !tlp_in_fifo_0_D_OUT[151] ;
  assign tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d109 =
	     !tlp_in_fifo_1_EMPTY_N && !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_2_EMPTY_N &&
	     tlp_in_fifo_2_D_OUT[152] ;
  assign tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d113 =
	     !tlp_in_fifo_1_EMPTY_N && !tlp_in_fifo_0_EMPTY_N &&
	     tlp_in_fifo_2_EMPTY_N &&
	     tlp_in_fifo_2_D_OUT[152] &&
	     !tlp_in_fifo_2_D_OUT[151] ;
  assign tlp_in_fifo_0_i_notEmpty_OR_NOT_tlp_in_fifo_1__ETC___d43 =
	     (tlp_in_fifo_0_EMPTY_N || !tlp_in_fifo_1_EMPTY_N ||
	      !tlp_in_fifo_1_D_OUT[152] ||
	      tlp_out_fifo_FULL_N) &&
	     tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d42 ;
  assign tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d33 =
	     tlp_in_fifo_1_EMPTY_N || tlp_in_fifo_0_EMPTY_N ||
	     !tlp_in_fifo_2_EMPTY_N ||
	     !tlp_in_fifo_2_D_OUT[152] ||
	     tlp_out_fifo_FULL_N ;
  assign tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d42 =
	     tlp_in_fifo_1_i_notEmpty_OR_tlp_in_fifo_0_i_no_ETC___d33 &&
	     (tlp_in_fifo_2_EMPTY_N || tlp_in_fifo_1_EMPTY_N ||
	      tlp_in_fifo_0_EMPTY_N ||
	      !tlp_in_fifo_3_EMPTY_N ||
	      !tlp_in_fifo_3_D_OUT[152] ||
	      tlp_out_fifo_FULL_N) ;
  always@(routeFrom or
	  tlp_in_fifo_0_EMPTY_N or
	  tlp_in_fifo_1_EMPTY_N or
	  tlp_in_fifo_2_EMPTY_N or tlp_in_fifo_3_EMPTY_N)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 =
	      tlp_in_fifo_0_EMPTY_N;
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 =
	      tlp_in_fifo_1_EMPTY_N;
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 =
	      tlp_in_fifo_2_EMPTY_N;
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_i_notEmpty_tlp_in_fifo_1_ETC___d9 =
	      tlp_in_fifo_3_EMPTY_N;
    endcase
  end
  always@(routeFrom or
	  tlp_in_fifo_0_D_OUT or
	  tlp_in_fifo_1_D_OUT or tlp_in_fifo_2_D_OUT or tlp_in_fifo_3_D_OUT)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58 =
	      tlp_in_fifo_0_D_OUT[151];
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58 =
	      tlp_in_fifo_1_D_OUT[151];
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58 =
	      tlp_in_fifo_2_D_OUT[151];
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_151_3_tlp_i_ETC___d58 =
	      tlp_in_fifo_3_D_OUT[151];
    endcase
  end
  always@(routeFrom or
	  tlp_in_fifo_0_D_OUT or
	  tlp_in_fifo_1_D_OUT or tlp_in_fifo_2_D_OUT or tlp_in_fifo_3_D_OUT)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64 =
	      tlp_in_fifo_0_D_OUT[150:144];
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64 =
	      tlp_in_fifo_1_D_OUT[150:144];
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64 =
	      tlp_in_fifo_2_D_OUT[150:144];
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_150_TO_144_ETC___d64 =
	      tlp_in_fifo_3_D_OUT[150:144];
    endcase
  end
  always@(routeFrom or
	  tlp_in_fifo_0_D_OUT or
	  tlp_in_fifo_1_D_OUT or tlp_in_fifo_2_D_OUT or tlp_in_fifo_3_D_OUT)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76 =
	      tlp_in_fifo_0_D_OUT[127:0];
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76 =
	      tlp_in_fifo_1_D_OUT[127:0];
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76 =
	      tlp_in_fifo_2_D_OUT[127:0];
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_127_TO_0_1_ETC___d76 =
	      tlp_in_fifo_3_D_OUT[127:0];
    endcase
  end
  always@(routeFrom or
	  tlp_in_fifo_0_D_OUT or
	  tlp_in_fifo_1_D_OUT or tlp_in_fifo_2_D_OUT or tlp_in_fifo_3_D_OUT)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70 =
	      tlp_in_fifo_0_D_OUT[143:128];
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70 =
	      tlp_in_fifo_1_D_OUT[143:128];
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70 =
	      tlp_in_fifo_2_D_OUT[143:128];
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_first__4_BITS_143_TO_128_ETC___d70 =
	      tlp_in_fifo_3_D_OUT[143:128];
    endcase
  end
  always@(routeFrom or
	  tlp_in_fifo_0_D_OUT or
	  tlp_in_fifo_1_D_OUT or tlp_in_fifo_2_D_OUT or tlp_in_fifo_3_D_OUT)
  begin
    case (routeFrom[1:0])
      2'd0:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52 =
	      tlp_in_fifo_0_D_OUT[152];
      2'd1:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52 =
	      tlp_in_fifo_1_D_OUT[152];
      2'd2:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52 =
	      tlp_in_fifo_2_D_OUT[152];
      2'd3:
	  SEL_ARR_tlp_in_fifo_0_first__4_BIT_152_5_tlp_i_ETC___d52 =
	      tlp_in_fifo_3_D_OUT[152];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        routeFrom <= `BSV_ASSIGNMENT_DELAY 3'd2;
      end
    else
      begin
        if (routeFrom_EN) routeFrom <= `BSV_ASSIGNMENT_DELAY routeFrom_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    routeFrom = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTLPArbiter

