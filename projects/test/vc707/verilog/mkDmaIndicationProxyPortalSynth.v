//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:14:13 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// portalIfc_ifcId                O    32
// RDY_portalIfc_ifcId            O     1 const
// portalIfc_ifcType              O    32 const
// RDY_portalIfc_ifcType          O     1 const
// RDY_portalIfc_requestSizeBits  O     1 const
// portalIfc_indications_0_first  O    32
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_indications_2_first  O    32
// RDY_portalIfc_indications_2_first  O     1 reg
// RDY_portalIfc_indications_2_deq  O     1 reg
// portalIfc_indications_2_notEmpty  O     1 reg
// RDY_portalIfc_indications_2_notEmpty  O     1 const
// portalIfc_indications_3_first  O    32
// RDY_portalIfc_indications_3_first  O     1 reg
// RDY_portalIfc_indications_3_deq  O     1 reg
// portalIfc_indications_3_notEmpty  O     1 reg
// RDY_portalIfc_indications_3_notEmpty  O     1 const
// portalIfc_indications_4_first  O    32
// RDY_portalIfc_indications_4_first  O     1 reg
// RDY_portalIfc_indications_4_deq  O     1 reg
// portalIfc_indications_4_notEmpty  O     1 reg
// RDY_portalIfc_indications_4_notEmpty  O     1 const
// portalIfc_indicationSizeBits   O   160 const
// RDY_portalIfc_indicationSizeBits  O     1 const
// RDY_ifc_configResp             O     1 reg
// RDY_ifc_addrResponse           O     1 reg
// RDY_ifc_reportStateDbg         O     1 reg
// RDY_ifc_reportMemoryTraffic    O     1 reg
// RDY_ifc_dmaError               O     1 reg
// id                             I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_configResp_pointer         I    32 reg
// ifc_addrResponse_physAddr      I    64 reg
// ifc_reportStateDbg_rec         I   128 reg
// ifc_reportMemoryTraffic_words  I    64 reg
// ifc_dmaError_code              I    32 reg
// ifc_dmaError_pointer           I    32 reg
// ifc_dmaError_offset            I    64 reg
// ifc_dmaError_extra             I    64 reg
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
// EN_portalIfc_indications_2_deq  I     1
// EN_portalIfc_indications_3_deq  I     1
// EN_portalIfc_indications_4_deq  I     1
// EN_ifc_configResp              I     1
// EN_ifc_addrResponse            I     1
// EN_ifc_reportStateDbg          I     1
// EN_ifc_reportMemoryTraffic     I     1
// EN_ifc_dmaError                I     1
//
// Combinational paths from inputs to outputs:
//   id -> portalIfc_ifcId
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDmaIndicationProxyPortalSynth(id,
				       CLK,
				       RST_N,

				       portalIfc_ifcId,
				       RDY_portalIfc_ifcId,

				       portalIfc_ifcType,
				       RDY_portalIfc_ifcType,

				       RDY_portalIfc_requestSizeBits,

				       portalIfc_indications_0_first,
				       RDY_portalIfc_indications_0_first,

				       EN_portalIfc_indications_0_deq,
				       RDY_portalIfc_indications_0_deq,

				       portalIfc_indications_0_notEmpty,
				       RDY_portalIfc_indications_0_notEmpty,

				       portalIfc_indications_1_first,
				       RDY_portalIfc_indications_1_first,

				       EN_portalIfc_indications_1_deq,
				       RDY_portalIfc_indications_1_deq,

				       portalIfc_indications_1_notEmpty,
				       RDY_portalIfc_indications_1_notEmpty,

				       portalIfc_indications_2_first,
				       RDY_portalIfc_indications_2_first,

				       EN_portalIfc_indications_2_deq,
				       RDY_portalIfc_indications_2_deq,

				       portalIfc_indications_2_notEmpty,
				       RDY_portalIfc_indications_2_notEmpty,

				       portalIfc_indications_3_first,
				       RDY_portalIfc_indications_3_first,

				       EN_portalIfc_indications_3_deq,
				       RDY_portalIfc_indications_3_deq,

				       portalIfc_indications_3_notEmpty,
				       RDY_portalIfc_indications_3_notEmpty,

				       portalIfc_indications_4_first,
				       RDY_portalIfc_indications_4_first,

				       EN_portalIfc_indications_4_deq,
				       RDY_portalIfc_indications_4_deq,

				       portalIfc_indications_4_notEmpty,
				       RDY_portalIfc_indications_4_notEmpty,

				       portalIfc_indicationSizeBits,
				       RDY_portalIfc_indicationSizeBits,

				       ifc_configResp_pointer,
				       EN_ifc_configResp,
				       RDY_ifc_configResp,

				       ifc_addrResponse_physAddr,
				       EN_ifc_addrResponse,
				       RDY_ifc_addrResponse,

				       ifc_reportStateDbg_rec,
				       EN_ifc_reportStateDbg,
				       RDY_ifc_reportStateDbg,

				       ifc_reportMemoryTraffic_words,
				       EN_ifc_reportMemoryTraffic,
				       RDY_ifc_reportMemoryTraffic,

				       ifc_dmaError_code,
				       ifc_dmaError_pointer,
				       ifc_dmaError_offset,
				       ifc_dmaError_extra,
				       EN_ifc_dmaError,
				       RDY_ifc_dmaError);
  input  [31 : 0] id;
  input  CLK;
  input  RST_N;

  // value method portalIfc_ifcId
  output [31 : 0] portalIfc_ifcId;
  output RDY_portalIfc_ifcId;

  // value method portalIfc_ifcType
  output [31 : 0] portalIfc_ifcType;
  output RDY_portalIfc_ifcType;

  // value method portalIfc_requestSizeBits
  output RDY_portalIfc_requestSizeBits;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_indications_2_first
  output [31 : 0] portalIfc_indications_2_first;
  output RDY_portalIfc_indications_2_first;

  // action method portalIfc_indications_2_deq
  input  EN_portalIfc_indications_2_deq;
  output RDY_portalIfc_indications_2_deq;

  // value method portalIfc_indications_2_notEmpty
  output portalIfc_indications_2_notEmpty;
  output RDY_portalIfc_indications_2_notEmpty;

  // value method portalIfc_indications_3_first
  output [31 : 0] portalIfc_indications_3_first;
  output RDY_portalIfc_indications_3_first;

  // action method portalIfc_indications_3_deq
  input  EN_portalIfc_indications_3_deq;
  output RDY_portalIfc_indications_3_deq;

  // value method portalIfc_indications_3_notEmpty
  output portalIfc_indications_3_notEmpty;
  output RDY_portalIfc_indications_3_notEmpty;

  // value method portalIfc_indications_4_first
  output [31 : 0] portalIfc_indications_4_first;
  output RDY_portalIfc_indications_4_first;

  // action method portalIfc_indications_4_deq
  input  EN_portalIfc_indications_4_deq;
  output RDY_portalIfc_indications_4_deq;

  // value method portalIfc_indications_4_notEmpty
  output portalIfc_indications_4_notEmpty;
  output RDY_portalIfc_indications_4_notEmpty;

  // value method portalIfc_indicationSizeBits
  output [159 : 0] portalIfc_indicationSizeBits;
  output RDY_portalIfc_indicationSizeBits;

  // action method ifc_configResp
  input  [31 : 0] ifc_configResp_pointer;
  input  EN_ifc_configResp;
  output RDY_ifc_configResp;

  // action method ifc_addrResponse
  input  [63 : 0] ifc_addrResponse_physAddr;
  input  EN_ifc_addrResponse;
  output RDY_ifc_addrResponse;

  // action method ifc_reportStateDbg
  input  [127 : 0] ifc_reportStateDbg_rec;
  input  EN_ifc_reportStateDbg;
  output RDY_ifc_reportStateDbg;

  // action method ifc_reportMemoryTraffic
  input  [63 : 0] ifc_reportMemoryTraffic_words;
  input  EN_ifc_reportMemoryTraffic;
  output RDY_ifc_reportMemoryTraffic;

  // action method ifc_dmaError
  input  [31 : 0] ifc_dmaError_code;
  input  [31 : 0] ifc_dmaError_pointer;
  input  [63 : 0] ifc_dmaError_offset;
  input  [63 : 0] ifc_dmaError_extra;
  input  EN_ifc_dmaError;
  output RDY_ifc_dmaError;

  // signals for module outputs
  wire [159 : 0] portalIfc_indicationSizeBits;
  wire [31 : 0] portalIfc_ifcId,
		portalIfc_ifcType,
		portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_indications_2_first,
		portalIfc_indications_3_first,
		portalIfc_indications_4_first;
  wire RDY_ifc_addrResponse,
       RDY_ifc_configResp,
       RDY_ifc_dmaError,
       RDY_ifc_reportMemoryTraffic,
       RDY_ifc_reportStateDbg,
       RDY_portalIfc_ifcId,
       RDY_portalIfc_ifcType,
       RDY_portalIfc_indicationSizeBits,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_indications_2_deq,
       RDY_portalIfc_indications_2_first,
       RDY_portalIfc_indications_2_notEmpty,
       RDY_portalIfc_indications_3_deq,
       RDY_portalIfc_indications_3_first,
       RDY_portalIfc_indications_3_notEmpty,
       RDY_portalIfc_indications_4_deq,
       RDY_portalIfc_indications_4_first,
       RDY_portalIfc_indications_4_notEmpty,
       RDY_portalIfc_requestSizeBits,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_indications_2_notEmpty,
       portalIfc_indications_3_notEmpty,
       portalIfc_indications_4_notEmpty;

  // register addrResponse_responseFifo_count
  reg [31 : 0] addrResponse_responseFifo_count;
  wire [31 : 0] addrResponse_responseFifo_count_D_IN;
  wire addrResponse_responseFifo_count_EN;

  // register configResp_responseFifo_count
  reg [31 : 0] configResp_responseFifo_count;
  wire [31 : 0] configResp_responseFifo_count_D_IN;
  wire configResp_responseFifo_count_EN;

  // register dmaError_responseFifo_count
  reg [31 : 0] dmaError_responseFifo_count;
  wire [31 : 0] dmaError_responseFifo_count_D_IN;
  wire dmaError_responseFifo_count_EN;

  // register reportMemoryTraffic_responseFifo_count
  reg [31 : 0] reportMemoryTraffic_responseFifo_count;
  wire [31 : 0] reportMemoryTraffic_responseFifo_count_D_IN;
  wire reportMemoryTraffic_responseFifo_count_EN;

  // register reportStateDbg_responseFifo_count
  reg [31 : 0] reportStateDbg_responseFifo_count;
  wire [31 : 0] reportStateDbg_responseFifo_count_D_IN;
  wire reportStateDbg_responseFifo_count_EN;

  // ports of submodule addrResponse_responseFifo_fifo
  wire [63 : 0] addrResponse_responseFifo_fifo_D_IN,
		addrResponse_responseFifo_fifo_D_OUT;
  wire addrResponse_responseFifo_fifo_CLR,
       addrResponse_responseFifo_fifo_DEQ,
       addrResponse_responseFifo_fifo_EMPTY_N,
       addrResponse_responseFifo_fifo_ENQ,
       addrResponse_responseFifo_fifo_FULL_N;

  // ports of submodule configResp_responseFifo_fifo
  wire [31 : 0] configResp_responseFifo_fifo_D_IN,
		configResp_responseFifo_fifo_D_OUT;
  wire configResp_responseFifo_fifo_CLR,
       configResp_responseFifo_fifo_DEQ,
       configResp_responseFifo_fifo_EMPTY_N,
       configResp_responseFifo_fifo_ENQ,
       configResp_responseFifo_fifo_FULL_N;

  // ports of submodule dmaError_responseFifo_fifo
  wire [191 : 0] dmaError_responseFifo_fifo_D_IN,
		 dmaError_responseFifo_fifo_D_OUT;
  wire dmaError_responseFifo_fifo_CLR,
       dmaError_responseFifo_fifo_DEQ,
       dmaError_responseFifo_fifo_EMPTY_N,
       dmaError_responseFifo_fifo_ENQ,
       dmaError_responseFifo_fifo_FULL_N;

  // ports of submodule reportMemoryTraffic_responseFifo_fifo
  wire [63 : 0] reportMemoryTraffic_responseFifo_fifo_D_IN,
		reportMemoryTraffic_responseFifo_fifo_D_OUT;
  wire reportMemoryTraffic_responseFifo_fifo_CLR,
       reportMemoryTraffic_responseFifo_fifo_DEQ,
       reportMemoryTraffic_responseFifo_fifo_EMPTY_N,
       reportMemoryTraffic_responseFifo_fifo_ENQ,
       reportMemoryTraffic_responseFifo_fifo_FULL_N;

  // ports of submodule reportStateDbg_responseFifo_fifo
  wire [127 : 0] reportStateDbg_responseFifo_fifo_D_IN,
		 reportStateDbg_responseFifo_fifo_D_OUT;
  wire reportStateDbg_responseFifo_fifo_CLR,
       reportStateDbg_responseFifo_fifo_DEQ,
       reportStateDbg_responseFifo_fifo_EMPTY_N,
       reportStateDbg_responseFifo_fifo_ENQ,
       reportStateDbg_responseFifo_fifo_FULL_N;

  // remaining internal signals
  wire [191 : 0] x__h1509;
  wire [127 : 0] x__h1259;
  wire [63 : 0] x__h1134, x__h1384;
  wire [31 : 0] x__h1018,
		x__h1075,
		x__h1143,
		x__h1200,
		x__h1268,
		x__h1325,
		x__h1393,
		x__h1450,
		x__h1518,
		x__h1575;

  // value method portalIfc_ifcId
  assign portalIfc_ifcId = id ;
  assign RDY_portalIfc_ifcId = 1'd1 ;

  // value method portalIfc_ifcType
  assign portalIfc_ifcType = 32'hC8ECBBBD ;
  assign RDY_portalIfc_ifcType = 1'd1 ;

  // value method portalIfc_requestSizeBits
  assign RDY_portalIfc_requestSizeBits = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first =
	     configResp_responseFifo_fifo_D_OUT << x__h1018 ;
  assign RDY_portalIfc_indications_0_first =
	     configResp_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq =
	     configResp_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     configResp_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first = x__h1134[63:32] ;
  assign RDY_portalIfc_indications_1_first =
	     addrResponse_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq =
	     addrResponse_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty =
	     addrResponse_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_indications_2_first
  assign portalIfc_indications_2_first = x__h1259[127:96] ;
  assign RDY_portalIfc_indications_2_first =
	     reportStateDbg_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_2_deq
  assign RDY_portalIfc_indications_2_deq =
	     reportStateDbg_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_2_notEmpty
  assign portalIfc_indications_2_notEmpty =
	     reportStateDbg_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_2_notEmpty = 1'd1 ;

  // value method portalIfc_indications_3_first
  assign portalIfc_indications_3_first = x__h1384[63:32] ;
  assign RDY_portalIfc_indications_3_first =
	     reportMemoryTraffic_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_3_deq
  assign RDY_portalIfc_indications_3_deq =
	     reportMemoryTraffic_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_3_notEmpty
  assign portalIfc_indications_3_notEmpty =
	     reportMemoryTraffic_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_3_notEmpty = 1'd1 ;

  // value method portalIfc_indications_4_first
  assign portalIfc_indications_4_first = x__h1509[191:160] ;
  assign RDY_portalIfc_indications_4_first =
	     dmaError_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_4_deq
  assign RDY_portalIfc_indications_4_deq =
	     dmaError_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_4_notEmpty
  assign portalIfc_indications_4_notEmpty =
	     dmaError_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_4_notEmpty = 1'd1 ;

  // value method portalIfc_indicationSizeBits
  assign portalIfc_indicationSizeBits =
	     160'h000000C000000040000000800000004000000020 ;
  assign RDY_portalIfc_indicationSizeBits = 1'd1 ;

  // action method ifc_configResp
  assign RDY_ifc_configResp = configResp_responseFifo_fifo_FULL_N ;

  // action method ifc_addrResponse
  assign RDY_ifc_addrResponse = addrResponse_responseFifo_fifo_FULL_N ;

  // action method ifc_reportStateDbg
  assign RDY_ifc_reportStateDbg = reportStateDbg_responseFifo_fifo_FULL_N ;

  // action method ifc_reportMemoryTraffic
  assign RDY_ifc_reportMemoryTraffic =
	     reportMemoryTraffic_responseFifo_fifo_FULL_N ;

  // action method ifc_dmaError
  assign RDY_ifc_dmaError = dmaError_responseFifo_fifo_FULL_N ;

  // submodule addrResponse_responseFifo_fifo
  FIFO1 #(.width(32'd64),
	  .guarded(32'd1)) addrResponse_responseFifo_fifo(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(addrResponse_responseFifo_fifo_D_IN),
							  .ENQ(addrResponse_responseFifo_fifo_ENQ),
							  .DEQ(addrResponse_responseFifo_fifo_DEQ),
							  .CLR(addrResponse_responseFifo_fifo_CLR),
							  .D_OUT(addrResponse_responseFifo_fifo_D_OUT),
							  .FULL_N(addrResponse_responseFifo_fifo_FULL_N),
							  .EMPTY_N(addrResponse_responseFifo_fifo_EMPTY_N));

  // submodule configResp_responseFifo_fifo
  FIFO1 #(.width(32'd32),
	  .guarded(32'd1)) configResp_responseFifo_fifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(configResp_responseFifo_fifo_D_IN),
							.ENQ(configResp_responseFifo_fifo_ENQ),
							.DEQ(configResp_responseFifo_fifo_DEQ),
							.CLR(configResp_responseFifo_fifo_CLR),
							.D_OUT(configResp_responseFifo_fifo_D_OUT),
							.FULL_N(configResp_responseFifo_fifo_FULL_N),
							.EMPTY_N(configResp_responseFifo_fifo_EMPTY_N));

  // submodule dmaError_responseFifo_fifo
  FIFO1 #(.width(32'd192),
	  .guarded(32'd1)) dmaError_responseFifo_fifo(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(dmaError_responseFifo_fifo_D_IN),
						      .ENQ(dmaError_responseFifo_fifo_ENQ),
						      .DEQ(dmaError_responseFifo_fifo_DEQ),
						      .CLR(dmaError_responseFifo_fifo_CLR),
						      .D_OUT(dmaError_responseFifo_fifo_D_OUT),
						      .FULL_N(dmaError_responseFifo_fifo_FULL_N),
						      .EMPTY_N(dmaError_responseFifo_fifo_EMPTY_N));

  // submodule reportMemoryTraffic_responseFifo_fifo
  FIFO1 #(.width(32'd64),
	  .guarded(32'd1)) reportMemoryTraffic_responseFifo_fifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(reportMemoryTraffic_responseFifo_fifo_D_IN),
								 .ENQ(reportMemoryTraffic_responseFifo_fifo_ENQ),
								 .DEQ(reportMemoryTraffic_responseFifo_fifo_DEQ),
								 .CLR(reportMemoryTraffic_responseFifo_fifo_CLR),
								 .D_OUT(reportMemoryTraffic_responseFifo_fifo_D_OUT),
								 .FULL_N(reportMemoryTraffic_responseFifo_fifo_FULL_N),
								 .EMPTY_N(reportMemoryTraffic_responseFifo_fifo_EMPTY_N));

  // submodule reportStateDbg_responseFifo_fifo
  FIFO1 #(.width(32'd128),
	  .guarded(32'd1)) reportStateDbg_responseFifo_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(reportStateDbg_responseFifo_fifo_D_IN),
							    .ENQ(reportStateDbg_responseFifo_fifo_ENQ),
							    .DEQ(reportStateDbg_responseFifo_fifo_DEQ),
							    .CLR(reportStateDbg_responseFifo_fifo_CLR),
							    .D_OUT(reportStateDbg_responseFifo_fifo_D_OUT),
							    .FULL_N(reportStateDbg_responseFifo_fifo_FULL_N),
							    .EMPTY_N(reportStateDbg_responseFifo_fifo_EMPTY_N));

  // register addrResponse_responseFifo_count
  assign addrResponse_responseFifo_count_D_IN =
	     (addrResponse_responseFifo_count == 32'd1) ? 32'd0 : x__h1200 ;
  assign addrResponse_responseFifo_count_EN = EN_portalIfc_indications_1_deq ;

  // register configResp_responseFifo_count
  assign configResp_responseFifo_count_D_IN =
	     (configResp_responseFifo_count == 32'd0) ?
	       configResp_responseFifo_count :
	       x__h1075 ;
  assign configResp_responseFifo_count_EN = EN_portalIfc_indications_0_deq ;

  // register dmaError_responseFifo_count
  assign dmaError_responseFifo_count_D_IN =
	     (dmaError_responseFifo_count == 32'd5) ? 32'd0 : x__h1575 ;
  assign dmaError_responseFifo_count_EN = EN_portalIfc_indications_4_deq ;

  // register reportMemoryTraffic_responseFifo_count
  assign reportMemoryTraffic_responseFifo_count_D_IN =
	     (reportMemoryTraffic_responseFifo_count == 32'd1) ?
	       32'd0 :
	       x__h1450 ;
  assign reportMemoryTraffic_responseFifo_count_EN =
	     EN_portalIfc_indications_3_deq ;

  // register reportStateDbg_responseFifo_count
  assign reportStateDbg_responseFifo_count_D_IN =
	     (reportStateDbg_responseFifo_count == 32'd3) ? 32'd0 : x__h1325 ;
  assign reportStateDbg_responseFifo_count_EN =
	     EN_portalIfc_indications_2_deq ;

  // submodule addrResponse_responseFifo_fifo
  assign addrResponse_responseFifo_fifo_D_IN = ifc_addrResponse_physAddr ;
  assign addrResponse_responseFifo_fifo_ENQ = EN_ifc_addrResponse ;
  assign addrResponse_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_1_deq &&
	     addrResponse_responseFifo_count == 32'd1 ;
  assign addrResponse_responseFifo_fifo_CLR = 1'b0 ;

  // submodule configResp_responseFifo_fifo
  assign configResp_responseFifo_fifo_D_IN = ifc_configResp_pointer ;
  assign configResp_responseFifo_fifo_ENQ = EN_ifc_configResp ;
  assign configResp_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_0_deq &&
	     configResp_responseFifo_count == 32'd0 ;
  assign configResp_responseFifo_fifo_CLR = 1'b0 ;

  // submodule dmaError_responseFifo_fifo
  assign dmaError_responseFifo_fifo_D_IN =
	     { ifc_dmaError_code,
	       ifc_dmaError_pointer,
	       ifc_dmaError_offset,
	       ifc_dmaError_extra } ;
  assign dmaError_responseFifo_fifo_ENQ = EN_ifc_dmaError ;
  assign dmaError_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_4_deq &&
	     dmaError_responseFifo_count == 32'd5 ;
  assign dmaError_responseFifo_fifo_CLR = 1'b0 ;

  // submodule reportMemoryTraffic_responseFifo_fifo
  assign reportMemoryTraffic_responseFifo_fifo_D_IN =
	     ifc_reportMemoryTraffic_words ;
  assign reportMemoryTraffic_responseFifo_fifo_ENQ =
	     EN_ifc_reportMemoryTraffic ;
  assign reportMemoryTraffic_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_3_deq &&
	     reportMemoryTraffic_responseFifo_count == 32'd1 ;
  assign reportMemoryTraffic_responseFifo_fifo_CLR = 1'b0 ;

  // submodule reportStateDbg_responseFifo_fifo
  assign reportStateDbg_responseFifo_fifo_D_IN = ifc_reportStateDbg_rec ;
  assign reportStateDbg_responseFifo_fifo_ENQ = EN_ifc_reportStateDbg ;
  assign reportStateDbg_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_2_deq &&
	     reportStateDbg_responseFifo_count == 32'd3 ;
  assign reportStateDbg_responseFifo_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign x__h1018 = { configResp_responseFifo_count[26:0], 5'd0 } ;
  assign x__h1075 = configResp_responseFifo_count + 32'd1 ;
  assign x__h1134 = addrResponse_responseFifo_fifo_D_OUT << x__h1143 ;
  assign x__h1143 = { addrResponse_responseFifo_count[26:0], 5'd0 } ;
  assign x__h1200 = addrResponse_responseFifo_count + 32'd1 ;
  assign x__h1259 = reportStateDbg_responseFifo_fifo_D_OUT << x__h1268 ;
  assign x__h1268 = { reportStateDbg_responseFifo_count[26:0], 5'd0 } ;
  assign x__h1325 = reportStateDbg_responseFifo_count + 32'd1 ;
  assign x__h1384 = reportMemoryTraffic_responseFifo_fifo_D_OUT << x__h1393 ;
  assign x__h1393 = { reportMemoryTraffic_responseFifo_count[26:0], 5'd0 } ;
  assign x__h1450 = reportMemoryTraffic_responseFifo_count + 32'd1 ;
  assign x__h1509 = dmaError_responseFifo_fifo_D_OUT << x__h1518 ;
  assign x__h1518 = { dmaError_responseFifo_count[26:0], 5'd0 } ;
  assign x__h1575 = dmaError_responseFifo_count + 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addrResponse_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	configResp_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dmaError_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reportMemoryTraffic_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reportStateDbg_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (addrResponse_responseFifo_count_EN)
	  addrResponse_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      addrResponse_responseFifo_count_D_IN;
	if (configResp_responseFifo_count_EN)
	  configResp_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      configResp_responseFifo_count_D_IN;
	if (dmaError_responseFifo_count_EN)
	  dmaError_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      dmaError_responseFifo_count_D_IN;
	if (reportMemoryTraffic_responseFifo_count_EN)
	  reportMemoryTraffic_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      reportMemoryTraffic_responseFifo_count_D_IN;
	if (reportStateDbg_responseFifo_count_EN)
	  reportStateDbg_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      reportStateDbg_responseFifo_count_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addrResponse_responseFifo_count = 32'hAAAAAAAA;
    configResp_responseFifo_count = 32'hAAAAAAAA;
    dmaError_responseFifo_count = 32'hAAAAAAAA;
    reportMemoryTraffic_responseFifo_count = 32'hAAAAAAAA;
    reportStateDbg_responseFifo_count = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDmaIndicationProxyPortalSynth

