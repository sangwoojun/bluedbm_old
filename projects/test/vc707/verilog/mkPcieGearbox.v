//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:13:52 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// tlp_request_get                O    81 reg
// RDY_tlp_request_get            O     1 reg
// RDY_tlp_response_put           O     1 reg
// RDY_pci_request_put            O     1
// pci_response_get               O   153
// RDY_pci_response_get           O     1
// CLK_epClock250                 I     1 clock
// RST_N_epReset250               I     1 reset
// CLK_epClock125                 I     1 clock
// RST_N_epReset125               I     1 reset
// tlp_response_put               I    81 reg
// pci_request_put                I   153
// EN_tlp_response_put            I     1
// EN_pci_request_put             I     1
// EN_tlp_request_get             I     1
// EN_pci_response_get            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPcieGearbox(CLK_epClock250,
		     RST_N_epReset250,
		     CLK_epClock125,
		     RST_N_epReset125,

		     EN_tlp_request_get,
		     tlp_request_get,
		     RDY_tlp_request_get,

		     tlp_response_put,
		     EN_tlp_response_put,
		     RDY_tlp_response_put,

		     pci_request_put,
		     EN_pci_request_put,
		     RDY_pci_request_put,

		     EN_pci_response_get,
		     pci_response_get,
		     RDY_pci_response_get);
  input  CLK_epClock250;
  input  RST_N_epReset250;
  input  CLK_epClock125;
  input  RST_N_epReset125;

  // actionvalue method tlp_request_get
  input  EN_tlp_request_get;
  output [80 : 0] tlp_request_get;
  output RDY_tlp_request_get;

  // action method tlp_response_put
  input  [80 : 0] tlp_response_put;
  input  EN_tlp_response_put;
  output RDY_tlp_response_put;

  // action method pci_request_put
  input  [152 : 0] pci_request_put;
  input  EN_pci_request_put;
  output RDY_pci_request_put;

  // actionvalue method pci_response_get
  input  EN_pci_response_get;
  output [152 : 0] pci_response_get;
  output RDY_pci_response_get;

  // signals for module outputs
  wire [152 : 0] pci_response_get;
  wire [80 : 0] tlp_request_get;
  wire RDY_pci_request_put,
       RDY_pci_response_get,
       RDY_tlp_request_get,
       RDY_tlp_response_put;

  // inlined wires
  wire fifoRxData_pwEnqueue_whas;

  // register fifoRxData_block0_status
  reg fifoRxData_block0_status;
  wire fifoRxData_block0_status_D_IN, fifoRxData_block0_status_EN;

  // register fifoRxData_block1_status
  reg fifoRxData_block1_status;
  wire fifoRxData_block1_status_D_IN, fifoRxData_block1_status_EN;

  // register fifoRxData_dInReset_pre_isInReset
  reg fifoRxData_dInReset_pre_isInReset;
  wire fifoRxData_dInReset_pre_isInReset_D_IN,
       fifoRxData_dInReset_pre_isInReset_EN;

  // register fifoRxData_elem0_status_0
  reg fifoRxData_elem0_status_0;
  wire fifoRxData_elem0_status_0_D_IN, fifoRxData_elem0_status_0_EN;

  // register fifoRxData_elem0_status_1
  reg fifoRxData_elem0_status_1;
  wire fifoRxData_elem0_status_1_D_IN, fifoRxData_elem0_status_1_EN;

  // register fifoRxData_elem1_status_0
  reg fifoRxData_elem1_status_0;
  wire fifoRxData_elem1_status_0_D_IN, fifoRxData_elem1_status_0_EN;

  // register fifoRxData_elem1_status_1
  reg fifoRxData_elem1_status_1;
  wire fifoRxData_elem1_status_1_D_IN, fifoRxData_elem1_status_1_EN;

  // register fifoRxData_elem_0
  reg [80 : 0] fifoRxData_elem_0;
  wire [80 : 0] fifoRxData_elem_0_D_IN;
  wire fifoRxData_elem_0_EN;

  // register fifoRxData_elem_1
  reg [80 : 0] fifoRxData_elem_1;
  wire [80 : 0] fifoRxData_elem_1_D_IN;
  wire fifoRxData_elem_1_EN;

  // register fifoRxData_elem_2
  reg [80 : 0] fifoRxData_elem_2;
  wire [80 : 0] fifoRxData_elem_2_D_IN;
  wire fifoRxData_elem_2_EN;

  // register fifoRxData_elem_3
  reg [80 : 0] fifoRxData_elem_3;
  wire [80 : 0] fifoRxData_elem_3_D_IN;
  wire fifoRxData_elem_3_EN;

  // register fifoRxData_read_block
  reg fifoRxData_read_block;
  wire fifoRxData_read_block_D_IN, fifoRxData_read_block_EN;

  // register fifoRxData_sInReset_pre_isInReset
  reg fifoRxData_sInReset_pre_isInReset;
  wire fifoRxData_sInReset_pre_isInReset_D_IN,
       fifoRxData_sInReset_pre_isInReset_EN;

  // register fifoRxData_write_block
  reg fifoRxData_write_block;
  wire fifoRxData_write_block_D_IN, fifoRxData_write_block_EN;

  // register fifoTxData_block0
  reg [161 : 0] fifoTxData_block0;
  wire [161 : 0] fifoTxData_block0_D_IN;
  wire fifoTxData_block0_EN;

  // register fifoTxData_block0_status
  reg fifoTxData_block0_status;
  wire fifoTxData_block0_status_D_IN, fifoTxData_block0_status_EN;

  // register fifoTxData_block1
  reg [161 : 0] fifoTxData_block1;
  wire [161 : 0] fifoTxData_block1_D_IN;
  wire fifoTxData_block1_EN;

  // register fifoTxData_block1_status
  reg fifoTxData_block1_status;
  wire fifoTxData_block1_status_D_IN, fifoTxData_block1_status_EN;

  // register fifoTxData_dInReset_pre_isInReset
  reg fifoTxData_dInReset_pre_isInReset;
  wire fifoTxData_dInReset_pre_isInReset_D_IN,
       fifoTxData_dInReset_pre_isInReset_EN;

  // register fifoTxData_elem0_status_0
  reg fifoTxData_elem0_status_0;
  wire fifoTxData_elem0_status_0_D_IN, fifoTxData_elem0_status_0_EN;

  // register fifoTxData_elem0_status_1
  reg fifoTxData_elem0_status_1;
  wire fifoTxData_elem0_status_1_D_IN, fifoTxData_elem0_status_1_EN;

  // register fifoTxData_elem1_status_0
  reg fifoTxData_elem1_status_0;
  wire fifoTxData_elem1_status_0_D_IN, fifoTxData_elem1_status_0_EN;

  // register fifoTxData_elem1_status_1
  reg fifoTxData_elem1_status_1;
  wire fifoTxData_elem1_status_1_D_IN, fifoTxData_elem1_status_1_EN;

  // register fifoTxData_read_block
  reg fifoTxData_read_block;
  wire fifoTxData_read_block_D_IN, fifoTxData_read_block_EN;

  // register fifoTxData_sInReset_pre_isInReset
  reg fifoTxData_sInReset_pre_isInReset;
  wire fifoTxData_sInReset_pre_isInReset_D_IN,
       fifoTxData_sInReset_pre_isInReset_EN;

  // register fifoTxData_write_block
  reg fifoTxData_write_block;
  wire fifoTxData_write_block_D_IN, fifoTxData_write_block_EN;

  // register rOddBeat
  reg rOddBeat;
  wire rOddBeat_D_IN, rOddBeat_EN;

  // register rSendInvalid
  reg rSendInvalid;
  wire rSendInvalid_D_IN, rSendInvalid_EN;

  // ports of submodule fifoRxData_dCombinedReset
  wire fifoRxData_dCombinedReset_RST_OUT;

  // ports of submodule fifoRxData_dCrossedsReset
  wire fifoRxData_dCrossedsReset_OUT_RST;

  // ports of submodule fifoRxData_sCombinedReset
  wire fifoRxData_sCombinedReset_RST_OUT;

  // ports of submodule fifoRxData_sCrosseddReset
  wire fifoRxData_sCrosseddReset_OUT_RST;

  // ports of submodule fifoTxData_dCombinedReset
  wire fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule fifoTxData_dCrossedsReset
  wire fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule fifoTxData_sCombinedReset
  wire fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule fifoTxData_sCrosseddReset
  wire fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule inFifo
  wire [80 : 0] inFifo_D_IN, inFifo_D_OUT;
  wire inFifo_CLR, inFifo_DEQ, inFifo_EMPTY_N, inFifo_ENQ, inFifo_FULL_N;

  // ports of submodule outFifo
  wire [80 : 0] outFifo_D_IN, outFifo_D_OUT;
  wire outFifo_CLR, outFifo_DEQ, outFifo_EMPTY_N, outFifo_ENQ, outFifo_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_process_incoming_packets1,
       WILL_FIRE_RL_process_outgoing_packets,
       WILL_FIRE_RL_send_invalid_packets1;

  // inputs to muxes for submodule ports
  wire [80 : 0] MUX_fifoRxData_elem_0__write_1__VAL_1,
		MUX_fifoRxData_elem_0__write_1__VAL_2,
		MUX_fifoRxData_elem_1__write_1__VAL_1,
		MUX_fifoRxData_elem_1__write_1__VAL_2,
		MUX_fifoRxData_elem_2__write_1__VAL_1,
		MUX_fifoRxData_elem_2__write_1__VAL_2,
		MUX_fifoRxData_elem_3__write_1__VAL_1,
		MUX_fifoRxData_elem_3__write_1__VAL_2;
  wire MUX_rSendInvalid_write_1__VAL_1;

  // remaining internal signals
  wire [80 : 0] IF_fifoRxData_elem0_status_1__read_EQ_fifoRxDa_ETC___d48,
		IF_fifoRxData_elem1_status_1__read__8_EQ_fifoR_ETC___d55,
		NOT_fifoRxData_elem0_status_1__read_EQ_fifoRxD_ETC___d78,
		NOT_fifoRxData_elem1_status_1__read__8_EQ_fifo_ETC___d95;
  wire [7 : 0] be__h12841, be__h13006;
  wire [1 : 0] x__h10396,
	       x__h10849,
	       x__h13446,
	       x__h13824,
	       x__h15255,
	       x__h15639,
	       x__h4464,
	       x__h4926;
  wire IF_fifoTxData_read_block_7_THEN_IF_NOT_fifoTxD_ETC___d138,
       NOT_fifoRxData_write_block_AND_NOT_NOT_fifoRxD_ETC___d32,
       NOT_fifoTxData_read_block_7_8_AND_NOT_fifoTxDa_ETC___d120,
       _dor1fifoRxData_elem0_status_0_EN__write,
       _dor1fifoRxData_elem0_status_1_EN__write,
       _dor1fifoRxData_elem1_status_0_EN__write,
       _dor1fifoRxData_elem1_status_1_EN__write,
       _dor1fifoRxData_write_block_EN_write,
       fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12,
       fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9,
       fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23,
       fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20,
       fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103,
       fifoTxData_elem0_status_1__read__9_EQ_fifoTxDa_ETC___d101,
       fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112,
       fifoTxData_elem1_status_1__read__08_EQ_fifoTxD_ETC___d110;

  // actionvalue method tlp_request_get
  assign tlp_request_get = outFifo_D_OUT ;
  assign RDY_tlp_request_get = outFifo_EMPTY_N ;

  // action method tlp_response_put
  assign RDY_tlp_response_put = inFifo_FULL_N ;

  // action method pci_request_put
  assign RDY_pci_request_put =
	     (!fifoTxData_write_block && x__h13446 == 2'd3 ||
	      fifoTxData_write_block && x__h13824 == 2'd3) &&
	     !fifoTxData_sInReset_pre_isInReset ;

  // actionvalue method pci_response_get
  assign pci_response_get =
	     fifoRxData_read_block ?
	       { fifoRxData_elem_2[80],
		 fifoRxData_elem_3[79],
		 fifoRxData_elem_2[78:64],
		 fifoRxData_elem_3[71:64],
		 fifoRxData_elem_2[63:0],
		 fifoRxData_elem_3[63:0] } :
	       { fifoRxData_elem_0[80],
		 fifoRxData_elem_1[79],
		 fifoRxData_elem_0[78:64],
		 fifoRxData_elem_1[71:64],
		 fifoRxData_elem_0[63:0],
		 fifoRxData_elem_1[63:0] } ;
  assign RDY_pci_response_get =
	     (!fifoRxData_read_block && x__h15255 == 2'd3 ||
	      fifoRxData_read_block && x__h15639 == 2'd3) &&
	     !fifoRxData_dInReset_pre_isInReset ;

  // submodule fifoRxData_dCombinedReset
  ResetEither fifoRxData_dCombinedReset(.A_RST(RST_N_epReset125),
					.B_RST(fifoRxData_dCrossedsReset_OUT_RST),
					.RST_OUT(fifoRxData_dCombinedReset_RST_OUT));

  // submodule fifoRxData_dCrossedsReset
  SyncReset0 fifoRxData_dCrossedsReset(.IN_RST(RST_N_epReset250),
				       .OUT_RST(fifoRxData_dCrossedsReset_OUT_RST));

  // submodule fifoRxData_sCombinedReset
  ResetEither fifoRxData_sCombinedReset(.A_RST(RST_N_epReset250),
					.B_RST(fifoRxData_sCrosseddReset_OUT_RST),
					.RST_OUT(fifoRxData_sCombinedReset_RST_OUT));

  // submodule fifoRxData_sCrosseddReset
  SyncReset0 fifoRxData_sCrosseddReset(.IN_RST(RST_N_epReset125),
				       .OUT_RST(fifoRxData_sCrosseddReset_OUT_RST));

  // submodule fifoTxData_dCombinedReset
  ResetEither fifoTxData_dCombinedReset(.A_RST(RST_N_epReset250),
					.B_RST(fifoTxData_dCrossedsReset_OUT_RST),
					.RST_OUT(fifoTxData_dCombinedReset_RST_OUT));

  // submodule fifoTxData_dCrossedsReset
  SyncReset0 fifoTxData_dCrossedsReset(.IN_RST(RST_N_epReset125),
				       .OUT_RST(fifoTxData_dCrossedsReset_OUT_RST));

  // submodule fifoTxData_sCombinedReset
  ResetEither fifoTxData_sCombinedReset(.A_RST(RST_N_epReset125),
					.B_RST(fifoTxData_sCrosseddReset_OUT_RST),
					.RST_OUT(fifoTxData_sCombinedReset_RST_OUT));

  // submodule fifoTxData_sCrosseddReset
  SyncReset0 fifoTxData_sCrosseddReset(.IN_RST(RST_N_epReset250),
				       .OUT_RST(fifoTxData_sCrosseddReset_OUT_RST));

  // submodule inFifo
  FIFO2 #(.width(32'd81), .guarded(32'd1)) inFifo(.RST(RST_N_epReset250),
						  .CLK(CLK_epClock250),
						  .D_IN(inFifo_D_IN),
						  .ENQ(inFifo_ENQ),
						  .DEQ(inFifo_DEQ),
						  .CLR(inFifo_CLR),
						  .D_OUT(inFifo_D_OUT),
						  .FULL_N(inFifo_FULL_N),
						  .EMPTY_N(inFifo_EMPTY_N));

  // submodule outFifo
  FIFO2 #(.width(32'd81), .guarded(32'd1)) outFifo(.RST(RST_N_epReset250),
						   .CLK(CLK_epClock250),
						   .D_IN(outFifo_D_IN),
						   .ENQ(outFifo_ENQ),
						   .DEQ(outFifo_DEQ),
						   .CLR(outFifo_CLR),
						   .D_OUT(outFifo_D_OUT),
						   .FULL_N(outFifo_FULL_N),
						   .EMPTY_N(outFifo_EMPTY_N));

  // rule RL_process_incoming_packets1
  assign WILL_FIRE_RL_process_incoming_packets1 =
	     NOT_fifoRxData_write_block_AND_NOT_NOT_fifoRxD_ETC___d32 &&
	     inFifo_EMPTY_N &&
	     !rSendInvalid ;

  // rule RL_send_invalid_packets1
  assign WILL_FIRE_RL_send_invalid_packets1 =
	     NOT_fifoRxData_write_block_AND_NOT_NOT_fifoRxD_ETC___d32 &&
	     rSendInvalid ;

  // rule RL_process_outgoing_packets
  assign WILL_FIRE_RL_process_outgoing_packets =
	     NOT_fifoTxData_read_block_7_8_AND_NOT_fifoTxDa_ETC___d120 &&
	     IF_fifoTxData_read_block_7_THEN_IF_NOT_fifoTxD_ETC___d138 ;

  // inputs to muxes for submodule ports
  assign MUX_fifoRxData_elem_0__write_1__VAL_1 =
	     fifoRxData_write_block ?
	       fifoRxData_elem_0 :
	       (fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 ?
		  inFifo_D_OUT :
		  fifoRxData_elem_0) ;
  assign MUX_fifoRxData_elem_0__write_1__VAL_2 =
	     fifoRxData_write_block ?
	       fifoRxData_elem_0 :
	       { !fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 &&
		 fifoRxData_elem_0[80],
		 fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 ||
		 fifoRxData_elem_0[79],
		 fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 ?
		   79'd0 :
		   fifoRxData_elem_0[78:0] } ;
  assign MUX_fifoRxData_elem_1__write_1__VAL_1 =
	     fifoRxData_write_block ?
	       fifoRxData_elem_1 :
	       IF_fifoRxData_elem0_status_1__read_EQ_fifoRxDa_ETC___d48 ;
  assign MUX_fifoRxData_elem_1__write_1__VAL_2 =
	     fifoRxData_write_block ?
	       fifoRxData_elem_1 :
	       NOT_fifoRxData_elem0_status_1__read_EQ_fifoRxD_ETC___d78 ;
  assign MUX_fifoRxData_elem_2__write_1__VAL_1 =
	     fifoRxData_write_block ?
	       (fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 ?
		  inFifo_D_OUT :
		  fifoRxData_elem_2) :
	       fifoRxData_elem_2 ;
  assign MUX_fifoRxData_elem_2__write_1__VAL_2 =
	     fifoRxData_write_block ?
	       { !fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 &&
		 fifoRxData_elem_2[80],
		 fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 ||
		 fifoRxData_elem_2[79],
		 fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 ?
		   79'd0 :
		   fifoRxData_elem_2[78:0] } :
	       fifoRxData_elem_2 ;
  assign MUX_fifoRxData_elem_3__write_1__VAL_1 =
	     fifoRxData_write_block ?
	       IF_fifoRxData_elem1_status_1__read__8_EQ_fifoR_ETC___d55 :
	       fifoRxData_elem_3 ;
  assign MUX_fifoRxData_elem_3__write_1__VAL_2 =
	     fifoRxData_write_block ?
	       NOT_fifoRxData_elem1_status_1__read__8_EQ_fifo_ETC___d95 :
	       fifoRxData_elem_3 ;
  assign MUX_rSendInvalid_write_1__VAL_1 = !rOddBeat && inFifo_D_OUT[79] ;

  // inlined wires
  assign fifoRxData_pwEnqueue_whas =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;

  // register fifoRxData_block0_status
  assign fifoRxData_block0_status_D_IN = !fifoRxData_block0_status ;
  assign fifoRxData_block0_status_EN =
	     EN_pci_response_get && !fifoRxData_read_block ;

  // register fifoRxData_block1_status
  assign fifoRxData_block1_status_D_IN = !fifoRxData_block1_status ;
  assign fifoRxData_block1_status_EN =
	     EN_pci_response_get && fifoRxData_read_block ;

  // register fifoRxData_dInReset_pre_isInReset
  assign fifoRxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoRxData_dInReset_pre_isInReset_EN =
	     fifoRxData_dInReset_pre_isInReset ;

  // register fifoRxData_elem0_status_0
  assign fifoRxData_elem0_status_0_D_IN = !fifoRxData_block0_status ;
  assign fifoRxData_elem0_status_0_EN =
	     _dor1fifoRxData_elem0_status_0_EN__write &&
	     !fifoRxData_write_block ;

  // register fifoRxData_elem0_status_1
  assign fifoRxData_elem0_status_1_D_IN = fifoRxData_elem0_status_0 ;
  assign fifoRxData_elem0_status_1_EN =
	     _dor1fifoRxData_elem0_status_1_EN__write &&
	     !fifoRxData_write_block ;

  // register fifoRxData_elem1_status_0
  assign fifoRxData_elem1_status_0_D_IN = !fifoRxData_block1_status ;
  assign fifoRxData_elem1_status_0_EN =
	     _dor1fifoRxData_elem1_status_0_EN__write &&
	     fifoRxData_write_block ;

  // register fifoRxData_elem1_status_1
  assign fifoRxData_elem1_status_1_D_IN = fifoRxData_elem1_status_0 ;
  assign fifoRxData_elem1_status_1_EN =
	     _dor1fifoRxData_elem1_status_1_EN__write &&
	     fifoRxData_write_block ;

  // register fifoRxData_elem_0
  assign fifoRxData_elem_0_D_IN =
	     WILL_FIRE_RL_process_incoming_packets1 ?
	       MUX_fifoRxData_elem_0__write_1__VAL_1 :
	       MUX_fifoRxData_elem_0__write_1__VAL_2 ;
  assign fifoRxData_elem_0_EN =
	     WILL_FIRE_RL_process_incoming_packets1 ||
	     WILL_FIRE_RL_send_invalid_packets1 ;

  // register fifoRxData_elem_1
  assign fifoRxData_elem_1_D_IN =
	     WILL_FIRE_RL_process_incoming_packets1 ?
	       MUX_fifoRxData_elem_1__write_1__VAL_1 :
	       MUX_fifoRxData_elem_1__write_1__VAL_2 ;
  assign fifoRxData_elem_1_EN =
	     WILL_FIRE_RL_process_incoming_packets1 ||
	     WILL_FIRE_RL_send_invalid_packets1 ;

  // register fifoRxData_elem_2
  assign fifoRxData_elem_2_D_IN =
	     WILL_FIRE_RL_process_incoming_packets1 ?
	       MUX_fifoRxData_elem_2__write_1__VAL_1 :
	       MUX_fifoRxData_elem_2__write_1__VAL_2 ;
  assign fifoRxData_elem_2_EN =
	     WILL_FIRE_RL_process_incoming_packets1 ||
	     WILL_FIRE_RL_send_invalid_packets1 ;

  // register fifoRxData_elem_3
  assign fifoRxData_elem_3_D_IN =
	     WILL_FIRE_RL_process_incoming_packets1 ?
	       MUX_fifoRxData_elem_3__write_1__VAL_1 :
	       MUX_fifoRxData_elem_3__write_1__VAL_2 ;
  assign fifoRxData_elem_3_EN =
	     WILL_FIRE_RL_process_incoming_packets1 ||
	     WILL_FIRE_RL_send_invalid_packets1 ;

  // register fifoRxData_read_block
  assign fifoRxData_read_block_D_IN = ~fifoRxData_read_block ;
  assign fifoRxData_read_block_EN = EN_pci_response_get ;

  // register fifoRxData_sInReset_pre_isInReset
  assign fifoRxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoRxData_sInReset_pre_isInReset_EN =
	     fifoRxData_sInReset_pre_isInReset ;

  // register fifoRxData_write_block
  assign fifoRxData_write_block_D_IN = !fifoRxData_write_block ;
  assign fifoRxData_write_block_EN =
	     _dor1fifoRxData_write_block_EN_write &&
	     (fifoRxData_write_block &&
	      !fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 ||
	      !fifoRxData_write_block &&
	      !fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12) ;

  // register fifoTxData_block0
  assign fifoTxData_block0_D_IN =
	     { 1'd0,
	       pci_request_put[151:144],
	       pci_request_put[135:128],
	       pci_request_put[63:0],
	       pci_request_put[152],
	       pci_request_put[135:128] == 8'd0 && pci_request_put[151],
	       pci_request_put[150:136],
	       pci_request_put[127:64] } ;
  assign fifoTxData_block0_EN =
	     EN_pci_request_put && !fifoTxData_write_block ;

  // register fifoTxData_block0_status
  assign fifoTxData_block0_status_D_IN = !fifoTxData_block0_status ;
  assign fifoTxData_block0_status_EN =
	     EN_pci_request_put && !fifoTxData_write_block ;

  // register fifoTxData_block1
  assign fifoTxData_block1_D_IN =
	     { 1'd0,
	       pci_request_put[151:144],
	       pci_request_put[135:128],
	       pci_request_put[63:0],
	       pci_request_put[152],
	       pci_request_put[135:128] == 8'd0 && pci_request_put[151],
	       pci_request_put[150:136],
	       pci_request_put[127:64] } ;
  assign fifoTxData_block1_EN = EN_pci_request_put && fifoTxData_write_block ;

  // register fifoTxData_block1_status
  assign fifoTxData_block1_status_D_IN = !fifoTxData_block1_status ;
  assign fifoTxData_block1_status_EN =
	     EN_pci_request_put && fifoTxData_write_block ;

  // register fifoTxData_dInReset_pre_isInReset
  assign fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoTxData_dInReset_pre_isInReset_EN =
	     fifoTxData_dInReset_pre_isInReset ;

  // register fifoTxData_elem0_status_0
  assign fifoTxData_elem0_status_0_D_IN = fifoTxData_block0_status ;
  assign fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_process_outgoing_packets && !fifoTxData_read_block ;

  // register fifoTxData_elem0_status_1
  assign fifoTxData_elem0_status_1_D_IN = fifoTxData_elem0_status_0 ;
  assign fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_process_outgoing_packets && !fifoTxData_read_block ;

  // register fifoTxData_elem1_status_0
  assign fifoTxData_elem1_status_0_D_IN = fifoTxData_block1_status ;
  assign fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_process_outgoing_packets && fifoTxData_read_block ;

  // register fifoTxData_elem1_status_1
  assign fifoTxData_elem1_status_1_D_IN = fifoTxData_elem1_status_0 ;
  assign fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_process_outgoing_packets && fifoTxData_read_block ;

  // register fifoTxData_read_block
  assign fifoTxData_read_block_D_IN = !fifoTxData_read_block ;
  assign fifoTxData_read_block_EN =
	     WILL_FIRE_RL_process_outgoing_packets &&
	     (fifoTxData_read_block &&
	      fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112 ||
	      !fifoTxData_read_block &&
	      fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103) ;

  // register fifoTxData_sInReset_pre_isInReset
  assign fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoTxData_sInReset_pre_isInReset_EN =
	     fifoTxData_sInReset_pre_isInReset ;

  // register fifoTxData_write_block
  assign fifoTxData_write_block_D_IN = ~fifoTxData_write_block ;
  assign fifoTxData_write_block_EN = EN_pci_request_put ;

  // register rOddBeat
  assign rOddBeat_D_IN = !rOddBeat ;
  assign rOddBeat_EN = fifoRxData_pwEnqueue_whas ;

  // register rSendInvalid
  assign rSendInvalid_D_IN =
	     WILL_FIRE_RL_process_incoming_packets1 &&
	     MUX_rSendInvalid_write_1__VAL_1 ;
  assign rSendInvalid_EN =
	     WILL_FIRE_RL_process_incoming_packets1 ||
	     WILL_FIRE_RL_send_invalid_packets1 ;

  // submodule inFifo
  assign inFifo_D_IN = tlp_response_put ;
  assign inFifo_ENQ = EN_tlp_response_put ;
  assign inFifo_DEQ = WILL_FIRE_RL_process_incoming_packets1 ;
  assign inFifo_CLR = 1'b0 ;

  // submodule outFifo
  assign outFifo_D_IN =
	     fifoTxData_read_block ?
	       ((!fifoTxData_elem1_status_1__read__08_EQ_fifoTxD_ETC___d110 &&
		 fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112) ?
		  fifoTxData_block1[161:81] :
		  fifoTxData_block1[80:0]) :
	       ((!fifoTxData_elem0_status_1__read__9_EQ_fifoTxDa_ETC___d101 &&
		 fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103) ?
		  fifoTxData_block0[161:81] :
		  fifoTxData_block0[80:0]) ;
  assign outFifo_ENQ =
	     WILL_FIRE_RL_process_outgoing_packets &&
	     (fifoTxData_read_block ? be__h13006 : be__h12841) != 8'd0 ;
  assign outFifo_DEQ = EN_tlp_request_get ;
  assign outFifo_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_fifoRxData_elem0_status_1__read_EQ_fifoRxDa_ETC___d48 =
	     (fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9 &&
	      !fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12) ?
	       inFifo_D_OUT :
	       fifoRxData_elem_1 ;
  assign IF_fifoRxData_elem1_status_1__read__8_EQ_fifoR_ETC___d55 =
	     (fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20 &&
	      !fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23) ?
	       inFifo_D_OUT :
	       fifoRxData_elem_3 ;
  assign IF_fifoTxData_read_block_7_THEN_IF_NOT_fifoTxD_ETC___d138 =
	     (fifoTxData_read_block ? be__h13006 : be__h12841) == 8'd0 ||
	     outFifo_FULL_N ;
  assign NOT_fifoRxData_elem0_status_1__read_EQ_fifoRxD_ETC___d78 =
	     { (!fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9 ||
		fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12) &&
	       fifoRxData_elem_1[80],
	       fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9 &&
	       !fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 ||
	       fifoRxData_elem_1[79],
	       (fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9 &&
		!fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12) ?
		 79'd0 :
		 fifoRxData_elem_1[78:0] } ;
  assign NOT_fifoRxData_elem1_status_1__read__8_EQ_fifo_ETC___d95 =
	     { (!fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20 ||
		fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23) &&
	       fifoRxData_elem_3[80],
	       fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20 &&
	       !fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 ||
	       fifoRxData_elem_3[79],
	       (fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20 &&
		!fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23) ?
		 79'd0 :
		 fifoRxData_elem_3[78:0] } ;
  assign NOT_fifoRxData_write_block_AND_NOT_NOT_fifoRxD_ETC___d32 =
	     (!fifoRxData_write_block && x__h4464 != 2'd3 ||
	      fifoRxData_write_block && x__h4926 != 2'd3) &&
	     !fifoRxData_sInReset_pre_isInReset ;
  assign NOT_fifoTxData_read_block_7_8_AND_NOT_fifoTxDa_ETC___d120 =
	     (!fifoTxData_read_block && x__h10396 != 2'd3 ||
	      fifoTxData_read_block && x__h10849 != 2'd3) &&
	     !fifoTxData_dInReset_pre_isInReset ;
  assign _dor1fifoRxData_elem0_status_0_EN__write =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;
  assign _dor1fifoRxData_elem0_status_1_EN__write =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;
  assign _dor1fifoRxData_elem1_status_0_EN__write =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;
  assign _dor1fifoRxData_elem1_status_1_EN__write =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;
  assign _dor1fifoRxData_write_block_EN_write =
	     WILL_FIRE_RL_send_invalid_packets1 ||
	     WILL_FIRE_RL_process_incoming_packets1 ;
  assign be__h12841 =
	     (!fifoTxData_elem0_status_1__read__9_EQ_fifoTxDa_ETC___d101 &&
	      fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103) ?
	       fifoTxData_block0[152:145] :
	       fifoTxData_block0[71:64] ;
  assign be__h13006 =
	     (!fifoTxData_elem1_status_1__read__08_EQ_fifoTxD_ETC___d110 &&
	      fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112) ?
	       fifoTxData_block1[152:145] :
	       fifoTxData_block1[71:64] ;
  assign fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 =
	     fifoRxData_elem0_status_0 == fifoRxData_block0_status ;
  assign fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9 =
	     fifoRxData_elem0_status_1 == fifoRxData_block0_status ;
  assign fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 =
	     fifoRxData_elem1_status_0 == fifoRxData_block1_status ;
  assign fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20 =
	     fifoRxData_elem1_status_1 == fifoRxData_block1_status ;
  assign fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103 =
	     fifoTxData_elem0_status_0 == fifoTxData_block0_status ;
  assign fifoTxData_elem0_status_1__read__9_EQ_fifoTxDa_ETC___d101 =
	     fifoTxData_elem0_status_1 == fifoTxData_block0_status ;
  assign fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112 =
	     fifoTxData_elem1_status_0 == fifoTxData_block1_status ;
  assign fifoTxData_elem1_status_1__read__08_EQ_fifoTxD_ETC___d110 =
	     fifoTxData_elem1_status_1 == fifoTxData_block1_status ;
  assign x__h10396 =
	     { fifoTxData_elem0_status_1__read__9_EQ_fifoTxDa_ETC___d101,
	       fifoTxData_elem0_status_0__read__02_EQ_fifoTxD_ETC___d103 } ;
  assign x__h10849 =
	     { fifoTxData_elem1_status_1__read__08_EQ_fifoTxD_ETC___d110,
	       fifoTxData_elem1_status_0__read__11_EQ_fifoTxD_ETC___d112 } ;
  assign x__h13446 =
	     { fifoTxData_elem0_status_1 == fifoTxData_block0_status,
	       fifoTxData_elem0_status_0 == fifoTxData_block0_status } ;
  assign x__h13824 =
	     { fifoTxData_elem1_status_1 == fifoTxData_block1_status,
	       fifoTxData_elem1_status_0 == fifoTxData_block1_status } ;
  assign x__h15255 =
	     { fifoRxData_elem0_status_1 != fifoRxData_block0_status,
	       fifoRxData_elem0_status_0 != fifoRxData_block0_status } ;
  assign x__h15639 =
	     { fifoRxData_elem1_status_1 != fifoRxData_block1_status,
	       fifoRxData_elem1_status_0 != fifoRxData_block1_status } ;
  assign x__h4464 =
	     { !fifoRxData_elem0_status_1__read_EQ_fifoRxData__ETC___d9,
	       !fifoRxData_elem0_status_0__read__1_EQ_fifoRxDa_ETC___d12 } ;
  assign x__h4926 =
	     { !fifoRxData_elem1_status_1__read__8_EQ_fifoRxDa_ETC___d20,
	       !fifoRxData_elem1_status_0__read__2_EQ_fifoRxDa_ETC___d23 } ;

  // handling of inlined registers

  always@(posedge CLK_epClock250)
  begin
    if (RST_N_epReset250 == `BSV_RESET_VALUE)
      begin
        fifoRxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_elem_0 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	fifoRxData_elem_1 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	fifoRxData_elem_2 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	fifoRxData_elem_3 <= `BSV_ASSIGNMENT_DELAY 81'd0;
	fifoRxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fifoRxData_elem0_status_0_EN)
	  fifoRxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_elem0_status_0_D_IN;
	if (fifoRxData_elem0_status_1_EN)
	  fifoRxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_elem0_status_1_D_IN;
	if (fifoRxData_elem1_status_0_EN)
	  fifoRxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_elem1_status_0_D_IN;
	if (fifoRxData_elem1_status_1_EN)
	  fifoRxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_elem1_status_1_D_IN;
	if (fifoRxData_elem_0_EN)
	  fifoRxData_elem_0 <= `BSV_ASSIGNMENT_DELAY fifoRxData_elem_0_D_IN;
	if (fifoRxData_elem_1_EN)
	  fifoRxData_elem_1 <= `BSV_ASSIGNMENT_DELAY fifoRxData_elem_1_D_IN;
	if (fifoRxData_elem_2_EN)
	  fifoRxData_elem_2 <= `BSV_ASSIGNMENT_DELAY fifoRxData_elem_2_D_IN;
	if (fifoRxData_elem_3_EN)
	  fifoRxData_elem_3 <= `BSV_ASSIGNMENT_DELAY fifoRxData_elem_3_D_IN;
	if (fifoRxData_write_block_EN)
	  fifoRxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_write_block_D_IN;
	if (fifoTxData_elem0_status_0_EN)
	  fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem0_status_0_D_IN;
	if (fifoTxData_elem0_status_1_EN)
	  fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem0_status_1_D_IN;
	if (fifoTxData_elem1_status_0_EN)
	  fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem1_status_0_D_IN;
	if (fifoTxData_elem1_status_1_EN)
	  fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem1_status_1_D_IN;
	if (fifoTxData_read_block_EN)
	  fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_read_block_D_IN;
      end
  end

  always@(posedge CLK_epClock125)
  begin
    if (RST_N_epReset125 == `BSV_RESET_VALUE)
      begin
        fifoRxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoRxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 162'd0;
	fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 162'd0;
	fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fifoRxData_block0_status_EN)
	  fifoRxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_block0_status_D_IN;
	if (fifoRxData_block1_status_EN)
	  fifoRxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_block1_status_D_IN;
	if (fifoRxData_read_block_EN)
	  fifoRxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      fifoRxData_read_block_D_IN;
	if (fifoTxData_block0_EN)
	  fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY fifoTxData_block0_D_IN;
	if (fifoTxData_block0_status_EN)
	  fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_block0_status_D_IN;
	if (fifoTxData_block1_EN)
	  fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY fifoTxData_block1_D_IN;
	if (fifoTxData_block1_status_EN)
	  fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_block1_status_D_IN;
	if (fifoTxData_write_block_EN)
	  fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_write_block_D_IN;
      end
  end

  always@(posedge CLK_epClock250 or `BSV_RESET_EDGE RST_N_epReset250)
  if (RST_N_epReset250 == `BSV_RESET_VALUE)
    begin
      rOddBeat <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rSendInvalid <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rOddBeat_EN) rOddBeat <= `BSV_ASSIGNMENT_DELAY rOddBeat_D_IN;
      if (rSendInvalid_EN)
	rSendInvalid <= `BSV_ASSIGNMENT_DELAY rSendInvalid_D_IN;
    end

  always@(posedge CLK_epClock250 or
	  `BSV_RESET_EDGE fifoTxData_dCombinedReset_RST_OUT)
  if (fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoTxData_dInReset_pre_isInReset_EN)
	fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_epClock250 or
	  `BSV_RESET_EDGE fifoRxData_sCombinedReset_RST_OUT)
  if (fifoRxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoRxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoRxData_sInReset_pre_isInReset_EN)
	fifoRxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoRxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_epClock125 or
	  `BSV_RESET_EDGE fifoTxData_sCombinedReset_RST_OUT)
  if (fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoTxData_sInReset_pre_isInReset_EN)
	fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_epClock125 or
	  `BSV_RESET_EDGE fifoRxData_dCombinedReset_RST_OUT)
  if (fifoRxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoRxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoRxData_dInReset_pre_isInReset_EN)
	fifoRxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoRxData_dInReset_pre_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fifoRxData_block0_status = 1'h0;
    fifoRxData_block1_status = 1'h0;
    fifoRxData_dInReset_pre_isInReset = 1'h0;
    fifoRxData_elem0_status_0 = 1'h0;
    fifoRxData_elem0_status_1 = 1'h0;
    fifoRxData_elem1_status_0 = 1'h0;
    fifoRxData_elem1_status_1 = 1'h0;
    fifoRxData_elem_0 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    fifoRxData_elem_1 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    fifoRxData_elem_2 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    fifoRxData_elem_3 = 81'h0AAAAAAAAAAAAAAAAAAAA;
    fifoRxData_read_block = 1'h0;
    fifoRxData_sInReset_pre_isInReset = 1'h0;
    fifoRxData_write_block = 1'h0;
    fifoTxData_block0 = 162'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifoTxData_block0_status = 1'h0;
    fifoTxData_block1 = 162'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifoTxData_block1_status = 1'h0;
    fifoTxData_dInReset_pre_isInReset = 1'h0;
    fifoTxData_elem0_status_0 = 1'h0;
    fifoTxData_elem0_status_1 = 1'h0;
    fifoTxData_elem1_status_0 = 1'h0;
    fifoTxData_elem1_status_1 = 1'h0;
    fifoTxData_read_block = 1'h0;
    fifoTxData_sInReset_pre_isInReset = 1'h0;
    fifoTxData_write_block = 1'h0;
    rOddBeat = 1'h0;
    rSendInvalid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPcieGearbox

