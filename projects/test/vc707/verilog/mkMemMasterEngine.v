//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Tue Sep  9 02:14:01 EDT 2014
//
//
// Ports:
// Name                         I/O  size props
// tlp_request_get                O   153 reg
// RDY_tlp_request_get            O     1 reg
// RDY_tlp_response_put           O     1 const
// master_read_client_readReq_get  O    46
// RDY_master_read_client_readReq_get  O     1
// RDY_master_read_client_readData_put  O     1
// master_write_client_writeReq_get  O    46
// RDY_master_write_client_writeReq_get  O     1
// master_write_client_writeData_get  O    39
// RDY_master_write_client_writeData_get  O     1 reg
// RDY_master_write_client_writeDone_put  O     1 const
// my_id                          I    16
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tlp_response_put               I   153
// master_read_client_readData_put  I    39
// master_write_client_writeDone_put  I     6 unused
// EN_tlp_response_put            I     1
// EN_master_read_client_readData_put  I     1
// EN_master_write_client_writeDone_put  I     1 unused
// EN_tlp_request_get             I     1
// EN_master_read_client_readReq_get  I     1
// EN_master_write_client_writeReq_get  I     1
// EN_master_write_client_writeData_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemMasterEngine(my_id,
			 CLK,
			 RST_N,

			 EN_tlp_request_get,
			 tlp_request_get,
			 RDY_tlp_request_get,

			 tlp_response_put,
			 EN_tlp_response_put,
			 RDY_tlp_response_put,

			 EN_master_read_client_readReq_get,
			 master_read_client_readReq_get,
			 RDY_master_read_client_readReq_get,

			 master_read_client_readData_put,
			 EN_master_read_client_readData_put,
			 RDY_master_read_client_readData_put,

			 EN_master_write_client_writeReq_get,
			 master_write_client_writeReq_get,
			 RDY_master_write_client_writeReq_get,

			 EN_master_write_client_writeData_get,
			 master_write_client_writeData_get,
			 RDY_master_write_client_writeData_get,

			 master_write_client_writeDone_put,
			 EN_master_write_client_writeDone_put,
			 RDY_master_write_client_writeDone_put);
  input  [15 : 0] my_id;
  input  CLK;
  input  RST_N;

  // actionvalue method tlp_request_get
  input  EN_tlp_request_get;
  output [152 : 0] tlp_request_get;
  output RDY_tlp_request_get;

  // action method tlp_response_put
  input  [152 : 0] tlp_response_put;
  input  EN_tlp_response_put;
  output RDY_tlp_response_put;

  // actionvalue method master_read_client_readReq_get
  input  EN_master_read_client_readReq_get;
  output [45 : 0] master_read_client_readReq_get;
  output RDY_master_read_client_readReq_get;

  // action method master_read_client_readData_put
  input  [38 : 0] master_read_client_readData_put;
  input  EN_master_read_client_readData_put;
  output RDY_master_read_client_readData_put;

  // actionvalue method master_write_client_writeReq_get
  input  EN_master_write_client_writeReq_get;
  output [45 : 0] master_write_client_writeReq_get;
  output RDY_master_write_client_writeReq_get;

  // actionvalue method master_write_client_writeData_get
  input  EN_master_write_client_writeData_get;
  output [38 : 0] master_write_client_writeData_get;
  output RDY_master_write_client_writeData_get;

  // action method master_write_client_writeDone_put
  input  [5 : 0] master_write_client_writeDone_put;
  input  EN_master_write_client_writeDone_put;
  output RDY_master_write_client_writeDone_put;

  // signals for module outputs
  wire [152 : 0] tlp_request_get;
  wire [45 : 0] master_read_client_readReq_get,
		master_write_client_writeReq_get;
  wire [38 : 0] master_write_client_writeData_get;
  wire RDY_master_read_client_readData_put,
       RDY_master_read_client_readReq_get,
       RDY_master_write_client_writeData_get,
       RDY_master_write_client_writeDone_put,
       RDY_master_write_client_writeReq_get,
       RDY_tlp_request_get,
       RDY_tlp_response_put;

  // inlined wires
  wire [2 : 0] completionMimo_ifc_rwDeqCount_wget;
  wire completionMimo_ifc_rwDeqCount_whas;

  // register completionMimoDeqCount
  reg [2 : 0] completionMimoDeqCount;
  wire [2 : 0] completionMimoDeqCount_D_IN;
  wire completionMimoDeqCount_EN;

  // register completionMimo_ifc_rDataAvail
  reg [2 : 0] completionMimo_ifc_rDataAvail;
  wire [2 : 0] completionMimo_ifc_rDataAvail_D_IN;
  wire completionMimo_ifc_rDataAvail_EN;

  // register completionMimo_ifc_rDataCount
  reg [2 : 0] completionMimo_ifc_rDataCount;
  wire [2 : 0] completionMimo_ifc_rDataCount_D_IN;
  wire completionMimo_ifc_rDataCount_EN;

  // register completionMimo_ifc_rStorage
  reg [127 : 0] completionMimo_ifc_rStorage;
  wire [127 : 0] completionMimo_ifc_rStorage_D_IN;
  wire completionMimo_ifc_rStorage_EN;

  // register completionMimo_ifc_rStorageMask
  reg [127 : 0] completionMimo_ifc_rStorageMask;
  wire [127 : 0] completionMimo_ifc_rStorageMask_D_IN;
  wire completionMimo_ifc_rStorageMask_EN;

  // register hitReg
  reg [6 : 0] hitReg;
  wire [6 : 0] hitReg_D_IN;
  wire hitReg_EN;

  // register readBurstCount
  reg [9 : 0] readBurstCount;
  wire [9 : 0] readBurstCount_D_IN;
  wire readBurstCount_EN;

  // register readBurstCountGreaterThan4
  reg readBurstCountGreaterThan4;
  wire readBurstCountGreaterThan4_D_IN, readBurstCountGreaterThan4_EN;

  // register readInProgress
  reg readInProgress;
  wire readInProgress_D_IN, readInProgress_EN;

  // register tlpTag
  reg [7 : 0] tlpTag;
  wire [7 : 0] tlpTag_D_IN;
  wire tlpTag_EN;

  // ports of submodule readDataFifo
  wire [127 : 0] readDataFifo_D_IN, readDataFifo_D_OUT;
  wire readDataFifo_CLR,
       readDataFifo_DEQ,
       readDataFifo_EMPTY_N,
       readDataFifo_ENQ,
       readDataFifo_FULL_N;

  // ports of submodule readHeaderFifo
  wire [127 : 0] readHeaderFifo_D_IN, readHeaderFifo_D_OUT;
  wire readHeaderFifo_CLR,
       readHeaderFifo_DEQ,
       readHeaderFifo_EMPTY_N,
       readHeaderFifo_ENQ,
       readHeaderFifo_FULL_N;

  // ports of submodule tlpOutFifo
  wire [152 : 0] tlpOutFifo_D_IN, tlpOutFifo_D_OUT;
  wire tlpOutFifo_CLR,
       tlpOutFifo_DEQ,
       tlpOutFifo_EMPTY_N,
       tlpOutFifo_ENQ,
       tlpOutFifo_FULL_N;

  // ports of submodule writeDataFifo
  wire [127 : 0] writeDataFifo_D_IN, writeDataFifo_D_OUT;
  wire writeDataFifo_CLR,
       writeDataFifo_DEQ,
       writeDataFifo_EMPTY_N,
       writeDataFifo_ENQ,
       writeDataFifo_FULL_N;

  // ports of submodule writeHeaderFifo
  wire [127 : 0] writeHeaderFifo_D_IN, writeHeaderFifo_D_OUT;
  wire writeHeaderFifo_CLR,
       writeHeaderFifo_DEQ,
       writeHeaderFifo_EMPTY_N,
       writeHeaderFifo_ENQ,
       writeHeaderFifo_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_completionHeader, WILL_FIRE_RL_continuation;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_tlpOutFifo_enq_1__VAL_1, MUX_tlpOutFifo_enq_1__VAL_2;
  wire MUX_readBurstCountGreaterThan4_write_1__VAL_1,
       MUX_readBurstCountGreaterThan4_write_1__VAL_2,
       MUX_readInProgress_write_1__SEL_1;

  // remaining internal signals
  reg [15 : 0] tlp_be__h4467;
  reg [1 : 0] CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3;
  wire [150 : 0] _0_CONCAT_IF_readBurstCountGreaterThan4_5_THEN__ETC___d132;
  wire [127 : 0] enqData__h1151,
		 enqMask__h1152,
		 nextMask__h1146,
		 nextMask__h1154,
		 nextStorage__h1145,
		 nextStorage__h1153,
		 x__h1213,
		 x__h1376,
		 x__h1503,
		 y__h1214;
  wire [31 : 0] data__h10039,
		spliced_bits__h4514,
		spliced_bits__h4550,
		spliced_bits__h4586,
		spliced_bits__h4622,
		value__h1377,
		value__h1504,
		x__h1340,
		x__h1495,
		y_avValue_addr__h9050,
		y_avValue_addr__h9907;
  wire [9 : 0] IF_rbc156_ULT_4_THEN_rbc156_ELSE_4__q2,
	       IF_rbc837_ULT_4_THEN_rbc837_ELSE_4__q1,
	       rbc___1__h4186,
	       rbc__h3837,
	       rbc__h4156;
  wire [7 : 0] y_avValue_burstLen__h9051, y_avValue_burstLen__h9908;
  wire [2 : 0] b__h1274, b__h1635, value__h1445;

  // actionvalue method tlp_request_get
  assign tlp_request_get = tlpOutFifo_D_OUT ;
  assign RDY_tlp_request_get = tlpOutFifo_EMPTY_N ;

  // action method tlp_response_put
  assign RDY_tlp_response_put = 1'b1 ;

  // actionvalue method master_read_client_readReq_get
  assign master_read_client_readReq_get =
	     { y_avValue_addr__h9050,
	       y_avValue_burstLen__h9051,
	       readHeaderFifo_D_OUT[77:72] } ;
  assign RDY_master_read_client_readReq_get =
	     readHeaderFifo_EMPTY_N && readDataFifo_FULL_N ;

  // action method master_read_client_readData_put
  assign RDY_master_read_client_readData_put =
	     completionMimo_ifc_rDataCount < 3'd4 &&
	     completionMimo_ifc_rDataAvail != 3'd0 ;

  // actionvalue method master_write_client_writeReq_get
  assign master_write_client_writeReq_get =
	     { y_avValue_addr__h9907,
	       y_avValue_burstLen__h9908,
	       writeHeaderFifo_D_OUT[77:72] } ;
  assign RDY_master_write_client_writeReq_get =
	     writeHeaderFifo_EMPTY_N && writeDataFifo_FULL_N ;

  // actionvalue method master_write_client_writeData_get
  assign master_write_client_writeData_get =
	     { data__h10039, writeDataFifo_D_OUT[77:72], 1'd1 } ;
  assign RDY_master_write_client_writeData_get = writeDataFifo_EMPTY_N ;

  // action method master_write_client_writeDone_put
  assign RDY_master_write_client_writeDone_put = 1'd1 ;

  // submodule readDataFifo
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) readDataFifo(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(readDataFifo_D_IN),
					    .ENQ(readDataFifo_ENQ),
					    .DEQ(readDataFifo_DEQ),
					    .CLR(readDataFifo_CLR),
					    .D_OUT(readDataFifo_D_OUT),
					    .FULL_N(readDataFifo_FULL_N),
					    .EMPTY_N(readDataFifo_EMPTY_N));

  // submodule readHeaderFifo
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) readHeaderFifo(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(readHeaderFifo_D_IN),
					      .ENQ(readHeaderFifo_ENQ),
					      .DEQ(readHeaderFifo_DEQ),
					      .CLR(readHeaderFifo_CLR),
					      .D_OUT(readHeaderFifo_D_OUT),
					      .FULL_N(readHeaderFifo_FULL_N),
					      .EMPTY_N(readHeaderFifo_EMPTY_N));

  // submodule tlpOutFifo
  SizedFIFO #(.p1width(32'd153),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) tlpOutFifo(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(tlpOutFifo_D_IN),
					  .ENQ(tlpOutFifo_ENQ),
					  .DEQ(tlpOutFifo_DEQ),
					  .CLR(tlpOutFifo_CLR),
					  .D_OUT(tlpOutFifo_D_OUT),
					  .FULL_N(tlpOutFifo_FULL_N),
					  .EMPTY_N(tlpOutFifo_EMPTY_N));

  // submodule writeDataFifo
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) writeDataFifo(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(writeDataFifo_D_IN),
					     .ENQ(writeDataFifo_ENQ),
					     .DEQ(writeDataFifo_DEQ),
					     .CLR(writeDataFifo_CLR),
					     .D_OUT(writeDataFifo_D_OUT),
					     .FULL_N(writeDataFifo_FULL_N),
					     .EMPTY_N(writeDataFifo_EMPTY_N));

  // submodule writeHeaderFifo
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) writeHeaderFifo(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(writeHeaderFifo_D_IN),
					       .ENQ(writeHeaderFifo_ENQ),
					       .DEQ(writeHeaderFifo_DEQ),
					       .CLR(writeHeaderFifo_CLR),
					       .D_OUT(writeHeaderFifo_D_OUT),
					       .FULL_N(writeHeaderFifo_FULL_N),
					       .EMPTY_N(writeHeaderFifo_EMPTY_N));

  // rule RL_completionHeader
  assign WILL_FIRE_RL_completionHeader =
	     completionMimo_ifc_rDataCount != 3'd0 && tlpOutFifo_FULL_N &&
	     readDataFifo_EMPTY_N &&
	     !readInProgress ;

  // rule RL_continuation
  assign WILL_FIRE_RL_continuation =
	     completionMimo_ifc_rDataCount != 3'd0 && tlpOutFifo_FULL_N &&
	     (readBurstCountGreaterThan4 || readDataFifo_EMPTY_N) &&
	     readInProgress &&
	     completionMimo_ifc_rDataCount >= completionMimoDeqCount ;

  // inputs to muxes for submodule ports
  assign MUX_readInProgress_write_1__SEL_1 =
	     WILL_FIRE_RL_continuation && !readBurstCountGreaterThan4 ;
  assign MUX_readBurstCountGreaterThan4_write_1__VAL_1 = rbc__h3837 > 10'd4 ;
  assign MUX_readBurstCountGreaterThan4_write_1__VAL_2 = rbc__h4156 > 10'd4 ;
  assign MUX_tlpOutFifo_enq_1__VAL_1 =
	     { 1'd1,
	       readDataFifo_D_OUT[105:96] == 10'd1,
	       hitReg,
	       25'd33554068,
	       readDataFifo_D_OUT[118:116],
	       6'd0,
	       readDataFifo_D_OUT[109:108],
	       2'd0,
	       readDataFifo_D_OUT[105:96],
	       my_id,
	       16'd4,
	       readDataFifo_D_OUT[95:72],
	       1'd0,
	       readDataFifo_D_OUT[38:34],
	       CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3,
	       spliced_bits__h4514 } ;
  assign MUX_tlpOutFifo_enq_1__VAL_2 =
	     { 1'd0,
	       !readBurstCountGreaterThan4,
	       _0_CONCAT_IF_readBurstCountGreaterThan4_5_THEN__ETC___d132 } ;

  // inlined wires
  assign completionMimo_ifc_rwDeqCount_wget =
	     WILL_FIRE_RL_continuation ? completionMimoDeqCount : 3'd1 ;
  assign completionMimo_ifc_rwDeqCount_whas =
	     WILL_FIRE_RL_continuation || WILL_FIRE_RL_completionHeader ;

  // register completionMimoDeqCount
  assign completionMimoDeqCount_D_IN =
	     WILL_FIRE_RL_completionHeader ?
	       IF_rbc837_ULT_4_THEN_rbc837_ELSE_4__q1[2:0] :
	       IF_rbc156_ULT_4_THEN_rbc156_ELSE_4__q2[2:0] ;
  assign completionMimoDeqCount_EN =
	     WILL_FIRE_RL_completionHeader || WILL_FIRE_RL_continuation ;

  // register completionMimo_ifc_rDataAvail
  assign completionMimo_ifc_rDataAvail_D_IN =
	     completionMimo_ifc_rDataAvail + b__h1274 - b__h1635 ;
  assign completionMimo_ifc_rDataAvail_EN = 1'd1 ;

  // register completionMimo_ifc_rDataCount
  assign completionMimo_ifc_rDataCount_D_IN = value__h1445 + b__h1635 ;
  assign completionMimo_ifc_rDataCount_EN = 1'd1 ;

  // register completionMimo_ifc_rStorage
  assign completionMimo_ifc_rStorage_D_IN = nextStorage__h1153 ;
  assign completionMimo_ifc_rStorage_EN = 1'd1 ;

  // register completionMimo_ifc_rStorageMask
  assign completionMimo_ifc_rStorageMask_D_IN = nextMask__h1154 ;
  assign completionMimo_ifc_rStorageMask_EN = 1'd1 ;

  // register hitReg
  assign hitReg_D_IN = tlp_response_put[150:144] ;
  assign hitReg_EN = EN_tlp_response_put ;

  // register readBurstCount
  assign readBurstCount_D_IN =
	     WILL_FIRE_RL_continuation ? rbc__h4156 : rbc__h3837 ;
  assign readBurstCount_EN = completionMimo_ifc_rwDeqCount_whas ;

  // register readBurstCountGreaterThan4
  assign readBurstCountGreaterThan4_D_IN =
	     WILL_FIRE_RL_completionHeader ?
	       MUX_readBurstCountGreaterThan4_write_1__VAL_1 :
	       MUX_readBurstCountGreaterThan4_write_1__VAL_2 ;
  assign readBurstCountGreaterThan4_EN =
	     WILL_FIRE_RL_completionHeader || WILL_FIRE_RL_continuation ;

  // register readInProgress
  assign readInProgress_D_IN =
	     !MUX_readInProgress_write_1__SEL_1 &&
	     readDataFifo_D_OUT[105:96] != 10'd1 ;
  assign readInProgress_EN =
	     WILL_FIRE_RL_continuation && !readBurstCountGreaterThan4 ||
	     WILL_FIRE_RL_completionHeader ;

  // register tlpTag
  assign tlpTag_D_IN = 8'h0 ;
  assign tlpTag_EN = 1'b0 ;

  // submodule readDataFifo
  assign readDataFifo_D_IN =
	     { 1'd0,
	       readHeaderFifo_D_OUT[126:120],
	       1'd0,
	       readHeaderFifo_D_OUT[118:116],
	       4'd0,
	       readHeaderFifo_D_OUT[111:108],
	       2'd0,
	       readHeaderFifo_D_OUT[105:34],
	       2'd0,
	       readHeaderFifo_D_OUT[31:0] } ;
  assign readDataFifo_ENQ = EN_master_read_client_readReq_get ;
  assign readDataFifo_DEQ =
	     WILL_FIRE_RL_completionHeader &&
	     readDataFifo_D_OUT[105:96] == 10'd1 ||
	     WILL_FIRE_RL_continuation && !readBurstCountGreaterThan4 ;
  assign readDataFifo_CLR = 1'b0 ;

  // submodule readHeaderFifo
  assign readHeaderFifo_D_IN =
	     { 1'd0,
	       tlp_response_put[126:120],
	       1'd0,
	       tlp_response_put[118:116],
	       4'd0,
	       tlp_response_put[111:108],
	       2'd0,
	       tlp_response_put[105:34],
	       2'd0,
	       tlp_response_put[31:0] } ;
  assign readHeaderFifo_ENQ =
	     EN_tlp_response_put && tlp_response_put[126:125] == 2'd0 &&
	     readHeaderFifo_FULL_N ;
  assign readHeaderFifo_DEQ = EN_master_read_client_readReq_get ;
  assign readHeaderFifo_CLR = 1'b0 ;

  // submodule tlpOutFifo
  assign tlpOutFifo_D_IN =
	     WILL_FIRE_RL_completionHeader ?
	       MUX_tlpOutFifo_enq_1__VAL_1 :
	       MUX_tlpOutFifo_enq_1__VAL_2 ;
  assign tlpOutFifo_ENQ =
	     WILL_FIRE_RL_completionHeader || WILL_FIRE_RL_continuation ;
  assign tlpOutFifo_DEQ = EN_tlp_request_get ;
  assign tlpOutFifo_CLR = 1'b0 ;

  // submodule writeDataFifo
  assign writeDataFifo_D_IN =
	     { 1'd0,
	       writeHeaderFifo_D_OUT[126:120],
	       1'd0,
	       writeHeaderFifo_D_OUT[118:116],
	       4'd0,
	       writeHeaderFifo_D_OUT[111:108],
	       2'd0,
	       writeHeaderFifo_D_OUT[105:34],
	       2'd0,
	       writeHeaderFifo_D_OUT[31:0] } ;
  assign writeDataFifo_ENQ = EN_master_write_client_writeReq_get ;
  assign writeDataFifo_DEQ = EN_master_write_client_writeData_get ;
  assign writeDataFifo_CLR = 1'b0 ;

  // submodule writeHeaderFifo
  assign writeHeaderFifo_D_IN =
	     { 1'd0,
	       tlp_response_put[126:120],
	       1'd0,
	       tlp_response_put[118:116],
	       4'd0,
	       tlp_response_put[111:108],
	       2'd0,
	       tlp_response_put[105:34],
	       2'd0,
	       tlp_response_put[31:0] } ;
  assign writeHeaderFifo_ENQ =
	     EN_tlp_response_put && tlp_response_put[126:125] != 2'd0 &&
	     writeHeaderFifo_FULL_N ;
  assign writeHeaderFifo_DEQ = EN_master_write_client_writeReq_get ;
  assign writeHeaderFifo_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_rbc156_ULT_4_THEN_rbc156_ELSE_4__q2 =
	     (rbc__h4156 < 10'd4) ? rbc__h4156 : 10'd4 ;
  assign IF_rbc837_ULT_4_THEN_rbc837_ELSE_4__q1 =
	     (rbc__h3837 < 10'd4) ? rbc__h3837 : 10'd4 ;
  assign _0_CONCAT_IF_readBurstCountGreaterThan4_5_THEN__ETC___d132 =
	     { 7'd0,
	       readBurstCountGreaterThan4 ? 16'hFFFF : tlp_be__h4467,
	       spliced_bits__h4514,
	       spliced_bits__h4550,
	       spliced_bits__h4586,
	       spliced_bits__h4622 } ;
  assign b__h1274 =
	     completionMimo_ifc_rwDeqCount_whas ?
	       completionMimo_ifc_rwDeqCount_wget :
	       3'd0 ;
  assign b__h1635 = EN_master_read_client_readData_put ? 3'd1 : 3'd0 ;
  assign data__h10039 =
	     { writeDataFifo_D_OUT[7:0],
	       writeDataFifo_D_OUT[15:8],
	       writeDataFifo_D_OUT[23:16],
	       writeDataFifo_D_OUT[31:24] } ;
  assign enqData__h1151 = x__h1376 << x__h1495 ;
  assign enqMask__h1152 = x__h1503 << x__h1495 ;
  assign nextMask__h1146 = completionMimo_ifc_rStorageMask >> x__h1340 ;
  assign nextMask__h1154 = nextMask__h1146 | enqMask__h1152 ;
  assign nextStorage__h1145 = completionMimo_ifc_rStorage >> x__h1340 ;
  assign nextStorage__h1153 = x__h1213 | y__h1214 ;
  assign rbc___1__h4186 = readBurstCount - 10'd4 ;
  assign rbc__h3837 = readDataFifo_D_OUT[105:96] - 10'd1 ;
  assign rbc__h4156 = readBurstCountGreaterThan4 ? rbc___1__h4186 : 10'd0 ;
  assign spliced_bits__h4514 =
	     { completionMimo_ifc_rStorage[7:0],
	       completionMimo_ifc_rStorage[15:8],
	       completionMimo_ifc_rStorage[23:16],
	       completionMimo_ifc_rStorage[31:24] } ;
  assign spliced_bits__h4550 =
	     { completionMimo_ifc_rStorage[39:32],
	       completionMimo_ifc_rStorage[47:40],
	       completionMimo_ifc_rStorage[55:48],
	       completionMimo_ifc_rStorage[63:56] } ;
  assign spliced_bits__h4586 =
	     { completionMimo_ifc_rStorage[71:64],
	       completionMimo_ifc_rStorage[79:72],
	       completionMimo_ifc_rStorage[87:80],
	       completionMimo_ifc_rStorage[95:88] } ;
  assign spliced_bits__h4622 =
	     { completionMimo_ifc_rStorage[103:96],
	       completionMimo_ifc_rStorage[111:104],
	       completionMimo_ifc_rStorage[119:112],
	       completionMimo_ifc_rStorage[127:120] } ;
  assign value__h1377 =
	     EN_master_read_client_readData_put ?
	       master_read_client_readData_put[38:7] :
	       32'd0 ;
  assign value__h1445 = completionMimo_ifc_rDataCount - b__h1274 ;
  assign value__h1504 =
	     EN_master_read_client_readData_put ? 32'hFFFFFFFF : 32'd0 ;
  assign x__h1213 = nextStorage__h1145 & nextMask__h1146 ;
  assign x__h1340 = { 24'd0, b__h1274, 5'd0 } ;
  assign x__h1376 = { 96'd0, value__h1377 } ;
  assign x__h1495 = { 24'd0, value__h1445, 5'd0 } ;
  assign x__h1503 = { 96'd0, value__h1504 } ;
  assign y__h1214 = enqData__h1151 & enqMask__h1152 ;
  assign y_avValue_addr__h9050 = { readHeaderFifo_D_OUT[63:34], 2'd0 } ;
  assign y_avValue_addr__h9907 = { writeHeaderFifo_D_OUT[63:34], 2'd0 } ;
  assign y_avValue_burstLen__h9051 = { readHeaderFifo_D_OUT[101:96], 2'd0 } ;
  assign y_avValue_burstLen__h9908 = { writeHeaderFifo_D_OUT[101:96], 2'd0 } ;
  always@(readBurstCount)
  begin
    case (readBurstCount)
      10'd0: tlp_be__h4467 = 16'd0;
      10'd1: tlp_be__h4467 = 16'hF000;
      10'd2: tlp_be__h4467 = 16'hFF00;
      10'd3: tlp_be__h4467 = 16'hFFF0;
      default: tlp_be__h4467 = 16'hFFFF;
    endcase
  end
  always@(readDataFifo_D_OUT)
  begin
    case (readDataFifo_D_OUT[67:64])
      4'b1000: CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3 = 2'b11;
      4'b1100: CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3 = 2'b10;
      4'b1110: CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3 = 2'b01;
      default: CASE_readDataFifoD_OUT_BITS_67_TO_64_0b1000_0_ETC__q3 = 2'b0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        completionMimoDeqCount <= `BSV_ASSIGNMENT_DELAY 3'd0;
	completionMimo_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 3'd4;
	completionMimo_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 3'd0;
	completionMimo_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 128'd0;
	completionMimo_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 128'd0;
	hitReg <= `BSV_ASSIGNMENT_DELAY 7'd0;
	readBurstCount <= `BSV_ASSIGNMENT_DELAY 10'd0;
	readBurstCountGreaterThan4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readInProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tlpTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (completionMimoDeqCount_EN)
	  completionMimoDeqCount <= `BSV_ASSIGNMENT_DELAY
	      completionMimoDeqCount_D_IN;
	if (completionMimo_ifc_rDataAvail_EN)
	  completionMimo_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	      completionMimo_ifc_rDataAvail_D_IN;
	if (completionMimo_ifc_rDataCount_EN)
	  completionMimo_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	      completionMimo_ifc_rDataCount_D_IN;
	if (completionMimo_ifc_rStorage_EN)
	  completionMimo_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	      completionMimo_ifc_rStorage_D_IN;
	if (completionMimo_ifc_rStorageMask_EN)
	  completionMimo_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	      completionMimo_ifc_rStorageMask_D_IN;
	if (hitReg_EN) hitReg <= `BSV_ASSIGNMENT_DELAY hitReg_D_IN;
	if (readBurstCount_EN)
	  readBurstCount <= `BSV_ASSIGNMENT_DELAY readBurstCount_D_IN;
	if (readBurstCountGreaterThan4_EN)
	  readBurstCountGreaterThan4 <= `BSV_ASSIGNMENT_DELAY
	      readBurstCountGreaterThan4_D_IN;
	if (readInProgress_EN)
	  readInProgress <= `BSV_ASSIGNMENT_DELAY readInProgress_D_IN;
	if (tlpTag_EN) tlpTag <= `BSV_ASSIGNMENT_DELAY tlpTag_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    completionMimoDeqCount = 3'h2;
    completionMimo_ifc_rDataAvail = 3'h2;
    completionMimo_ifc_rDataCount = 3'h2;
    completionMimo_ifc_rStorage = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    completionMimo_ifc_rStorageMask = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    hitReg = 7'h2A;
    readBurstCount = 10'h2AA;
    readBurstCountGreaterThan4 = 1'h0;
    readInProgress = 1'h0;
    tlpTag = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMemMasterEngine

